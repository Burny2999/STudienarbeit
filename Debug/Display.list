
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08011020  08011020  00012020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080114b8  080114b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080114c0  080114c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080114c4  080114c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000204  24000000  080114c8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000204  080116cc  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000264  0801172c  00013264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a34  240002c8  0801178c  000132c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000cfc  0801178c  00013cfc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000132c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002471c  00000000  00000000  000132f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a79  00000000  00000000  00037a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0003b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f2  00000000  00000000  0003cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c010  00000000  00000000  0003e44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023007  00000000  00000000  0007a45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001820a1  00000000  00000000  0009d461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021f502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083f0  00000000  00000000  0021f548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00227938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002c8 	.word	0x240002c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011008 	.word	0x08011008

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002cc 	.word	0x240002cc
 80002dc:	08011008 	.word	0x08011008

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000688:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800068c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d013      	beq.n	80006c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800069c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00b      	beq.n	80006c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a8:	e000      	b.n	80006ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80006aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_write>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e009      	b.n	80006f8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	60ba      	str	r2, [r7, #8]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffc7 	bl	8000680 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dbf1      	blt.n	80006e4 <_write+0x16>
  return len;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN PFP */
uint8_t convCompleted=0;
uint16_t winkel1;
uint16_t winkel2;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC3) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <HAL_ADC_ConvCpltCallback+0x24>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d102      	bne.n	8000724 <HAL_ADC_ConvCpltCallback+0x18>
        convCompleted = 1; // Setze den Flag bei erfolgreicher Konversion
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_ADC_ConvCpltCallback+0x28>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]

    }
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	58026000 	.word	0x58026000
 8000734:	24000b68 	.word	0x24000b68

08000738 <calculate_position>:
//aufschwingen
double aufschwing_geschwindigkeiten[5]= {20.0, 40.0, 60.0, 80.0, 100.0};
uint32_t timer_start=0;


void calculate_position() {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
    double angle = adc_value * degree_per_step;
 800073e:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <calculate_position+0xf0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800074a:	4b38      	ldr	r3, [pc, #224]	@ (800082c <calculate_position+0xf4>)
 800074c:	ed93 7b00 	vldr	d7, [r3]
 8000750:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000754:	ed87 7b02 	vstr	d7, [r7, #8]
    double angle_diff = angle - last_angel;
 8000758:	4b35      	ldr	r3, [pc, #212]	@ (8000830 <calculate_position+0xf8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000764:	ed97 6b02 	vldr	d6, [r7, #8]
 8000768:	ee36 7b47 	vsub.f64	d7, d6, d7
 800076c:	ed87 7b00 	vstr	d7, [r7]

    if (angle_diff > 180) {
 8000770:	ed97 7b00 	vldr	d7, [r7]
 8000774:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000810 <calculate_position+0xd8>
 8000778:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800077c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000780:	dd05      	ble.n	800078e <calculate_position+0x56>
        total_rotations--;
 8000782:	4b2c      	ldr	r3, [pc, #176]	@ (8000834 <calculate_position+0xfc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a2a      	ldr	r2, [pc, #168]	@ (8000834 <calculate_position+0xfc>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e00d      	b.n	80007aa <calculate_position+0x72>
    } else if (angle_diff < -180) {
 800078e:	ed97 7b00 	vldr	d7, [r7]
 8000792:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8000818 <calculate_position+0xe0>
 8000796:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	d504      	bpl.n	80007aa <calculate_position+0x72>
        total_rotations++;
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <calculate_position+0xfc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a23      	ldr	r2, [pc, #140]	@ (8000834 <calculate_position+0xfc>)
 80007a8:	6013      	str	r3, [r2, #0]
    }

    current_position = total_rotations * rotation_per_cycle +(angle / 360.0) * rotation_per_cycle;
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <calculate_position+0xfc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	ee07 3a90 	vmov	s15, r3
 80007b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <calculate_position+0x100>)
 80007b8:	ed93 7b00 	vldr	d7, [r3]
 80007bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80007c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80007c4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8000820 <calculate_position+0xe8>
 80007c8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <calculate_position+0x100>)
 80007ce:	ed93 7b00 	vldr	d7, [r3]
 80007d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <calculate_position+0x104>)
 80007dc:	ed83 7b00 	vstr	d7, [r3]
    printf("Winkel = %.2f \n", angle);
 80007e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007e4:	4816      	ldr	r0, [pc, #88]	@ (8000840 <calculate_position+0x108>)
 80007e6:	f00e fca5 	bl	800f134 <iprintf>
    printf("Position = %.2f cm\n", current_position);
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <calculate_position+0x104>)
 80007ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f0:	4814      	ldr	r0, [pc, #80]	@ (8000844 <calculate_position+0x10c>)
 80007f2:	f00e fc9f 	bl	800f134 <iprintf>


    last_angel= angle;
 80007f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80007fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007fe:	ee17 2a90 	vmov	r2, s15
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <calculate_position+0xf8>)
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	00000000 	.word	0x00000000
 8000814:	40668000 	.word	0x40668000
 8000818:	00000000 	.word	0x00000000
 800081c:	c0668000 	.word	0xc0668000
 8000820:	00000000 	.word	0x00000000
 8000824:	40768000 	.word	0x40768000
 8000828:	24000b7c 	.word	0x24000b7c
 800082c:	24000008 	.word	0x24000008
 8000830:	24000b80 	.word	0x24000b80
 8000834:	24000b78 	.word	0x24000b78
 8000838:	24000000 	.word	0x24000000
 800083c:	24000b88 	.word	0x24000b88
 8000840:	08011020 	.word	0x08011020
 8000844:	08011030 	.word	0x08011030

08000848 <calculate_speed>:
void calculate_speed() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
    unsigned long current_time = HAL_GetTick();  // Erhalte die aktuelle Zeit in Millisekunden
 800084e:	f001 fba7 	bl	8001fa0 <HAL_GetTick>
 8000852:	61f8      	str	r0, [r7, #28]
    double time_diff = (current_time - last_time) / 1000.0;  // Zeitdifferenz in Sekunden
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <calculate_speed+0x90>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	ee07 3a90 	vmov	s15, r3
 8000860:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000864:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80008d0 <calculate_speed+0x88>
 8000868:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800086c:	ed87 7b04 	vstr	d7, [r7, #16]

    if (time_diff > 0) {
 8000870:	ed97 7b04 	vldr	d7, [r7, #16]
 8000874:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087c:	dd20      	ble.n	80008c0 <calculate_speed+0x78>
        double position_diff = current_position - last_position;  // Positionsdifferenz
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <calculate_speed+0x94>)
 8000880:	ed93 6b00 	vldr	d6, [r3]
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <calculate_speed+0x98>)
 8000886:	ed93 7b00 	vldr	d7, [r3]
 800088a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800088e:	ed87 7b02 	vstr	d7, [r7, #8]
        double speed = position_diff / time_diff;  // Geschwindigkeit in cm/s
 8000892:	ed97 5b02 	vldr	d5, [r7, #8]
 8000896:	ed97 6b04 	vldr	d6, [r7, #16]
 800089a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800089e:	ed87 7b00 	vstr	d7, [r7]

        printf("Geschwindigkeit = %.2f cm/s\n", speed);
 80008a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008a6:	480f      	ldr	r0, [pc, #60]	@ (80008e4 <calculate_speed+0x9c>)
 80008a8:	f00e fc44 	bl	800f134 <iprintf>

        // Update letzte Werte
        last_position = current_position;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <calculate_speed+0x94>)
 80008ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b2:	490b      	ldr	r1, [pc, #44]	@ (80008e0 <calculate_speed+0x98>)
 80008b4:	e9c1 2300 	strd	r2, r3, [r1]
        last_time = current_time;
 80008b8:	4a07      	ldr	r2, [pc, #28]	@ (80008d8 <calculate_speed+0x90>)
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	6013      	str	r3, [r2, #0]
    } else {
        printf("Zeitdifferenz zu klein, keine Geschwindigkeit berechnet.\n");
    }
}
 80008be:	e002      	b.n	80008c6 <calculate_speed+0x7e>
        printf("Zeitdifferenz zu klein, keine Geschwindigkeit berechnet.\n");
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <calculate_speed+0xa0>)
 80008c2:	f00e fc9f 	bl	800f204 <puts>
}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	00000000 	.word	0x00000000
 80008d4:	408f4000 	.word	0x408f4000
 80008d8:	24000b90 	.word	0x24000b90
 80008dc:	24000b88 	.word	0x24000b88
 80008e0:	24000b70 	.word	0x24000b70
 80008e4:	08011044 	.word	0x08011044
 80008e8:	08011064 	.word	0x08011064

080008ec <set_motor_speed>:

void set_motor_speed(double desired_speed,int direction) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80008f6:	6078      	str	r0, [r7, #4]
    // Begrenze die Zielgeschwindigkeit auf den erlaubten Bereich
    if (desired_speed <= 0) {
 80008f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80008fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	d811      	bhi.n	800092a <set_motor_speed+0x3e>
        desired_speed = 0;  // Minimale Geschwindigkeit (Stillstand)
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	e9c7 2302 	strd	r2, r3, [r7, #8]
     	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000918:	482e      	ldr	r0, [pc, #184]	@ (80009d4 <set_motor_speed+0xe8>)
 800091a:	f007 f957 	bl	8007bcc <HAL_GPIO_WritePin>
      	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000924:	482b      	ldr	r0, [pc, #172]	@ (80009d4 <set_motor_speed+0xe8>)
 8000926:	f007 f951 	bl	8007bcc <HAL_GPIO_WritePin>
    } else if (desired_speed > max_speed) {
        //desired_speed = max_speed;  // Begrenze auf die maximale Geschwindigkeit
    }

    if (direction == 1) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10c      	bne.n	800094a <set_motor_speed+0x5e>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000936:	4827      	ldr	r0, [pc, #156]	@ (80009d4 <set_motor_speed+0xe8>)
 8000938:	f007 f948 	bl	8007bcc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000942:	4824      	ldr	r0, [pc, #144]	@ (80009d4 <set_motor_speed+0xe8>)
 8000944:	f007 f942 	bl	8007bcc <HAL_GPIO_WritePin>
 8000948:	e016      	b.n	8000978 <set_motor_speed+0x8c>
    } else if (direction == -1) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d10c      	bne.n	800096c <set_motor_speed+0x80>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000958:	481e      	ldr	r0, [pc, #120]	@ (80009d4 <set_motor_speed+0xe8>)
 800095a:	f007 f937 	bl	8007bcc <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000964:	481b      	ldr	r0, [pc, #108]	@ (80009d4 <set_motor_speed+0xe8>)
 8000966:	f007 f931 	bl	8007bcc <HAL_GPIO_WritePin>
 800096a:	e005      	b.n	8000978 <set_motor_speed+0x8c>
    } else {
        // Falls ungültige Richtung übergeben wurde, setze Motor still

        desired_speed = 0;
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }
    // Berechne das Verhältnis der gewünschten Geschwindigkeit zur Maximalgeschwindigkeit
    double speed_ratio = desired_speed / max_speed;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <set_motor_speed+0xec>)
 800097a:	ed93 6b00 	vldr	d6, [r3]
 800097e:	ed97 5b02 	vldr	d5, [r7, #8]
 8000982:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000986:	ed87 7b06 	vstr	d7, [r7, #24]

    // Berechne den PWM-Wert (Duty Cycle) basierend auf dem Geschwindigkeitsverhältnis
    uint32_t pwm_value = (uint32_t)(speed_ratio * max_pwm);
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <set_motor_speed+0xf0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000996:	ed97 7b06 	vldr	d7, [r7, #24]
 800099a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800099e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a2:	ee17 3a90 	vmov	r3, s15
 80009a6:	617b      	str	r3, [r7, #20]

    // Setze den PWM-Wert (Duty Cycle)
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,desired_speed);
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <set_motor_speed+0xf4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80009b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009b4:	ee17 2a90 	vmov	r2, s15
 80009b8:	635a      	str	r2, [r3, #52]	@ 0x34

    printf("Eingestellter PWM-Wert: %d\n", pwm_value);
 80009ba:	6979      	ldr	r1, [r7, #20]
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <set_motor_speed+0xf8>)
 80009be:	f00e fbb9 	bl	800f134 <iprintf>
    printf("Gewünschte Geschwindigkeit: %.2f cm/s\n", desired_speed);
 80009c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009c6:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <set_motor_speed+0xfc>)
 80009c8:	f00e fbb4 	bl	800f134 <iprintf>
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	58020400 	.word	0x58020400
 80009d8:	24000010 	.word	0x24000010
 80009dc:	24000018 	.word	0x24000018
 80009e0:	2400050c 	.word	0x2400050c
 80009e4:	080110a0 	.word	0x080110a0
 80009e8:	080110bc 	.word	0x080110bc
 80009ec:	00000000 	.word	0x00000000

080009f0 <check_limit>:


int wambo=0;
void check_limit(){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
		if (current_position <= LOWER_LIMIT || current_position >= UPPER_LIMIT){
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <check_limit+0x68>)
 80009f6:	ed93 7b00 	vldr	d7, [r3]
 80009fa:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000a48 <check_limit+0x58>
 80009fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a06:	d90a      	bls.n	8000a1e <check_limit+0x2e>
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <check_limit+0x68>)
 8000a0a:	ed93 7b00 	vldr	d7, [r3]
 8000a0e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000a50 <check_limit+0x60>
 8000a12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1a:	da00      	bge.n	8000a1e <check_limit+0x2e>
			  motor_direction=0;
			  wambo=1;
		}


}
 8000a1c:	e00c      	b.n	8000a38 <check_limit+0x48>
			   motor_speed=0;
 8000a1e:	490f      	ldr	r1, [pc, #60]	@ (8000a5c <check_limit+0x6c>)
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	e9c1 2300 	strd	r2, r3, [r1]
			  motor_direction=0;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <check_limit+0x70>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
			  wambo=1;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <check_limit+0x74>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	f3af 8000 	nop.w
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	c04e0000 	.word	0xc04e0000
 8000a50:	00000000 	.word	0x00000000
 8000a54:	404e0000 	.word	0x404e0000
 8000a58:	24000b88 	.word	0x24000b88
 8000a5c:	24000020 	.word	0x24000020
 8000a60:	24000028 	.word	0x24000028
 8000a64:	24000b98 	.word	0x24000b98

08000a68 <aufschwingen>:
int i =0;
void aufschwingen() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
    uint32_t elapsed_time = HAL_GetTick() - timer_start;  // Zeit, die seit dem Start der Bewegung vergangen ist
 8000a6e:	f001 fa97 	bl	8001fa0 <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <aufschwingen+0x6c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]

    // Wenn 6 ms vergangen sind, die Richtung wechseln
    if ((elapsed_time >= 200)&&wambo==0) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a80:	d91a      	bls.n	8000ab8 <aufschwingen+0x50>
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <aufschwingen+0x70>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d116      	bne.n	8000ab8 <aufschwingen+0x50>
    	if(i==0){
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <aufschwingen+0x74>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d106      	bne.n	8000aa0 <aufschwingen+0x38>
    		motor_direction=1;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <aufschwingen+0x78>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
    		i=1;
 8000a98:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <aufschwingen+0x74>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e006      	b.n	8000aae <aufschwingen+0x46>
    	}
    	else{
    		motor_direction=-1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <aufschwingen+0x78>)
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	601a      	str	r2, [r3, #0]
    		i=0;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <aufschwingen+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
    	}
    	//motor_direction *= -1;  // Richtung umkehren
        timer_start = HAL_GetTick();  // Timer zurücksetzen für die nächste Phase
 8000aae:	f001 fa77 	bl	8001fa0 <HAL_GetTick>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <aufschwingen+0x6c>)
 8000ab6:	6013      	str	r3, [r2, #0]
    }

    // Motor fahren, solange keine Grenze erreicht wurde
    set_motor_speed(motor_speed, motor_direction);
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <aufschwingen+0x7c>)
 8000aba:	ed93 7b00 	vldr	d7, [r3]
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <aufschwingen+0x78>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ac8:	f7ff ff10 	bl	80008ec <set_motor_speed>


}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	24000b94 	.word	0x24000b94
 8000ad8:	24000b98 	.word	0x24000b98
 8000adc:	24000b9c 	.word	0x24000b9c
 8000ae0:	24000028 	.word	0x24000028
 8000ae4:	24000020 	.word	0x24000020

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f001 f9d1 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f877 	bl	8000be4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000af6:	f000 f8ef 	bl	8000cd8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 fbd7 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000afe:	f000 fbb5 	bl	800126c <MX_DMA_Init>
  MX_ETH_Init();
 8000b02:	f000 fa0f 	bl	8000f24 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b06:	f000 fb33 	bl	8001170 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b0a:	f000 fb7d 	bl	8001208 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000b0e:	f000 fae3 	bl	80010d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b12:	f000 fa53 	bl	8000fbc <MX_TIM1_Init>
  MX_ADC2_Init();
 8000b16:	f000 f90f 	bl	8000d38 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000b1a:	f000 f983 	bl	8000e24 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  //Aufschwingen
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4829      	ldr	r0, [pc, #164]	@ (8000bc8 <main+0xe0>)
 8000b22:	f00a ff23 	bl	800b96c <HAL_TIM_PWM_Start>
  HAL_StatusTypeDef nutte;
  nutte =HAL_ADCEx_Calibration_Start(&hadc2, 0, ADC_SINGLE_ENDED);
 8000b26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4827      	ldr	r0, [pc, #156]	@ (8000bcc <main+0xe4>)
 8000b2e:	f003 fa87 	bl	8004040 <HAL_ADCEx_Calibration_Start>
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if(nutte != HAL_OK){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <main+0x58>
	  Error_Handler();
 8000b3c:	f000 fc88 	bl	8001450 <Error_Handler>
  }
  HAL_ADC_Start(&hadc2);
 8000b40:	4822      	ldr	r0, [pc, #136]	@ (8000bcc <main+0xe4>)
 8000b42:	f001 fe8d 	bl	8002860 <HAL_ADC_Start>
//Regelung
  HAL_StatusTypeDef nutte2 = HAL_ADCEx_Calibration_Start(&hadc3, 0, ADC_SINGLE_ENDED);
 8000b46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4820      	ldr	r0, [pc, #128]	@ (8000bd0 <main+0xe8>)
 8000b4e:	f003 fa77 	bl	8004040 <HAL_ADCEx_Calibration_Start>
 8000b52:	4603      	mov	r3, r0
 8000b54:	71bb      	strb	r3, [r7, #6]
  if(nutte2 != HAL_OK){
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <main+0x78>
      Error_Handler();
 8000b5c:	f000 fc78 	bl	8001450 <Error_Handler>
  }
  HAL_StatusTypeDef nutte3;
  nutte3 =HAL_ADC_Start_DMA(&hadc3, (uint32_t *) rawValues, 2);
 8000b60:	2202      	movs	r2, #2
 8000b62:	491c      	ldr	r1, [pc, #112]	@ (8000bd4 <main+0xec>)
 8000b64:	481a      	ldr	r0, [pc, #104]	@ (8000bd0 <main+0xe8>)
 8000b66:	f002 f86d 	bl	8002c44 <HAL_ADC_Start_DMA>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	717b      	strb	r3, [r7, #5]
  HAL_ADC_MspInit(&hadc3);
 8000b6e:	4818      	ldr	r0, [pc, #96]	@ (8000bd0 <main+0xe8>)
 8000b70:	f000 fc8e 	bl	8001490 <HAL_ADC_MspInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
if (nutte3!=HAL_OK){
 8000b74:	797b      	ldrb	r3, [r7, #5]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <main+0x98>
	 printf("Bringt nichts");
 8000b7a:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <main+0xf0>)
 8000b7c:	f00e fada 	bl	800f134 <iprintf>

	  HAL_Delay(400);

	  */
	  	  //Aufschwing code
          HAL_ADC_Start(&hadc2);
 8000b80:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <main+0xe4>)
 8000b82:	f001 fe6d 	bl	8002860 <HAL_ADC_Start>
          if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8000b86:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8a:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <main+0xe4>)
 8000b8c:	f001 ff66 	bl	8002a5c <HAL_ADC_PollForConversion>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1ee      	bne.n	8000b74 <main+0x8c>
              adc_value = HAL_ADC_GetValue(&hadc2);
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <main+0xe4>)
 8000b98:	f002 f918 	bl	8002dcc <HAL_ADC_GetValue>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <main+0xf4>)
 8000ba0:	6013      	str	r3, [r2, #0]
              printf("ADCwert= %d \n",adc_value);
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <main+0xf4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <main+0xf8>)
 8000baa:	f00e fac3 	bl	800f134 <iprintf>
              calculate_position();
 8000bae:	f7ff fdc3 	bl	8000738 <calculate_position>
              calculate_speed();
 8000bb2:	f7ff fe49 	bl	8000848 <calculate_speed>
              aufschwingen();
 8000bb6:	f7ff ff57 	bl	8000a68 <aufschwingen>
              check_limit();
 8000bba:	f7ff ff19 	bl	80009f0 <check_limit>
              HAL_ADC_Stop(&hadc2);
 8000bbe:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <main+0xe4>)
 8000bc0:	f001 ff18 	bl	80029f4 <HAL_ADC_Stop>
if (nutte3!=HAL_OK){
 8000bc4:	e7d6      	b.n	8000b74 <main+0x8c>
 8000bc6:	bf00      	nop
 8000bc8:	2400050c 	.word	0x2400050c
 8000bcc:	2400031c 	.word	0x2400031c
 8000bd0:	24000380 	.word	0x24000380
 8000bd4:	24000b64 	.word	0x24000b64
 8000bd8:	080110e4 	.word	0x080110e4
 8000bdc:	24000b7c 	.word	0x24000b7c
 8000be0:	080110f4 	.word	0x080110f4

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09c      	sub	sp, #112	@ 0x70
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bee:	224c      	movs	r2, #76	@ 0x4c
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f00e fbe6 	bl	800f3c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00e fbe0 	bl	800f3c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c04:	2002      	movs	r0, #2
 8000c06:	f007 f92b 	bl	8007e60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <SystemClock_Config+0xec>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd0 <SystemClock_Config+0xec>)
 8000c14:	f023 0301 	bic.w	r3, r3, #1
 8000c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <SystemClock_Config+0xec>)
 8000c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <SystemClock_Config+0xf0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd4 <SystemClock_Config+0xf0>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <SystemClock_Config+0xf0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3c:	bf00      	nop
 8000c3e:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <SystemClock_Config+0xf0>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c4a:	d1f8      	bne.n	8000c3e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000c62:	2313      	movs	r3, #19
 8000c64:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c72:	230c      	movs	r3, #12
 8000c74:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c76:	2302      	movs	r3, #2
 8000c78:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	4618      	mov	r0, r3
 8000c84:	f007 f936 	bl	8007ef4 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c8e:	f000 fbdf 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	233f      	movs	r3, #63	@ 0x3f
 8000c94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fd76 	bl	80087a8 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000cc2:	f000 fbc5 	bl	8001450 <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	@ 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	58000400 	.word	0x58000400
 8000cd4:	58024800 	.word	0x58024800

08000cd8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0b0      	sub	sp, #192	@ 0xc0
 8000cdc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	22c0      	movs	r2, #192	@ 0xc0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00e fb6d 	bl	800f3c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000cfa:	2313      	movs	r3, #19
 8000cfc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d0a:	23c0      	movs	r3, #192	@ 0xc0
 8000d0c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d0e:	2320      	movs	r3, #32
 8000d10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f008 f8ce 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d2a:	f000 fb91 	bl	8001450 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	37c0      	adds	r7, #192	@ 0xc0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d50:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d52:	4a32      	ldr	r2, [pc, #200]	@ (8000e1c <MX_ADC2_Init+0xe4>)
 8000d54:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d5c:	605a      	str	r2, [r3, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d82:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dae:	481a      	ldr	r0, [pc, #104]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000db0:	f001 fbb4 	bl	800251c <HAL_ADC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000dba:	f000 fb49 	bl	8001450 <Error_Handler>
  }
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000dc0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dc4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000dc8:	2208      	movs	r2, #8
 8000dca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dcc:	4812      	ldr	r0, [pc, #72]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000dce:	f001 fba5 	bl	800251c <HAL_ADC_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000dd8:	f000 fb3a 	bl	8001450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_ADC2_Init+0xe8>)
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000de4:	2303      	movs	r3, #3
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dee:	2304      	movs	r3, #4
 8000df0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <MX_ADC2_Init+0xe0>)
 8000e00:	f002 fa4a 	bl	8003298 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000e0a:	f000 fb21 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2400031c 	.word	0x2400031c
 8000e1c:	40022100 	.word	0x40022100
 8000e20:	19200040 	.word	0x19200040

08000e24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e3c:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e3e:	4a36      	ldr	r2, [pc, #216]	@ (8000f18 <MX_ADC3_Init+0xf4>)
 8000e40:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e42:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e48:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e52:	2208      	movs	r2, #8
 8000e54:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e9a:	481e      	ldr	r0, [pc, #120]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000e9c:	f001 fb3e 	bl	800251c <HAL_ADC_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ea6:	f000 fad3 	bl	8001450 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eb0:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000eb2:	f001 fb33 	bl	800251c <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8000ebc:	f000 fac8 	bl	8001450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_ADC3_Init+0xf8>)
 8000ec2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec4:	2306      	movs	r3, #6
 8000ec6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ecc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ed0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000ee0:	f002 f9da 	bl	8003298 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 8000eea:	f000 fab1 	bl	8001450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_ADC3_Init+0xfc>)
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_ADC3_Init+0xf0>)
 8000efc:	f002 f9cc 	bl	8003298 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 8000f06:	f000 faa3 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000380 	.word	0x24000380
 8000f18:	58026000 	.word	0x58026000
 8000f1c:	04300002 	.word	0x04300002
 8000f20:	0c900008 	.word	0x0c900008

08000f24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <MX_ETH_Init+0x84>)
 8000f2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f36:	2280      	movs	r2, #128	@ 0x80
 8000f38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f3c:	22e1      	movs	r2, #225	@ 0xe1
 8000f3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f54:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <MX_ETH_Init+0x88>)
 8000f56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f60:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <MX_ETH_Init+0x8c>)
 8000f62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f66:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <MX_ETH_Init+0x90>)
 8000f68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f6c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_ETH_Init+0x80>)
 8000f74:	f006 f846 	bl	8007004 <HAL_ETH_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f7e:	f000 fa67 	bl	8001450 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f82:	2238      	movs	r2, #56	@ 0x38
 8000f84:	2100      	movs	r1, #0
 8000f86:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <MX_ETH_Init+0x94>)
 8000f88:	f00e fa1c 	bl	800f3c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <MX_ETH_Init+0x94>)
 8000f8e:	2221      	movs	r2, #33	@ 0x21
 8000f90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_ETH_Init+0x94>)
 8000f94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <MX_ETH_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400045c 	.word	0x2400045c
 8000fa8:	40028000 	.word	0x40028000
 8000fac:	24000ba0 	.word	0x24000ba0
 8000fb0:	24000264 	.word	0x24000264
 8000fb4:	24000204 	.word	0x24000204
 8000fb8:	240002e4 	.word	0x240002e4

08000fbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b096      	sub	sp, #88	@ 0x58
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	222c      	movs	r2, #44	@ 0x2c
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00e f9eb 	bl	800f3c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8000ff0:	4a38      	ldr	r2, [pc, #224]	@ (80010d4 <MX_TIM1_Init+0x118>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff4:	4b36      	ldr	r3, [pc, #216]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b35      	ldr	r3, [pc, #212]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001000:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8001002:	22ff      	movs	r2, #255	@ 0xff
 8001004:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b32      	ldr	r3, [pc, #200]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800100c:	4b30      	ldr	r3, [pc, #192]	@ (80010d0 <MX_TIM1_Init+0x114>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001018:	482d      	ldr	r0, [pc, #180]	@ (80010d0 <MX_TIM1_Init+0x114>)
 800101a:	f00a fc4f 	bl	800b8bc <HAL_TIM_PWM_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001024:	f000 fa14 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001034:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001038:	4619      	mov	r1, r3
 800103a:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <MX_TIM1_Init+0x114>)
 800103c:	f00b fa5a 	bl	800c4f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001046:	f000 fa03 	bl	8001450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104a:	2360      	movs	r3, #96	@ 0x60
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001066:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <MX_TIM1_Init+0x114>)
 8001070:	f00a fd8a 	bl	800bb88 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800107a:	f000 f9e9 	bl	8001450 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001096:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <MX_TIM1_Init+0x114>)
 80010b4:	f00b faac 	bl	800c610 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80010be:	f000 f9c7 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <MX_TIM1_Init+0x114>)
 80010c4:	f000 fb9e 	bl	8001804 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3758      	adds	r7, #88	@ 0x58
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400050c 	.word	0x2400050c
 80010d4:	40010000 	.word	0x40010000

080010d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	@ (800116c <MX_USART2_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001122:	f00b faf3 	bl	800c70c <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 f990 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001134:	f00c ff34 	bl	800dfa0 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 f987 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001146:	f00c ff69 	bl	800e01c <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 f97e 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_USART2_UART_Init+0x90>)
 8001156:	f00c feea 	bl	800df2e <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 f976 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000558 	.word	0x24000558
 800116c:	40004400 	.word	0x40004400

08001170 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 8001176:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <MX_USART3_UART_Init+0x94>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b8:	4811      	ldr	r0, [pc, #68]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011ba:	f00b faa7 	bl	800c70c <HAL_UART_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011c4:	f000 f944 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011cc:	f00c fee8 	bl	800dfa0 <HAL_UARTEx_SetTxFifoThreshold>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011d6:	f000 f93b 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4808      	ldr	r0, [pc, #32]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011de:	f00c ff1d 	bl	800e01c <HAL_UARTEx_SetRxFifoThreshold>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 f932 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_USART3_UART_Init+0x90>)
 80011ee:	f00c fe9e 	bl	800df2e <HAL_UARTEx_DisableFifoMode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011f8:	f000 f92a 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	240005ec 	.word	0x240005ec
 8001204:	40004800 	.word	0x40004800

08001208 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120e:	4a16      	ldr	r2, [pc, #88]	@ (8001268 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001210:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001214:	2209      	movs	r2, #9
 8001216:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121a:	2202      	movs	r2, #2
 800121c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001220:	2200      	movs	r2, #0
 8001222:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001226:	2202      	movs	r2, #2
 8001228:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122c:	2201      	movs	r2, #1
 800122e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001232:	2200      	movs	r2, #0
 8001234:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001238:	2200      	movs	r2, #0
 800123a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123e:	2201      	movs	r2, #1
 8001240:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001244:	2201      	movs	r2, #1
 8001246:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	2200      	movs	r2, #0
 800124c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001250:	f006 fcd5 	bl	8007bfe <HAL_PCD_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800125a:	f000 f8f9 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24000680 	.word	0x24000680
 8001268:	40080000 	.word	0x40080000

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <MX_DMA_Init+0x3c>)
 8001274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <MX_DMA_Init+0x3c>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_DMA_Init+0x3c>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	200b      	movs	r0, #11
 8001296:	f003 f844 	bl	8004322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800129a:	200b      	movs	r0, #11
 800129c:	f003 f85b 	bl	8004356 <HAL_NVIC_EnableIRQ>

}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024400 	.word	0x58024400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001440 <MX_GPIO_Init+0x194>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001440 <MX_GPIO_Init+0x194>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <MX_GPIO_Init+0x194>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e0:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <MX_GPIO_Init+0x194>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e6:	4a56      	ldr	r2, [pc, #344]	@ (8001440 <MX_GPIO_Init+0x194>)
 80012e8:	f043 0320 	orr.w	r3, r3, #32
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <MX_GPIO_Init+0x194>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	4b50      	ldr	r3, [pc, #320]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001304:	4a4e      	ldr	r2, [pc, #312]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130e:	4b4c      	ldr	r3, [pc, #304]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b48      	ldr	r3, [pc, #288]	@ (8001440 <MX_GPIO_Init+0x194>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	4a47      	ldr	r2, [pc, #284]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132c:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <MX_GPIO_Init+0x194>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <MX_GPIO_Init+0x194>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001340:	4a3f      	ldr	r2, [pc, #252]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <MX_GPIO_Init+0x194>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <MX_GPIO_Init+0x194>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	4a38      	ldr	r2, [pc, #224]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001368:	4b35      	ldr	r3, [pc, #212]	@ (8001440 <MX_GPIO_Init+0x194>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	4a30      	ldr	r2, [pc, #192]	@ (8001440 <MX_GPIO_Init+0x194>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <MX_GPIO_Init+0x194>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <MX_GPIO_Init+0x194>)
 800139c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <MX_GPIO_Init+0x194>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4199 	mov.w	r1, #19584	@ 0x4c80
 80013b8:	4822      	ldr	r0, [pc, #136]	@ (8001444 <MX_GPIO_Init+0x198>)
 80013ba:	f006 fc07 	bl	8007bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2140      	movs	r1, #64	@ 0x40
 80013c2:	4821      	ldr	r0, [pc, #132]	@ (8001448 <MX_GPIO_Init+0x19c>)
 80013c4:	f006 fc02 	bl	8007bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	481b      	ldr	r0, [pc, #108]	@ (800144c <MX_GPIO_Init+0x1a0>)
 80013e0:	f006 fa44 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 80013e4:	f44f 4399 	mov.w	r3, #19584	@ 0x4c80
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <MX_GPIO_Init+0x198>)
 80013fe:	f006 fa35 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001402:	2340      	movs	r3, #64	@ 0x40
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	@ (8001448 <MX_GPIO_Init+0x19c>)
 800141a:	f006 fa27 	bl	800786c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_GPIO_Init+0x19c>)
 8001432:	f006 fa1b 	bl	800786c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001436:	bf00      	nop
 8001438:	3738      	adds	r7, #56	@ 0x38
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	58024400 	.word	0x58024400
 8001444:	58020400 	.word	0x58020400
 8001448:	58021800 	.word	0x58021800
 800144c:	58020800 	.word	0x58020800

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_MspInit+0x30>)
 8001464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001468:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x30>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x30>)
 8001474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	58024400 	.word	0x58024400

08001490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a57      	ldr	r2, [pc, #348]	@ (800160c <HAL_ADC_MspInit+0x17c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014b2:	4b57      	ldr	r3, [pc, #348]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 80014b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b8:	4a55      	ldr	r2, [pc, #340]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014c2:	4b53      	ldr	r3, [pc, #332]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 80014c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	4a4e      	ldr	r2, [pc, #312]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4844      	ldr	r0, [pc, #272]	@ (8001614 <HAL_ADC_MspInit+0x184>)
 8001504:	f006 f9b2 	bl	800786c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001508:	e07b      	b.n	8001602 <HAL_ADC_MspInit+0x172>
  else if(hadc->Instance==ADC3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a42      	ldr	r2, [pc, #264]	@ (8001618 <HAL_ADC_MspInit+0x188>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d176      	bne.n	8001602 <HAL_ADC_MspInit+0x172>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001514:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	4a3d      	ldr	r2, [pc, #244]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 800151c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001532:	4b37      	ldr	r3, [pc, #220]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001538:	4a35      	ldr	r2, [pc, #212]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001542:	4b33      	ldr	r3, [pc, #204]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001550:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	4a2e      	ldr	r2, [pc, #184]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001560:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <HAL_ADC_MspInit+0x180>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4824      	ldr	r0, [pc, #144]	@ (8001614 <HAL_ADC_MspInit+0x184>)
 8001582:	f006 f973 	bl	800786c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001586:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800158a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800158e:	f000 fd57 	bl	8002040 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream0;
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 8001594:	4a22      	ldr	r2, [pc, #136]	@ (8001620 <HAL_ADC_MspInit+0x190>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 800159a:	2273      	movs	r2, #115	@ 0x73
 800159c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015d6:	4811      	ldr	r0, [pc, #68]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015d8:	f002 fed8 	bl	800438c <HAL_DMA_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_ADC_MspInit+0x156>
      Error_Handler();
 80015e2:	f7ff ff35 	bl	8001450 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <HAL_ADC_MspInit+0x18c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	207f      	movs	r0, #127	@ 0x7f
 80015f8:	f002 fe93 	bl	8004322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80015fc:	207f      	movs	r0, #127	@ 0x7f
 80015fe:	f002 feaa 	bl	8004356 <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	@ 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022100 	.word	0x40022100
 8001610:	58024400 	.word	0x58024400
 8001614:	58021400 	.word	0x58021400
 8001618:	58026000 	.word	0x58026000
 800161c:	240003e4 	.word	0x240003e4
 8001620:	40020010 	.word	0x40020010

08001624 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a59      	ldr	r2, [pc, #356]	@ (80017a8 <HAL_ETH_MspInit+0x184>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f040 80ab 	bne.w	800179e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001648:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 800164a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800164e:	4a57      	ldr	r2, [pc, #348]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 8001650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001654:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001658:	4b54      	ldr	r3, [pc, #336]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 800165a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800165e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 8001668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800166c:	4a4f      	ldr	r2, [pc, #316]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 800166e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001676:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 8001678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800167c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001684:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 8001686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800168a:	4a48      	ldr	r2, [pc, #288]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001690:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 8001696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a8:	4a40      	ldr	r2, [pc, #256]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b3a      	ldr	r3, [pc, #232]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	4a39      	ldr	r2, [pc, #228]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d0:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b33      	ldr	r3, [pc, #204]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ee:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 8001704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800170c:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <HAL_ETH_MspInit+0x188>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800171a:	2332      	movs	r3, #50	@ 0x32
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172a:	230b      	movs	r3, #11
 800172c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <HAL_ETH_MspInit+0x18c>)
 8001736:	f006 f899 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800173a:	2386      	movs	r3, #134	@ 0x86
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174a:	230b      	movs	r3, #11
 800174c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4817      	ldr	r0, [pc, #92]	@ (80017b4 <HAL_ETH_MspInit+0x190>)
 8001756:	f006 f889 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800175a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800176c:	230b      	movs	r3, #11
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4810      	ldr	r0, [pc, #64]	@ (80017b8 <HAL_ETH_MspInit+0x194>)
 8001778:	f006 f878 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800177c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178e:	230b      	movs	r3, #11
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4808      	ldr	r0, [pc, #32]	@ (80017bc <HAL_ETH_MspInit+0x198>)
 800179a:	f006 f867 	bl	800786c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800179e:	bf00      	nop
 80017a0:	3738      	adds	r7, #56	@ 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40028000 	.word	0x40028000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	58020800 	.word	0x58020800
 80017b4:	58020000 	.word	0x58020000
 80017b8:	58020400 	.word	0x58020400
 80017bc:	58021800 	.word	0x58021800

080017c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_TIM_PWM_MspInit+0x3c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_TIM_PWM_MspInit+0x40>)
 80017d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d8:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <HAL_TIM_PWM_MspInit+0x40>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <HAL_TIM_PWM_MspInit+0x40>)
 80017e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40010000 	.word	0x40010000
 8001800:	58024400 	.word	0x58024400

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11f      	bne.n	8001866 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <HAL_TIM_MspPostInit+0x70>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182c:	4a11      	ldr	r2, [pc, #68]	@ (8001874 <HAL_TIM_MspPostInit+0x70>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_TIM_MspPostInit+0x70>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001856:	2301      	movs	r3, #1
 8001858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <HAL_TIM_MspPostInit+0x74>)
 8001862:	f006 f803 	bl	800786c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40010000 	.word	0x40010000
 8001874:	58024400 	.word	0x58024400
 8001878:	58021000 	.word	0x58021000

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0be      	sub	sp, #248	@ 0xf8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	22c0      	movs	r2, #192	@ 0xc0
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f00d fd91 	bl	800f3c4 <memset>
  if(huart->Instance==USART2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a63      	ldr	r2, [pc, #396]	@ (8001a34 <HAL_UART_MspInit+0x1b8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d172      	bne.n	8001992 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ac:	f04f 0202 	mov.w	r2, #2
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	4618      	mov	r0, r3
 80018c4:	f007 fafc 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018ce:	f7ff fdbf 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d2:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80018d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d8:	4a57      	ldr	r2, [pc, #348]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80018da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018e2:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80018e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b51      	ldr	r3, [pc, #324]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f6:	4a50      	ldr	r2, [pc, #320]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001900:	4b4d      	ldr	r3, [pc, #308]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001914:	4a48      	ldr	r2, [pc, #288]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191e:	4b46      	ldr	r3, [pc, #280]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800192c:	2308      	movs	r3, #8
 800192e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001944:	2307      	movs	r3, #7
 8001946:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800194e:	4619      	mov	r1, r3
 8001950:	483a      	ldr	r0, [pc, #232]	@ (8001a3c <HAL_UART_MspInit+0x1c0>)
 8001952:	f005 ff8b 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001956:	2320      	movs	r3, #32
 8001958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196e:	2307      	movs	r3, #7
 8001970:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001974:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001978:	4619      	mov	r1, r3
 800197a:	4831      	ldr	r0, [pc, #196]	@ (8001a40 <HAL_UART_MspInit+0x1c4>)
 800197c:	f005 ff76 	bl	800786c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2026      	movs	r0, #38	@ 0x26
 8001986:	f002 fccc 	bl	8004322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800198a:	2026      	movs	r0, #38	@ 0x26
 800198c:	f002 fce3 	bl	8004356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001990:	e04b      	b.n	8001a2a <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2b      	ldr	r2, [pc, #172]	@ (8001a44 <HAL_UART_MspInit+0x1c8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d146      	bne.n	8001a2a <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800199c:	f04f 0202 	mov.w	r2, #2
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	f107 0320 	add.w	r3, r7, #32
 80019b2:	4618      	mov	r0, r3
 80019b4:	f007 fa84 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 80019be:	f7ff fd47 	bl	8001450 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80019c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80019ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80019d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e6:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_UART_MspInit+0x1bc>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <HAL_UART_MspInit+0x1c4>)
 8001a26:	f005 ff21 	bl	800786c <HAL_GPIO_Init>
}
 8001a2a:	bf00      	nop
 8001a2c:	37f8      	adds	r7, #248	@ 0xf8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004400 	.word	0x40004400
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	58020000 	.word	0x58020000
 8001a40:	58020c00 	.word	0x58020c00
 8001a44:	40004800 	.word	0x40004800

08001a48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	22c0      	movs	r2, #192	@ 0xc0
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00d fcab 	bl	800f3c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a30      	ldr	r2, [pc, #192]	@ (8001b34 <HAL_PCD_MspInit+0xec>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d159      	bne.n	8001b2c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001a84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fa15 	bl	8008ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001a9c:	f7ff fcd8 	bl	8001450 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001aa0:	f006 fa18 	bl	8007ed4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b24      	ldr	r3, [pc, #144]	@ (8001b38 <HAL_PCD_MspInit+0xf0>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	4a23      	ldr	r2, [pc, #140]	@ (8001b38 <HAL_PCD_MspInit+0xf0>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab4:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_PCD_MspInit+0xf0>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ac2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001adc:	230a      	movs	r3, #10
 8001ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4814      	ldr	r0, [pc, #80]	@ (8001b3c <HAL_PCD_MspInit+0xf4>)
 8001aea:	f005 febf 	bl	800786c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <HAL_PCD_MspInit+0xf4>)
 8001b0a:	f005 feaf 	bl	800786c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_PCD_MspInit+0xf0>)
 8001b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b14:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_PCD_MspInit+0xf0>)
 8001b16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_PCD_MspInit+0xf0>)
 8001b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001b2c:	bf00      	nop
 8001b2e:	37e8      	adds	r7, #232	@ 0xe8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40080000 	.word	0x40080000
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58020000 	.word	0x58020000

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <NMI_Handler+0x4>

08001b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <MemManage_Handler+0x4>

08001b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b96:	f000 f9ef 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ba6:	f003 ff1b 	bl	80059e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	240003e4 	.word	0x240003e4

08001bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <USART2_IRQHandler+0x10>)
 8001bba:	f00a fdf7 	bl	800c7ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24000558 	.word	0x24000558

08001bc8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <ADC3_IRQHandler+0x10>)
 8001bce:	f001 f90b 	bl	8002de8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24000380 	.word	0x24000380

08001bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_kill>:

int _kill(int pid, int sig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf6:	f00d fc37 	bl	800f468 <__errno>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2216      	movs	r2, #22
 8001bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_exit>:

void _exit (int status)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ffe7 	bl	8001bec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1e:	bf00      	nop
 8001c20:	e7fd      	b.n	8001c1e <_exit+0x12>

08001c22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e00a      	b.n	8001c4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c34:	f3af 8000 	nop.w
 8001c38:	4601      	mov	r1, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	60ba      	str	r2, [r7, #8]
 8001c40:	b2ca      	uxtb	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dbf0      	blt.n	8001c34 <_read+0x12>
  }

  return len;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c84:	605a      	str	r2, [r3, #4]
  return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_isatty>:

int _isatty(int file)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f00d fbb8 	bl	800f468 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	24080000 	.word	0x24080000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	24000ba8 	.word	0x24000ba8
 8001d2c:	24000d00 	.word	0x24000d00

08001d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d34:	4b37      	ldr	r3, [pc, #220]	@ (8001e14 <SystemInit+0xe4>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3a:	4a36      	ldr	r2, [pc, #216]	@ (8001e14 <SystemInit+0xe4>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d44:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <SystemInit+0xe8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d807      	bhi.n	8001d60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d50:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <SystemInit+0xe8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <SystemInit+0xe8>)
 8001d5a:	f043 0307 	orr.w	r3, r3, #7
 8001d5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d60:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <SystemInit+0xec>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <SystemInit+0xec>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <SystemInit+0xec>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d72:	4b2a      	ldr	r3, [pc, #168]	@ (8001e1c <SystemInit+0xec>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4929      	ldr	r1, [pc, #164]	@ (8001e1c <SystemInit+0xec>)
 8001d78:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <SystemInit+0xf0>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <SystemInit+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <SystemInit+0xe8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 030f 	bic.w	r3, r3, #15
 8001d92:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <SystemInit+0xe8>)
 8001d94:	f043 0307 	orr.w	r3, r3, #7
 8001d98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <SystemInit+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <SystemInit+0xec>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <SystemInit+0xec>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <SystemInit+0xec>)
 8001dae:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <SystemInit+0xf4>)
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <SystemInit+0xec>)
 8001db4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <SystemInit+0xf8>)
 8001db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001db8:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <SystemInit+0xec>)
 8001dba:	4a1c      	ldr	r2, [pc, #112]	@ (8001e2c <SystemInit+0xfc>)
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <SystemInit+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <SystemInit+0xec>)
 8001dc6:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <SystemInit+0xfc>)
 8001dc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dca:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <SystemInit+0xec>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <SystemInit+0xec>)
 8001dd2:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <SystemInit+0xfc>)
 8001dd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <SystemInit+0xec>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <SystemInit+0xec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <SystemInit+0xec>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <SystemInit+0xec>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <SystemInit+0x100>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <SystemInit+0x104>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dfa:	d202      	bcs.n	8001e02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <SystemInit+0x108>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <SystemInit+0x10c>)
 8001e04:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00
 8001e18:	52002000 	.word	0x52002000
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e24:	02020200 	.word	0x02020200
 8001e28:	01ff0000 	.word	0x01ff0000
 8001e2c:	01010280 	.word	0x01010280
 8001e30:	5c001000 	.word	0x5c001000
 8001e34:	ffff0000 	.word	0xffff0000
 8001e38:	51008108 	.word	0x51008108
 8001e3c:	52004000 	.word	0x52004000

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e44:	f7ff ff74 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e4a:	490d      	ldr	r1, [pc, #52]	@ (8001e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e60:	4c0a      	ldr	r4, [pc, #40]	@ (8001e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f00d fb01 	bl	800f474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7fe fe39 	bl	8000ae8 <main>
  bx  lr
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e80:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 8001e84:	080114c8 	.word	0x080114c8
  ldr r2, =_sbss
 8001e88:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8001e8c:	24000cfc 	.word	0x24000cfc

08001e90 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	f002 fa36 	bl	800430c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ea0:	f006 fe38 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_Init+0x68>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	4913      	ldr	r1, [pc, #76]	@ (8001f00 <HAL_Init+0x6c>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_Init+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f00 <HAL_Init+0x6c>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f04 <HAL_Init+0x70>)
 8001ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f08 <HAL_Init+0x74>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 f814 	bl	8001f0c <HAL_InitTick>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e002      	b.n	8001ef4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001eee:	f7ff fab5 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	58024400 	.word	0x58024400
 8001f00:	08011104 	.word	0x08011104
 8001f04:	24000030 	.word	0x24000030
 8001f08:	2400002c 	.word	0x2400002c

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_InitTick+0x60>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e021      	b.n	8001f64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <HAL_InitTick+0x64>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_InitTick+0x60>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fa1b 	bl	8004372 <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00e      	b.n	8001f64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b0f      	cmp	r3, #15
 8001f4a:	d80a      	bhi.n	8001f62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f002 f9e5 	bl	8004322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f58:	4a06      	ldr	r2, [pc, #24]	@ (8001f74 <HAL_InitTick+0x68>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	24000038 	.word	0x24000038
 8001f70:	2400002c 	.word	0x2400002c
 8001f74:	24000034 	.word	0x24000034

08001f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_IncTick+0x20>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_IncTick+0x24>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <HAL_IncTick+0x24>)
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	24000038 	.word	0x24000038
 8001f9c:	24000bac 	.word	0x24000bac

08001fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_GetTick+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	24000bac 	.word	0x24000bac

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff ffee 	bl	8001fa0 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d005      	beq.n	8001fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_Delay+0x44>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fde:	bf00      	nop
 8001fe0:	f7ff ffde 	bl	8001fa0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d8f7      	bhi.n	8001fe0 <HAL_Delay+0x28>
  {
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24000038 	.word	0x24000038

08002000 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetREVID+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0c1b      	lsrs	r3, r3, #16
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	5c001000 	.word	0x5c001000

08002018 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002028:	4904      	ldr	r1, [pc, #16]	@ (800203c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	58000400 	.word	0x58000400

08002040 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	43db      	mvns	r3, r3
 8002052:	401a      	ands	r2, r3
 8002054:	4904      	ldr	r1, [pc, #16]	@ (8002068 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	58000400 	.word	0x58000400

0800206c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3360      	adds	r3, #96	@ 0x60
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	611a      	str	r2, [r3, #16]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002146:	b480      	push	{r7}
 8002148:	b087      	sub	sp, #28
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	@ 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	431a      	orrs	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]
  }
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3330      	adds	r3, #48	@ 0x30
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	211f      	movs	r1, #31
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 011f 	and.w	r1, r3, #31
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	431a      	orrs	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f023 0203 	bic.w	r2, r3, #3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3314      	adds	r3, #20
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	0e5b      	lsrs	r3, r3, #25
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0d1b      	lsrs	r3, r3, #20
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2107      	movs	r1, #7
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	0d1b      	lsrs	r3, r3, #20
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	431a      	orrs	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0318 	and.w	r3, r3, #24
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c0:	40d9      	lsrs	r1, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	400b      	ands	r3, r1
 80022c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	000fffff 	.word	0x000fffff

080022e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 031f 	and.w	r3, r3, #31
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <LL_ADC_DisableDeepPowerDown+0x20>)
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6093      	str	r3, [r2, #8]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	5fffffc0 	.word	0x5fffffc0

08002340 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002354:	d101      	bne.n	800235a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <LL_ADC_EnableInternalRegulator+0x24>)
 8002376:	4013      	ands	r3, r2
 8002378:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	6fffffc0 	.word	0x6fffffc0

08002390 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023a4:	d101      	bne.n	80023aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <LL_ADC_Enable+0x24>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	7fffffc0 	.word	0x7fffffc0

080023e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <LL_ADC_Disable+0x24>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	f043 0202 	orr.w	r2, r3, #2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	7fffffc0 	.word	0x7fffffc0

08002408 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <LL_ADC_IsEnabled+0x18>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <LL_ADC_IsEnabled+0x1a>
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d101      	bne.n	8002446 <LL_ADC_IsDisableOngoing+0x18>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_ADC_IsDisableOngoing+0x1a>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <LL_ADC_REG_StartConversion+0x24>)
 8002462:	4013      	ands	r3, r2
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	7fffffc0 	.word	0x7fffffc0

0800247c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <LL_ADC_REG_StopConversion+0x24>)
 800248a:	4013      	ands	r3, r2
 800248c:	f043 0210 	orr.w	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	7fffffc0 	.word	0x7fffffc0

080024a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d101      	bne.n	80024bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <LL_ADC_INJ_StopConversion+0x24>)
 80024da:	4013      	ands	r3, r2
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	7fffffc0 	.word	0x7fffffc0

080024f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b08      	cmp	r3, #8
 8002506:	d101      	bne.n	800250c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e18f      	b.n	8002856 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fe ffa3 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff feef 	bl	8002340 <LL_ADC_IsDeepPowerDownEnabled>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fed5 	bl	800231c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff0a 	bl	8002390 <LL_ADC_IsInternalRegulatorEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d114      	bne.n	80025ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff feee 	bl	8002368 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800258c:	4b87      	ldr	r3, [pc, #540]	@ (80027ac <HAL_ADC_Init+0x290>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	4a87      	ldr	r2, [pc, #540]	@ (80027b0 <HAL_ADC_Init+0x294>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	3301      	adds	r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800259e:	e002      	b.n	80025a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f9      	bne.n	80025a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff feed 	bl	8002390 <LL_ADC_IsInternalRegulatorEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff61 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 80025e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f040 8129 	bne.w	8002844 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 8125 	bne.w	8002844 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002602:	f043 0202 	orr.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fefa 	bl	8002408 <LL_ADC_IsEnabled>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d136      	bne.n	8002688 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a65      	ldr	r2, [pc, #404]	@ (80027b4 <HAL_ADC_Init+0x298>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_ADC_Init+0x112>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a63      	ldr	r2, [pc, #396]	@ (80027b8 <HAL_ADC_Init+0x29c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10e      	bne.n	800264c <HAL_ADC_Init+0x130>
 800262e:	4861      	ldr	r0, [pc, #388]	@ (80027b4 <HAL_ADC_Init+0x298>)
 8002630:	f7ff feea 	bl	8002408 <LL_ADC_IsEnabled>
 8002634:	4604      	mov	r4, r0
 8002636:	4860      	ldr	r0, [pc, #384]	@ (80027b8 <HAL_ADC_Init+0x29c>)
 8002638:	f7ff fee6 	bl	8002408 <LL_ADC_IsEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	4323      	orrs	r3, r4
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e008      	b.n	800265e <HAL_ADC_Init+0x142>
 800264c:	485b      	ldr	r0, [pc, #364]	@ (80027bc <HAL_ADC_Init+0x2a0>)
 800264e:	f7ff fedb 	bl	8002408 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a53      	ldr	r2, [pc, #332]	@ (80027b4 <HAL_ADC_Init+0x298>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d004      	beq.n	8002676 <HAL_ADC_Init+0x15a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a51      	ldr	r2, [pc, #324]	@ (80027b8 <HAL_ADC_Init+0x29c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x15e>
 8002676:	4a52      	ldr	r2, [pc, #328]	@ (80027c0 <HAL_ADC_Init+0x2a4>)
 8002678:	e000      	b.n	800267c <HAL_ADC_Init+0x160>
 800267a:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <HAL_ADC_Init+0x2a8>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7ff fcf2 	bl	800206c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002688:	f7ff fcba 	bl	8002000 <HAL_GetREVID>
 800268c:	4603      	mov	r3, r0
 800268e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002692:	4293      	cmp	r3, r2
 8002694:	d914      	bls.n	80026c0 <HAL_ADC_Init+0x1a4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b10      	cmp	r3, #16
 800269c:	d110      	bne.n	80026c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7d5b      	ldrb	r3, [r3, #21]
 80026a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7f1b      	ldrb	r3, [r3, #28]
 80026b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80026b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026b8:	f043 030c 	orr.w	r3, r3, #12
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e00d      	b.n	80026dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7d5b      	ldrb	r3, [r3, #21]
 80026c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80026d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7f1b      	ldrb	r3, [r3, #28]
 80026d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7f1b      	ldrb	r3, [r3, #28]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d106      	bne.n	80026f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	045b      	lsls	r3, r3, #17
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <HAL_ADC_Init+0x2ac>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff febc 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 800272c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fede 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8002738:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d15f      	bne.n	8002800 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d15c      	bne.n	8002800 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7d1b      	ldrb	r3, [r3, #20]
 800274a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <HAL_ADC_Init+0x2b0>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	430b      	orrs	r3, r1
 8002766:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800276e:	2b01      	cmp	r3, #1
 8002770:	d130      	bne.n	80027d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <HAL_ADC_Init+0x2b4>)
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002786:	3a01      	subs	r2, #1
 8002788:	0411      	lsls	r1, r2, #16
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002794:	4311      	orrs	r1, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800279a:	430a      	orrs	r2, r1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	611a      	str	r2, [r3, #16]
 80027a8:	e01c      	b.n	80027e4 <HAL_ADC_Init+0x2c8>
 80027aa:	bf00      	nop
 80027ac:	2400002c 	.word	0x2400002c
 80027b0:	053e2d63 	.word	0x053e2d63
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022100 	.word	0x40022100
 80027bc:	58026000 	.word	0x58026000
 80027c0:	40022300 	.word	0x40022300
 80027c4:	58026300 	.word	0x58026300
 80027c8:	fff0c003 	.word	0xfff0c003
 80027cc:	ffffbffc 	.word	0xffffbffc
 80027d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 fae2 	bl	8003dc4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10c      	bne.n	8002822 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f023 010f 	bic.w	r1, r3, #15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	1e5a      	subs	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002820:	e007      	b.n	8002832 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 020f 	bic.w	r2, r2, #15
 8002830:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	@ 0x54
 8002842:	e007      	b.n	8002854 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	f043 0210 	orr.w	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002854:	7ffb      	ldrb	r3, [r7, #31]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd90      	pop	{r4, r7, pc}
 800285e:	bf00      	nop

08002860 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5c      	ldr	r2, [pc, #368]	@ (80029e0 <HAL_ADC_Start+0x180>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_ADC_Start+0x1c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5b      	ldr	r2, [pc, #364]	@ (80029e4 <HAL_ADC_Start+0x184>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_ADC_Start+0x20>
 800287c:	4b5a      	ldr	r3, [pc, #360]	@ (80029e8 <HAL_ADC_Start+0x188>)
 800287e:	e000      	b.n	8002882 <HAL_ADC_Start+0x22>
 8002880:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <HAL_ADC_Start+0x18c>)
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fd2e 	bl	80022e4 <LL_ADC_GetMultimode>
 8002888:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe08 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 809a 	bne.w	80029d0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Start+0x4a>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e095      	b.n	80029d6 <HAL_ADC_Start+0x176>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 f908 	bl	8003ac8 <ADC_Enable>
 80028b8:	4603      	mov	r3, r0
 80028ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 8081 	bne.w	80029c6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028c8:	4b49      	ldr	r3, [pc, #292]	@ (80029f0 <HAL_ADC_Start+0x190>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	@ (80029e4 <HAL_ADC_Start+0x184>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d002      	beq.n	80028e4 <HAL_ADC_Start+0x84>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e000      	b.n	80028e6 <HAL_ADC_Start+0x86>
 80028e4:	4b3e      	ldr	r3, [pc, #248]	@ (80029e0 <HAL_ADC_Start+0x180>)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d002      	beq.n	80028f4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800290c:	d106      	bne.n	800291c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	f023 0206 	bic.w	r2, r3, #6
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	659a      	str	r2, [r3, #88]	@ 0x58
 800291a:	e002      	b.n	8002922 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	221c      	movs	r2, #28
 8002928:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2b      	ldr	r2, [pc, #172]	@ (80029e4 <HAL_ADC_Start+0x184>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d002      	beq.n	8002942 <HAL_ADC_Start+0xe2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	e000      	b.n	8002944 <HAL_ADC_Start+0xe4>
 8002942:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_ADC_Start+0x180>)
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	4293      	cmp	r3, r2
 800294a:	d008      	beq.n	800295e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d002      	beq.n	800295e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b09      	cmp	r3, #9
 800295c:	d114      	bne.n	8002988 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002974:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fd67 	bl	8002454 <LL_ADC_REG_StartConversion>
 8002986:	e025      	b.n	80029d4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <HAL_ADC_Start+0x184>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d002      	beq.n	80029a4 <HAL_ADC_Start+0x144>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_Start+0x146>
 80029a4:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <HAL_ADC_Start+0x180>)
 80029a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00f      	beq.n	80029d4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80029c4:	e006      	b.n	80029d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80029ce:	e001      	b.n	80029d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40022100 	.word	0x40022100
 80029e8:	40022300 	.word	0x40022300
 80029ec:	58026300 	.word	0x58026300
 80029f0:	fffff0fe 	.word	0xfffff0fe

080029f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Stop+0x16>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e021      	b.n	8002a4e <HAL_ADC_Stop+0x5a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a12:	2103      	movs	r1, #3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 ff9b 	bl	8003950 <ADC_ConversionStop>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10f      	bne.n	8002a44 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 f8d9 	bl	8003bdc <ADC_Disable>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <HAL_ADC_Stop+0x64>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	ffffeefe 	.word	0xffffeefe

08002a5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a72      	ldr	r2, [pc, #456]	@ (8002c34 <HAL_ADC_PollForConversion+0x1d8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_ADC_PollForConversion+0x1e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a70      	ldr	r2, [pc, #448]	@ (8002c38 <HAL_ADC_PollForConversion+0x1dc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_PollForConversion+0x22>
 8002a7a:	4b70      	ldr	r3, [pc, #448]	@ (8002c3c <HAL_ADC_PollForConversion+0x1e0>)
 8002a7c:	e000      	b.n	8002a80 <HAL_ADC_PollForConversion+0x24>
 8002a7e:	4b70      	ldr	r3, [pc, #448]	@ (8002c40 <HAL_ADC_PollForConversion+0x1e4>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc2f 	bl	80022e4 <LL_ADC_GetMultimode>
 8002a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d102      	bne.n	8002a96 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a90:	2308      	movs	r3, #8
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e037      	b.n	8002b06 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d002      	beq.n	8002aa8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	d111      	bne.n	8002acc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0b1      	b.n	8002c2a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002aca:	e01c      	b.n	8002b06 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a58      	ldr	r2, [pc, #352]	@ (8002c34 <HAL_ADC_PollForConversion+0x1d8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x84>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a57      	ldr	r2, [pc, #348]	@ (8002c38 <HAL_ADC_PollForConversion+0x1dc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_PollForConversion+0x88>
 8002ae0:	4b56      	ldr	r3, [pc, #344]	@ (8002c3c <HAL_ADC_PollForConversion+0x1e0>)
 8002ae2:	e000      	b.n	8002ae6 <HAL_ADC_PollForConversion+0x8a>
 8002ae4:	4b56      	ldr	r3, [pc, #344]	@ (8002c40 <HAL_ADC_PollForConversion+0x1e4>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fc0a 	bl	8002300 <LL_ADC_GetMultiDMATransfer>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e093      	b.n	8002c2a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b02:	2304      	movs	r3, #4
 8002b04:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b06:	f7ff fa4b 	bl	8001fa0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b0c:	e021      	b.n	8002b52 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d01d      	beq.n	8002b52 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b16:	f7ff fa43 	bl	8001fa0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <HAL_ADC_PollForConversion+0xd0>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d112      	bne.n	8002b52 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10b      	bne.n	8002b52 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e06b      	b.n	8002c2a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0d6      	beq.n	8002b0e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fb03 	bl	800217c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01c      	beq.n	8002bb6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7d5b      	ldrb	r3, [r3, #21]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d118      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d111      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_ADC_PollForConversion+0x1dc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d002      	beq.n	8002bc6 <HAL_ADC_PollForConversion+0x16a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_PollForConversion+0x16c>
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_ADC_PollForConversion+0x1d8>)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d008      	beq.n	8002be2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d002      	beq.n	8002be2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	d104      	bne.n	8002bec <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e00c      	b.n	8002c06 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_ADC_PollForConversion+0x1dc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d002      	beq.n	8002bfc <HAL_ADC_PollForConversion+0x1a0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_PollForConversion+0x1a2>
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <HAL_ADC_PollForConversion+0x1d8>)
 8002bfe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d104      	bne.n	8002c16 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2208      	movs	r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e008      	b.n	8002c28 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	220c      	movs	r2, #12
 8002c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40022100 	.word	0x40022100
 8002c3c:	40022300 	.word	0x40022300
 8002c40:	58026300 	.word	0x58026300

08002c44 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a55      	ldr	r2, [pc, #340]	@ (8002dac <HAL_ADC_Start_DMA+0x168>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_Start_DMA+0x20>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a54      	ldr	r2, [pc, #336]	@ (8002db0 <HAL_ADC_Start_DMA+0x16c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_Start_DMA+0x24>
 8002c64:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <HAL_ADC_Start_DMA+0x170>)
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_Start_DMA+0x26>
 8002c68:	4b53      	ldr	r3, [pc, #332]	@ (8002db8 <HAL_ADC_Start_DMA+0x174>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fb3a 	bl	80022e4 <LL_ADC_GetMultimode>
 8002c70:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fc14 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 808c 	bne.w	8002d9c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Start_DMA+0x4e>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e087      	b.n	8002da2 <HAL_ADC_Start_DMA+0x15e>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d002      	beq.n	8002cac <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d170      	bne.n	8002d8e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 ff0b 	bl	8003ac8 <ADC_Enable>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d163      	bne.n	8002d84 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dbc <HAL_ADC_Start_DMA+0x178>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a37      	ldr	r2, [pc, #220]	@ (8002db0 <HAL_ADC_Start_DMA+0x16c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d002      	beq.n	8002cdc <HAL_ADC_Start_DMA+0x98>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e000      	b.n	8002cde <HAL_ADC_Start_DMA+0x9a>
 8002cdc:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_ADC_Start_DMA+0x168>)
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d002      	beq.n	8002cec <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f023 0206 	bic.w	r2, r3, #6
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1c:	4a28      	ldr	r2, [pc, #160]	@ (8002dc0 <HAL_ADC_Start_DMA+0x17c>)
 8002d1e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <HAL_ADC_Start_DMA+0x180>)
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2c:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <HAL_ADC_Start_DMA+0x184>)
 8002d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	221c      	movs	r2, #28
 8002d36:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0210 	orr.w	r2, r2, #16
 8002d4e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7ff fa4d 	bl	80021fa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3340      	adds	r3, #64	@ 0x40
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f001 fe68 	bl	8004a44 <HAL_DMA_Start_IT>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fb69 	bl	8002454 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d82:	e00d      	b.n	8002da0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d8c:	e008      	b.n	8002da0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d9a:	e001      	b.n	8002da0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40022100 	.word	0x40022100
 8002db4:	40022300 	.word	0x40022300
 8002db8:	58026300 	.word	0x58026300
 8002dbc:	fffff0fe 	.word	0xfffff0fe
 8002dc0:	08003c9b 	.word	0x08003c9b
 8002dc4:	08003d73 	.word	0x08003d73
 8002dc8:	08003d8f 	.word	0x08003d8f

08002dcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	@ 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a87      	ldr	r2, [pc, #540]	@ (8003028 <HAL_ADC_IRQHandler+0x240>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x30>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a86      	ldr	r2, [pc, #536]	@ (800302c <HAL_ADC_IRQHandler+0x244>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_IRQHandler+0x34>
 8002e18:	4b85      	ldr	r3, [pc, #532]	@ (8003030 <HAL_ADC_IRQHandler+0x248>)
 8002e1a:	e000      	b.n	8002e1e <HAL_ADC_IRQHandler+0x36>
 8002e1c:	4b85      	ldr	r3, [pc, #532]	@ (8003034 <HAL_ADC_IRQHandler+0x24c>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fa60 	bl	80022e4 <LL_ADC_GetMultimode>
 8002e24:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x78>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f001 f980 	bl	8004158 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x8c>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8083 	beq.w	8002f86 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07d      	beq.n	8002f86 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f968 	bl	800217c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d062      	beq.n	8002f78 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a5d      	ldr	r2, [pc, #372]	@ (800302c <HAL_ADC_IRQHandler+0x244>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d002      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0xda>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_IRQHandler+0xdc>
 8002ec2:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_ADC_IRQHandler+0x240>)
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d008      	beq.n	8002ede <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d002      	beq.n	8002ede <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	d104      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	e00c      	b.n	8002f02 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4f      	ldr	r2, [pc, #316]	@ (800302c <HAL_ADC_IRQHandler+0x244>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d002      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x110>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e000      	b.n	8002efa <HAL_ADC_IRQHandler+0x112>
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <HAL_ADC_IRQHandler+0x240>)
 8002efa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d135      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d12e      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fac0 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11a      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 020c 	bic.w	r2, r2, #12
 8002f38:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d112      	bne.n	8002f78 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f5e:	e00b      	b.n	8002f78 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	f043 0210 	orr.w	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fd fbc7 	bl	800070c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x1b2>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a0 	beq.w	80030e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 809a 	beq.w	80030e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f926 	bl	8002220 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f8ce 	bl	800217c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fe0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	@ (800302c <HAL_ADC_IRQHandler+0x244>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d002      	beq.n	8002ff2 <HAL_ADC_IRQHandler+0x20a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	e000      	b.n	8002ff4 <HAL_ADC_IRQHandler+0x20c>
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <HAL_ADC_IRQHandler+0x240>)
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d008      	beq.n	800300e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b06      	cmp	r3, #6
 8003006:	d002      	beq.n	800300e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d104      	bne.n	8003018 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	e014      	b.n	8003042 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a03      	ldr	r2, [pc, #12]	@ (800302c <HAL_ADC_IRQHandler+0x244>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00a      	beq.n	8003038 <HAL_ADC_IRQHandler+0x250>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e008      	b.n	800303a <HAL_ADC_IRQHandler+0x252>
 8003028:	40022000 	.word	0x40022000
 800302c:	40022100 	.word	0x40022100
 8003030:	40022300 	.word	0x40022300
 8003034:	58026300 	.word	0x58026300
 8003038:	4b84      	ldr	r3, [pc, #528]	@ (800324c <HAL_ADC_IRQHandler+0x464>)
 800303a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d047      	beq.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_IRQHandler+0x27a>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03f      	beq.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800305e:	2b00      	cmp	r3, #0
 8003060:	d13a      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d133      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d12e      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fa38 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11a      	bne.n	80030c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003098:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d112      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80030be:	e00b      	b.n	80030d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f001 f815 	bl	8004108 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2260      	movs	r2, #96	@ 0x60
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d011      	beq.n	8003114 <HAL_ADC_IRQHandler+0x32c>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8b2 	bl	8003270 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2280      	movs	r2, #128	@ 0x80
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <HAL_ADC_IRQHandler+0x35c>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fffb 	bl	8004130 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <HAL_ADC_IRQHandler+0x38c>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 ffed 	bl	8004144 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d043      	beq.n	8003206 <HAL_ADC_IRQHandler+0x41e>
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03e      	beq.n	8003206 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	e021      	b.n	80031da <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	@ (800324c <HAL_ADC_IRQHandler+0x464>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_ADC_IRQHandler+0x3c8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a29      	ldr	r2, [pc, #164]	@ (8003250 <HAL_ADC_IRQHandler+0x468>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x3cc>
 80031b0:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_ADC_IRQHandler+0x46c>)
 80031b2:	e000      	b.n	80031b6 <HAL_ADC_IRQHandler+0x3ce>
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_ADC_IRQHandler+0x470>)
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f8a2 	bl	8002300 <LL_ADC_GetMultiDMATransfer>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	e008      	b.n	80031da <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10e      	bne.n	80031fe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	f043 0202 	orr.w	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f843 	bl	8003284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d018      	beq.n	8003242 <HAL_ADC_IRQHandler+0x45a>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d013      	beq.n	8003242 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	f043 0208 	orr.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800323a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 ff6d 	bl	800411c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003242:	bf00      	nop
 8003244:	3728      	adds	r7, #40	@ 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40022100 	.word	0x40022100
 8003254:	40022300 	.word	0x40022300
 8003258:	58026300 	.word	0x58026300

0800325c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b0a1      	sub	sp, #132	@ 0x84
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <HAL_ADC_ConfigChannel+0x1b0>)
 80032b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x2a>
 80032be:	2302      	movs	r3, #2
 80032c0:	e32e      	b.n	8003920 <HAL_ADC_ConfigChannel+0x688>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f8e8 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 8313 	bne.w	8003902 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db2c      	blt.n	800333e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x6a>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2201      	movs	r2, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	e016      	b.n	8003330 <HAL_ADC_ConfigChannel+0x98>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003310:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003312:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e003      	b.n	8003326 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800331e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2201      	movs	r2, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	69d1      	ldr	r1, [r2, #28]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	430b      	orrs	r3, r1
 800333c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f7fe ff29 	bl	80021a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff f8a5 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 800335a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff f8c7 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8003366:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80b8 	bne.w	80034e0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 80b4 	bne.w	80034e0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	461a      	mov	r2, r3
 8003386:	f7fe ff5e 	bl	8002246 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800338a:	4b30      	ldr	r3, [pc, #192]	@ (800344c <HAL_ADC_ConfigChannel+0x1b4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003396:	d10b      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x118>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	e01d      	b.n	80033ec <HAL_ADC_ConfigChannel+0x154>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x13e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	e00a      	b.n	80033ec <HAL_ADC_ConfigChannel+0x154>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d02c      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003404:	f7fe fe66 	bl	80020d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	7e5b      	ldrb	r3, [r3, #25]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_ADC_ConfigChannel+0x186>
 8003418:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800341c:	e000      	b.n	8003420 <HAL_ADC_ConfigChannel+0x188>
 800341e:	2300      	movs	r3, #0
 8003420:	461a      	mov	r2, r3
 8003422:	f7fe fe90 	bl	8002146 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6919      	ldr	r1, [r3, #16]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	7e1b      	ldrb	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1a4>
 8003436:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800343a:	e000      	b.n	800343e <HAL_ADC_ConfigChannel+0x1a6>
 800343c:	2300      	movs	r3, #0
 800343e:	461a      	mov	r2, r3
 8003440:	f7fe fe68 	bl	8002114 <LL_ADC_SetDataRightShift>
 8003444:	e04c      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x248>
 8003446:	bf00      	nop
 8003448:	47ff0000 	.word	0x47ff0000
 800344c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	069b      	lsls	r3, r3, #26
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003472:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	069b      	lsls	r3, r3, #26
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003496:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800349e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d107      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034ba:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	069b      	lsls	r3, r3, #26
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d107      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe ff8f 	bl	8002408 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f040 8211 	bne.w	8003914 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	461a      	mov	r2, r3
 8003500:	f7fe fecc 	bl	800229c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4aa1      	ldr	r2, [pc, #644]	@ (8003790 <HAL_ADC_ConfigChannel+0x4f8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	f040 812e 	bne.w	800376c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x2a0>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0e9b      	lsrs	r3, r3, #26
 8003526:	3301      	adds	r3, #1
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2b09      	cmp	r3, #9
 800352e:	bf94      	ite	ls
 8003530:	2301      	movls	r3, #1
 8003532:	2300      	movhi	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e019      	b.n	800356c <HAL_ADC_ConfigChannel+0x2d4>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003548:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800354a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e003      	b.n	800355c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003554:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b09      	cmp	r3, #9
 8003564:	bf94      	ite	ls
 8003566:	2301      	movls	r3, #1
 8003568:	2300      	movhi	r3, #0
 800356a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356c:	2b00      	cmp	r3, #0
 800356e:	d079      	beq.n	8003664 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_ADC_ConfigChannel+0x2f4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0e9b      	lsrs	r3, r3, #26
 8003582:	3301      	adds	r3, #1
 8003584:	069b      	lsls	r3, r3, #26
 8003586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800358a:	e015      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x320>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800359a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800359e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e003      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80035a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	069b      	lsls	r3, r3, #26
 80035b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x340>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	3301      	adds	r3, #1
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2101      	movs	r1, #1
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	e017      	b.n	8003608 <HAL_ADC_ConfigChannel+0x370>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80035ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80035f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2101      	movs	r1, #1
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	ea42 0103 	orr.w	r1, r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_ADC_ConfigChannel+0x396>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	051b      	lsls	r3, r3, #20
 800362c:	e018      	b.n	8003660 <HAL_ADC_ConfigChannel+0x3c8>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003646:	2320      	movs	r3, #32
 8003648:	e003      	b.n	8003652 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	430b      	orrs	r3, r1
 8003662:	e07e      	b.n	8003762 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x3e8>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	3301      	adds	r3, #1
 8003678:	069b      	lsls	r3, r3, #26
 800367a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800367e:	e015      	b.n	80036ac <HAL_ADC_ConfigChannel+0x414>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x434>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	3301      	adds	r3, #1
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2101      	movs	r1, #1
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	e017      	b.n	80036fc <HAL_ADC_ConfigChannel+0x464>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	61bb      	str	r3, [r7, #24]
  return result;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	ea42 0103 	orr.w	r1, r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x490>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	3b1e      	subs	r3, #30
 8003720:	051b      	lsls	r3, r3, #20
 8003722:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003726:	e01b      	b.n	8003760 <HAL_ADC_ConfigChannel+0x4c8>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	60fb      	str	r3, [r7, #12]
  return result;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	3b1e      	subs	r3, #30
 800375a:	051b      	lsls	r3, r3, #20
 800375c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	430b      	orrs	r3, r1
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	4619      	mov	r1, r3
 8003768:	f7fe fd6d 	bl	8002246 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f280 80cf 	bge.w	8003914 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <HAL_ADC_ConfigChannel+0x4fc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_ADC_ConfigChannel+0x4f2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <HAL_ADC_ConfigChannel+0x500>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10a      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x508>
 800378a:	4b04      	ldr	r3, [pc, #16]	@ (800379c <HAL_ADC_ConfigChannel+0x504>)
 800378c:	e009      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x50a>
 800378e:	bf00      	nop
 8003790:	47ff0000 	.word	0x47ff0000
 8003794:	40022000 	.word	0x40022000
 8003798:	40022100 	.word	0x40022100
 800379c:	40022300 	.word	0x40022300
 80037a0:	4b61      	ldr	r3, [pc, #388]	@ (8003928 <HAL_ADC_ConfigChannel+0x690>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fc88 	bl	80020b8 <LL_ADC_GetCommonPathInternalCh>
 80037a8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5f      	ldr	r2, [pc, #380]	@ (800392c <HAL_ADC_ConfigChannel+0x694>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_ADC_ConfigChannel+0x526>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003930 <HAL_ADC_ConfigChannel+0x698>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10e      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x544>
 80037be:	485b      	ldr	r0, [pc, #364]	@ (800392c <HAL_ADC_ConfigChannel+0x694>)
 80037c0:	f7fe fe22 	bl	8002408 <LL_ADC_IsEnabled>
 80037c4:	4604      	mov	r4, r0
 80037c6:	485a      	ldr	r0, [pc, #360]	@ (8003930 <HAL_ADC_ConfigChannel+0x698>)
 80037c8:	f7fe fe1e 	bl	8002408 <LL_ADC_IsEnabled>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4323      	orrs	r3, r4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_ADC_ConfigChannel+0x556>
 80037dc:	4855      	ldr	r0, [pc, #340]	@ (8003934 <HAL_ADC_ConfigChannel+0x69c>)
 80037de:	f7fe fe13 	bl	8002408 <LL_ADC_IsEnabled>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d07d      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a50      	ldr	r2, [pc, #320]	@ (8003938 <HAL_ADC_ConfigChannel+0x6a0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d130      	bne.n	800385e <HAL_ADC_ConfigChannel+0x5c6>
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d12b      	bne.n	800385e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a4a      	ldr	r2, [pc, #296]	@ (8003934 <HAL_ADC_ConfigChannel+0x69c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	f040 8081 	bne.w	8003914 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a45      	ldr	r2, [pc, #276]	@ (800392c <HAL_ADC_ConfigChannel+0x694>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_ADC_ConfigChannel+0x58e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a43      	ldr	r2, [pc, #268]	@ (8003930 <HAL_ADC_ConfigChannel+0x698>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_ADC_ConfigChannel+0x592>
 8003826:	4a45      	ldr	r2, [pc, #276]	@ (800393c <HAL_ADC_ConfigChannel+0x6a4>)
 8003828:	e000      	b.n	800382c <HAL_ADC_ConfigChannel+0x594>
 800382a:	4a3f      	ldr	r2, [pc, #252]	@ (8003928 <HAL_ADC_ConfigChannel+0x690>)
 800382c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fe fc2c 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800383a:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_ADC_ConfigChannel+0x6a8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	4a40      	ldr	r2, [pc, #256]	@ (8003944 <HAL_ADC_ConfigChannel+0x6ac>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	3301      	adds	r3, #1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800384e:	e002      	b.n	8003856 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	3b01      	subs	r3, #1
 8003854:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f9      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800385c:	e05a      	b.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a39      	ldr	r2, [pc, #228]	@ (8003948 <HAL_ADC_ConfigChannel+0x6b0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d11e      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x60e>
 8003868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2f      	ldr	r2, [pc, #188]	@ (8003934 <HAL_ADC_ConfigChannel+0x69c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d14b      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <HAL_ADC_ConfigChannel+0x694>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x5f8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <HAL_ADC_ConfigChannel+0x698>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x5fc>
 8003890:	4a2a      	ldr	r2, [pc, #168]	@ (800393c <HAL_ADC_ConfigChannel+0x6a4>)
 8003892:	e000      	b.n	8003896 <HAL_ADC_ConfigChannel+0x5fe>
 8003894:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <HAL_ADC_ConfigChannel+0x690>)
 8003896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003898:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7fe fbf7 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038a4:	e036      	b.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <HAL_ADC_ConfigChannel+0x6b4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d131      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
 80038b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d12c      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <HAL_ADC_ConfigChannel+0x69c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d127      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a18      	ldr	r2, [pc, #96]	@ (800392c <HAL_ADC_ConfigChannel+0x694>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_ADC_ConfigChannel+0x640>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_ADC_ConfigChannel+0x698>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x644>
 80038d8:	4a18      	ldr	r2, [pc, #96]	@ (800393c <HAL_ADC_ConfigChannel+0x6a4>)
 80038da:	e000      	b.n	80038de <HAL_ADC_ConfigChannel+0x646>
 80038dc:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <HAL_ADC_ConfigChannel+0x690>)
 80038de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7fe fbd3 	bl	8002092 <LL_ADC_SetCommonPathInternalCh>
 80038ec:	e012      	b.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003900:	e008      	b.n	8003914 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800391c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003920:	4618      	mov	r0, r3
 8003922:	3784      	adds	r7, #132	@ 0x84
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	58026300 	.word	0x58026300
 800392c:	40022000 	.word	0x40022000
 8003930:	40022100 	.word	0x40022100
 8003934:	58026000 	.word	0x58026000
 8003938:	cb840000 	.word	0xcb840000
 800393c:	40022300 	.word	0x40022300
 8003940:	2400002c 	.word	0x2400002c
 8003944:	053e2d63 	.word	0x053e2d63
 8003948:	c7520000 	.word	0xc7520000
 800394c:	cfb80000 	.word	0xcfb80000

08003950 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fd9c 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 800396c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fdbe 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8003978:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8098 	beq.w	8003ab8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d02a      	beq.n	80039ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7d5b      	ldrb	r3, [r3, #21]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d126      	bne.n	80039ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7d1b      	ldrb	r3, [r3, #20]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d122      	bne.n	80039ec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039aa:	e014      	b.n	80039d6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4a45      	ldr	r2, [pc, #276]	@ (8003ac4 <ADC_ConversionStop+0x174>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d90d      	bls.n	80039d0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f043 0210 	orr.w	r2, r3, #16
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e074      	b.n	8003aba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d1e3      	bne.n	80039ac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2240      	movs	r2, #64	@ 0x40
 80039ea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d014      	beq.n	8003a1c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fd54 	bl	80024a4 <LL_ADC_REG_IsConversionOngoing>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fd11 	bl	800242e <LL_ADC_IsDisableOngoing>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fd30 	bl	800247c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d014      	beq.n	8003a4c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fd64 	bl	80024f4 <LL_ADC_INJ_IsConversionOngoing>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fcf9 	bl	800242e <LL_ADC_IsDisableOngoing>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fd40 	bl	80024cc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d005      	beq.n	8003a5e <ADC_ConversionStop+0x10e>
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d105      	bne.n	8003a64 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a58:	230c      	movs	r3, #12
 8003a5a:	617b      	str	r3, [r7, #20]
        break;
 8003a5c:	e005      	b.n	8003a6a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a5e:	2308      	movs	r3, #8
 8003a60:	617b      	str	r3, [r7, #20]
        break;
 8003a62:	e002      	b.n	8003a6a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a64:	2304      	movs	r3, #4
 8003a66:	617b      	str	r3, [r7, #20]
        break;
 8003a68:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a6a:	f7fe fa99 	bl	8001fa0 <HAL_GetTick>
 8003a6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a70:	e01b      	b.n	8003aaa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a72:	f7fe fa95 	bl	8001fa0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d914      	bls.n	8003aaa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a92:	f043 0210 	orr.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e007      	b.n	8003aba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1dc      	bne.n	8003a72 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	000cdbff 	.word	0x000cdbff

08003ac8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fc97 	bl	8002408 <LL_ADC_IsEnabled>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d16e      	bne.n	8003bbe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <ADC_Enable+0x100>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	f043 0210 	orr.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e05a      	b.n	8003bc0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fc52 	bl	80023b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b14:	f7fe fa44 	bl	8001fa0 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <ADC_Enable+0x104>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <ADC_Enable+0x66>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <ADC_Enable+0x108>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <ADC_Enable+0x6a>
 8003b2e:	4b29      	ldr	r3, [pc, #164]	@ (8003bd4 <ADC_Enable+0x10c>)
 8003b30:	e000      	b.n	8003b34 <ADC_Enable+0x6c>
 8003b32:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <ADC_Enable+0x110>)
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fbd5 	bl	80022e4 <LL_ADC_GetMultimode>
 8003b3a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <ADC_Enable+0x108>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d002      	beq.n	8003b4c <ADC_Enable+0x84>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	e000      	b.n	8003b4e <ADC_Enable+0x86>
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <ADC_Enable+0x104>)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02c      	beq.n	8003bb0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d130      	bne.n	8003bbe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b5c:	e028      	b.n	8003bb0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fc50 	bl	8002408 <LL_ADC_IsEnabled>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fc20 	bl	80023b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b78:	f7fe fa12 	bl	8001fa0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d914      	bls.n	8003bb0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d00d      	beq.n	8003bb0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b98:	f043 0210 	orr.w	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e007      	b.n	8003bc0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d1cf      	bne.n	8003b5e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	8000003f 	.word	0x8000003f
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40022100 	.word	0x40022100
 8003bd4:	40022300 	.word	0x40022300
 8003bd8:	58026300 	.word	0x58026300

08003bdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fc20 	bl	800242e <LL_ADC_IsDisableOngoing>
 8003bee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fc07 	bl	8002408 <LL_ADC_IsEnabled>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d047      	beq.n	8003c90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d144      	bne.n	8003c90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030d 	and.w	r3, r3, #13
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10c      	bne.n	8003c2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fbe1 	bl	80023e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2203      	movs	r2, #3
 8003c24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c26:	f7fe f9bb 	bl	8001fa0 <HAL_GetTick>
 8003c2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c2c:	e029      	b.n	8003c82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c32:	f043 0210 	orr.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e023      	b.n	8003c92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c4a:	f7fe f9a9 	bl	8001fa0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d914      	bls.n	8003c82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e007      	b.n	8003c92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1dc      	bne.n	8003c4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d14b      	bne.n	8003d4c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d021      	beq.n	8003d12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fa52 	bl	800217c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d032      	beq.n	8003d44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12b      	bne.n	8003d44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11f      	bne.n	8003d44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d10:	e018      	b.n	8003d44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3c:	f043 0201 	orr.w	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7fc fce1 	bl	800070c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d4a:	e00e      	b.n	8003d6a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fa93 	bl	8003284 <HAL_ADC_ErrorCallback>
}
 8003d5e:	e004      	b.n	8003d6a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff fa6b 	bl	800325c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff fa65 	bl	8003284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fbc <ADC_ConfigureBoostMode+0x1f8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <ADC_ConfigureBoostMode+0x1c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a79      	ldr	r2, [pc, #484]	@ (8003fc0 <ADC_ConfigureBoostMode+0x1fc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d109      	bne.n	8003df4 <ADC_ConfigureBoostMode+0x30>
 8003de0:	4b78      	ldr	r3, [pc, #480]	@ (8003fc4 <ADC_ConfigureBoostMode+0x200>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e008      	b.n	8003e06 <ADC_ConfigureBoostMode+0x42>
 8003df4:	4b74      	ldr	r3, [pc, #464]	@ (8003fc8 <ADC_ConfigureBoostMode+0x204>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01c      	beq.n	8003e44 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e0a:	f004 fffd 	bl	8008e08 <HAL_RCC_GetHCLKFreq>
 8003e0e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e18:	d010      	beq.n	8003e3c <ADC_ConfigureBoostMode+0x78>
 8003e1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e1e:	d873      	bhi.n	8003f08 <ADC_ConfigureBoostMode+0x144>
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e24:	d002      	beq.n	8003e2c <ADC_ConfigureBoostMode+0x68>
 8003e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e2a:	d16d      	bne.n	8003f08 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	60fb      	str	r3, [r7, #12]
        break;
 8003e3a:	e068      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	60fb      	str	r3, [r7, #12]
        break;
 8003e42:	e064      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e44:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	f006 fa42 	bl	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e5a:	d051      	beq.n	8003f00 <ADC_ConfigureBoostMode+0x13c>
 8003e5c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e60:	d854      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003e62:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003e66:	d047      	beq.n	8003ef8 <ADC_ConfigureBoostMode+0x134>
 8003e68:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003e6c:	d84e      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003e6e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003e72:	d03d      	beq.n	8003ef0 <ADC_ConfigureBoostMode+0x12c>
 8003e74:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003e78:	d848      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e7e:	d033      	beq.n	8003ee8 <ADC_ConfigureBoostMode+0x124>
 8003e80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e84:	d842      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003e86:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003e8a:	d029      	beq.n	8003ee0 <ADC_ConfigureBoostMode+0x11c>
 8003e8c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003e90:	d83c      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003e92:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003e96:	d01a      	beq.n	8003ece <ADC_ConfigureBoostMode+0x10a>
 8003e98:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003e9c:	d836      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003e9e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ea2:	d014      	beq.n	8003ece <ADC_ConfigureBoostMode+0x10a>
 8003ea4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ea8:	d830      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eae:	d00e      	beq.n	8003ece <ADC_ConfigureBoostMode+0x10a>
 8003eb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb4:	d82a      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003eb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003eba:	d008      	beq.n	8003ece <ADC_ConfigureBoostMode+0x10a>
 8003ebc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ec0:	d824      	bhi.n	8003f0c <ADC_ConfigureBoostMode+0x148>
 8003ec2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ec6:	d002      	beq.n	8003ece <ADC_ConfigureBoostMode+0x10a>
 8003ec8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ecc:	d11e      	bne.n	8003f0c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0c9b      	lsrs	r3, r3, #18
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	60fb      	str	r3, [r7, #12]
        break;
 8003ede:	e016      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]
        break;
 8003ee6:	e012      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	60fb      	str	r3, [r7, #12]
        break;
 8003eee:	e00e      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	60fb      	str	r3, [r7, #12]
        break;
 8003ef6:	e00a      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	09db      	lsrs	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
        break;
 8003efe:	e006      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	60fb      	str	r3, [r7, #12]
        break;
 8003f06:	e002      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f0c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f0e:	f7fe f877 	bl	8002000 <HAL_GetREVID>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d815      	bhi.n	8003f48 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fcc <ADC_ConfigureBoostMode+0x208>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d908      	bls.n	8003f36 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f32:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f34:	e03e      	b.n	8003fb4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	e035      	b.n	8003fb4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <ADC_ConfigureBoostMode+0x20c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d808      	bhi.n	8003f68 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f64:	609a      	str	r2, [r3, #8]
}
 8003f66:	e025      	b.n	8003fb4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd4 <ADC_ConfigureBoostMode+0x210>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d80a      	bhi.n	8003f86 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	e016      	b.n	8003fb4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <ADC_ConfigureBoostMode+0x214>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d80a      	bhi.n	8003fa4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	e007      	b.n	8003fb4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40022000 	.word	0x40022000
 8003fc0:	40022100 	.word	0x40022100
 8003fc4:	40022300 	.word	0x40022300
 8003fc8:	58026300 	.word	0x58026300
 8003fcc:	01312d00 	.word	0x01312d00
 8003fd0:	005f5e10 	.word	0x005f5e10
 8003fd4:	00bebc20 	.word	0x00bebc20
 8003fd8:	017d7840 	.word	0x017d7840

08003fdc <LL_ADC_StartCalibration>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <LL_ADC_StartCalibration+0x38>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	3ffeffc0 	.word	0x3ffeffc0

08004018 <LL_ADC_IsCalibrationOnGoing>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800402c:	d101      	bne.n	8004032 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_ADCEx_Calibration_Start+0x1e>
 800405a:	2302      	movs	r3, #2
 800405c:	e04c      	b.n	80040f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff fdb8 	bl	8003bdc <ADC_Disable>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d135      	bne.n	80040e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800407a:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <HAL_ADCEx_Calibration_Start+0xc0>)
 800407c:	4013      	ands	r3, r2
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffa4 	bl	8003fdc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004094:	e014      	b.n	80040c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3301      	adds	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4a19      	ldr	r2, [pc, #100]	@ (8004104 <HAL_ADCEx_Calibration_Start+0xc4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d30d      	bcc.n	80040c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a8:	f023 0312 	bic.w	r3, r3, #18
 80040ac:	f043 0210 	orr.w	r2, r3, #16
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e01b      	b.n	80040f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff ffa7 	bl	8004018 <LL_ADC_IsCalibrationOnGoing>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e2      	bne.n	8004096 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	f023 0303 	bic.w	r3, r3, #3
 80040d8:	f043 0201 	orr.w	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
 80040e0:	e005      	b.n	80040ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	ffffeefd 	.word	0xffffeefd
 8004104:	25c3f800 	.word	0x25c3f800

08004108 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <__NVIC_SetPriorityGrouping>:
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <__NVIC_SetPriorityGrouping+0x40>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004196:	4313      	orrs	r3, r2
 8004198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419a:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <__NVIC_SetPriorityGrouping+0x40>)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	60d3      	str	r3, [r2, #12]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00
 80041b0:	05fa0000 	.word	0x05fa0000

080041b4 <__NVIC_GetPriorityGrouping>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b8:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <__NVIC_GetPriorityGrouping+0x18>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 0307 	and.w	r3, r3, #7
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_EnableIRQ>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	db0b      	blt.n	80041fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	f003 021f 	and.w	r2, r3, #31
 80041e8:	4907      	ldr	r1, [pc, #28]	@ (8004208 <__NVIC_EnableIRQ+0x38>)
 80041ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2001      	movs	r0, #1
 80041f2:	fa00 f202 	lsl.w	r2, r0, r2
 80041f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000e100 	.word	0xe000e100

0800420c <__NVIC_SetPriority>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db0a      	blt.n	8004236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	490c      	ldr	r1, [pc, #48]	@ (8004258 <__NVIC_SetPriority+0x4c>)
 8004226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	440b      	add	r3, r1
 8004230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004234:	e00a      	b.n	800424c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4908      	ldr	r1, [pc, #32]	@ (800425c <__NVIC_SetPriority+0x50>)
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	3b04      	subs	r3, #4
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	440b      	add	r3, r1
 800424a:	761a      	strb	r2, [r3, #24]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000e100 	.word	0xe000e100
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <NVIC_EncodePriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f1c3 0307 	rsb	r3, r3, #7
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf28      	it	cs
 800427e:	2304      	movcs	r3, #4
 8004280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3304      	adds	r3, #4
 8004286:	2b06      	cmp	r3, #6
 8004288:	d902      	bls.n	8004290 <NVIC_EncodePriority+0x30>
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3b03      	subs	r3, #3
 800428e:	e000      	b.n	8004292 <NVIC_EncodePriority+0x32>
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	f04f 32ff 	mov.w	r2, #4294967295
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	401a      	ands	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43d9      	mvns	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	4313      	orrs	r3, r2
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	@ 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <SysTick_Config>:
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042d8:	d301      	bcc.n	80042de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042de:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <SysTick_Config+0x40>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042e6:	210f      	movs	r1, #15
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f7ff ff8e 	bl	800420c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <SysTick_Config+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042f6:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <SysTick_Config+0x40>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000e010 	.word	0xe000e010

0800430c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff29 	bl	800416c <__NVIC_SetPriorityGrouping>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	4603      	mov	r3, r0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004330:	f7ff ff40 	bl	80041b4 <__NVIC_GetPriorityGrouping>
 8004334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff90 	bl	8004260 <NVIC_EncodePriority>
 8004340:	4602      	mov	r2, r0
 8004342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff5f 	bl	800420c <__NVIC_SetPriority>
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff33 	bl	80041d0 <__NVIC_EnableIRQ>
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ffa4 	bl	80042c8 <SysTick_Config>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7fd fe04 	bl	8001fa0 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e316      	b.n	80049d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a66      	ldr	r2, [pc, #408]	@ (8004544 <HAL_DMA_Init+0x1b8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d04a      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a65      	ldr	r2, [pc, #404]	@ (8004548 <HAL_DMA_Init+0x1bc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d045      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a63      	ldr	r2, [pc, #396]	@ (800454c <HAL_DMA_Init+0x1c0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d040      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a62      	ldr	r2, [pc, #392]	@ (8004550 <HAL_DMA_Init+0x1c4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d03b      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a60      	ldr	r2, [pc, #384]	@ (8004554 <HAL_DMA_Init+0x1c8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d036      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5f      	ldr	r2, [pc, #380]	@ (8004558 <HAL_DMA_Init+0x1cc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d031      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a5d      	ldr	r2, [pc, #372]	@ (800455c <HAL_DMA_Init+0x1d0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d02c      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004560 <HAL_DMA_Init+0x1d4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d027      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004564 <HAL_DMA_Init+0x1d8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d022      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a59      	ldr	r2, [pc, #356]	@ (8004568 <HAL_DMA_Init+0x1dc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d01d      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a57      	ldr	r2, [pc, #348]	@ (800456c <HAL_DMA_Init+0x1e0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d018      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a56      	ldr	r2, [pc, #344]	@ (8004570 <HAL_DMA_Init+0x1e4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a54      	ldr	r2, [pc, #336]	@ (8004574 <HAL_DMA_Init+0x1e8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a53      	ldr	r2, [pc, #332]	@ (8004578 <HAL_DMA_Init+0x1ec>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a51      	ldr	r2, [pc, #324]	@ (800457c <HAL_DMA_Init+0x1f0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_DMA_Init+0xb8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a50      	ldr	r2, [pc, #320]	@ (8004580 <HAL_DMA_Init+0x1f4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_DMA_Init+0xbc>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_DMA_Init+0xbe>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 813b 	beq.w	80046c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a37      	ldr	r2, [pc, #220]	@ (8004544 <HAL_DMA_Init+0x1b8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04a      	beq.n	8004500 <HAL_DMA_Init+0x174>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a36      	ldr	r2, [pc, #216]	@ (8004548 <HAL_DMA_Init+0x1bc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d045      	beq.n	8004500 <HAL_DMA_Init+0x174>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a34      	ldr	r2, [pc, #208]	@ (800454c <HAL_DMA_Init+0x1c0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d040      	beq.n	8004500 <HAL_DMA_Init+0x174>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a33      	ldr	r2, [pc, #204]	@ (8004550 <HAL_DMA_Init+0x1c4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d03b      	beq.n	8004500 <HAL_DMA_Init+0x174>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a31      	ldr	r2, [pc, #196]	@ (8004554 <HAL_DMA_Init+0x1c8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d036      	beq.n	8004500 <HAL_DMA_Init+0x174>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a30      	ldr	r2, [pc, #192]	@ (8004558 <HAL_DMA_Init+0x1cc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d031      	beq.n	8004500 <HAL_DMA_Init+0x174>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2e      	ldr	r2, [pc, #184]	@ (800455c <HAL_DMA_Init+0x1d0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02c      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004560 <HAL_DMA_Init+0x1d4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d027      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004564 <HAL_DMA_Init+0x1d8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2a      	ldr	r2, [pc, #168]	@ (8004568 <HAL_DMA_Init+0x1dc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01d      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a28      	ldr	r2, [pc, #160]	@ (800456c <HAL_DMA_Init+0x1e0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a27      	ldr	r2, [pc, #156]	@ (8004570 <HAL_DMA_Init+0x1e4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a25      	ldr	r2, [pc, #148]	@ (8004574 <HAL_DMA_Init+0x1e8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a24      	ldr	r2, [pc, #144]	@ (8004578 <HAL_DMA_Init+0x1ec>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a22      	ldr	r2, [pc, #136]	@ (800457c <HAL_DMA_Init+0x1f0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_Init+0x174>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a21      	ldr	r2, [pc, #132]	@ (8004580 <HAL_DMA_Init+0x1f4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d108      	bne.n	8004512 <HAL_DMA_Init+0x186>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e007      	b.n	8004522 <HAL_DMA_Init+0x196>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004522:	e02f      	b.n	8004584 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004524:	f7fd fd3c 	bl	8001fa0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b05      	cmp	r3, #5
 8004530:	d928      	bls.n	8004584 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2203      	movs	r2, #3
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e246      	b.n	80049d2 <HAL_DMA_Init+0x646>
 8004544:	40020010 	.word	0x40020010
 8004548:	40020028 	.word	0x40020028
 800454c:	40020040 	.word	0x40020040
 8004550:	40020058 	.word	0x40020058
 8004554:	40020070 	.word	0x40020070
 8004558:	40020088 	.word	0x40020088
 800455c:	400200a0 	.word	0x400200a0
 8004560:	400200b8 	.word	0x400200b8
 8004564:	40020410 	.word	0x40020410
 8004568:	40020428 	.word	0x40020428
 800456c:	40020440 	.word	0x40020440
 8004570:	40020458 	.word	0x40020458
 8004574:	40020470 	.word	0x40020470
 8004578:	40020488 	.word	0x40020488
 800457c:	400204a0 	.word	0x400204a0
 8004580:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1c8      	bne.n	8004524 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4b83      	ldr	r3, [pc, #524]	@ (80047ac <HAL_DMA_Init+0x420>)
 800459e:	4013      	ands	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80045aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d107      	bne.n	80045e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	4313      	orrs	r3, r2
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80045e8:	4b71      	ldr	r3, [pc, #452]	@ (80047b0 <HAL_DMA_Init+0x424>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b71      	ldr	r3, [pc, #452]	@ (80047b4 <HAL_DMA_Init+0x428>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f4:	d328      	bcc.n	8004648 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b28      	cmp	r3, #40	@ 0x28
 80045fc:	d903      	bls.n	8004606 <HAL_DMA_Init+0x27a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b2e      	cmp	r3, #46	@ 0x2e
 8004604:	d917      	bls.n	8004636 <HAL_DMA_Init+0x2aa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b3e      	cmp	r3, #62	@ 0x3e
 800460c:	d903      	bls.n	8004616 <HAL_DMA_Init+0x28a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b42      	cmp	r3, #66	@ 0x42
 8004614:	d90f      	bls.n	8004636 <HAL_DMA_Init+0x2aa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b46      	cmp	r3, #70	@ 0x46
 800461c:	d903      	bls.n	8004626 <HAL_DMA_Init+0x29a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b48      	cmp	r3, #72	@ 0x48
 8004624:	d907      	bls.n	8004636 <HAL_DMA_Init+0x2aa>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b4e      	cmp	r3, #78	@ 0x4e
 800462c:	d905      	bls.n	800463a <HAL_DMA_Init+0x2ae>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b52      	cmp	r3, #82	@ 0x52
 8004634:	d801      	bhi.n	800463a <HAL_DMA_Init+0x2ae>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_DMA_Init+0x2b0>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004646:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	2b04      	cmp	r3, #4
 8004670:	d117      	bne.n	80046a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f002 fb33 	bl	8006cf0 <DMA_CheckFifoParam>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2240      	movs	r2, #64	@ 0x40
 8004694:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e197      	b.n	80049d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f002 fa6e 	bl	8006b8c <DMA_CalcBaseAndBitshift>
 80046b0:	4603      	mov	r3, r0
 80046b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	223f      	movs	r2, #63	@ 0x3f
 80046be:	409a      	lsls	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e0cd      	b.n	8004862 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	@ (80047b8 <HAL_DMA_Init+0x42c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a39      	ldr	r2, [pc, #228]	@ (80047bc <HAL_DMA_Init+0x430>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a38      	ldr	r2, [pc, #224]	@ (80047c0 <HAL_DMA_Init+0x434>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a36      	ldr	r2, [pc, #216]	@ (80047c4 <HAL_DMA_Init+0x438>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a35      	ldr	r2, [pc, #212]	@ (80047c8 <HAL_DMA_Init+0x43c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a33      	ldr	r2, [pc, #204]	@ (80047cc <HAL_DMA_Init+0x440>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a32      	ldr	r2, [pc, #200]	@ (80047d0 <HAL_DMA_Init+0x444>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_Init+0x38a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	@ (80047d4 <HAL_DMA_Init+0x448>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_DMA_Init+0x38e>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_DMA_Init+0x390>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8097 	beq.w	8004850 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <HAL_DMA_Init+0x42c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d021      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <HAL_DMA_Init+0x430>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01c      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <HAL_DMA_Init+0x434>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d017      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <HAL_DMA_Init+0x438>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d012      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <HAL_DMA_Init+0x43c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00d      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1c      	ldr	r2, [pc, #112]	@ (80047cc <HAL_DMA_Init+0x440>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d008      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <HAL_DMA_Init+0x444>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <HAL_DMA_Init+0x3e4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <HAL_DMA_Init+0x448>)
 800476e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <HAL_DMA_Init+0x44c>)
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b40      	cmp	r3, #64	@ 0x40
 8004796:	d021      	beq.n	80047dc <HAL_DMA_Init+0x450>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b80      	cmp	r3, #128	@ 0x80
 800479e:	d102      	bne.n	80047a6 <HAL_DMA_Init+0x41a>
 80047a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047a4:	e01b      	b.n	80047de <HAL_DMA_Init+0x452>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e019      	b.n	80047de <HAL_DMA_Init+0x452>
 80047aa:	bf00      	nop
 80047ac:	fe10803f 	.word	0xfe10803f
 80047b0:	5c001000 	.word	0x5c001000
 80047b4:	ffff0000 	.word	0xffff0000
 80047b8:	58025408 	.word	0x58025408
 80047bc:	5802541c 	.word	0x5802541c
 80047c0:	58025430 	.word	0x58025430
 80047c4:	58025444 	.word	0x58025444
 80047c8:	58025458 	.word	0x58025458
 80047cc:	5802546c 	.word	0x5802546c
 80047d0:	58025480 	.word	0x58025480
 80047d4:	58025494 	.word	0x58025494
 80047d8:	fffe000f 	.word	0xfffe000f
 80047dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800480c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b6e      	ldr	r3, [pc, #440]	@ (80049dc <HAL_DMA_Init+0x650>)
 8004824:	4413      	add	r3, r2
 8004826:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_DMA_Init+0x654>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f002 f9a9 	bl	8006b8c <DMA_CalcBaseAndBitshift>
 800483a:	4603      	mov	r3, r0
 800483c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2201      	movs	r2, #1
 8004848:	409a      	lsls	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	e008      	b.n	8004862 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2240      	movs	r2, #64	@ 0x40
 8004854:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0b7      	b.n	80049d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5f      	ldr	r2, [pc, #380]	@ (80049e4 <HAL_DMA_Init+0x658>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d072      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a5d      	ldr	r2, [pc, #372]	@ (80049e8 <HAL_DMA_Init+0x65c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d06d      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a5c      	ldr	r2, [pc, #368]	@ (80049ec <HAL_DMA_Init+0x660>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d068      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a5a      	ldr	r2, [pc, #360]	@ (80049f0 <HAL_DMA_Init+0x664>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d063      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a59      	ldr	r2, [pc, #356]	@ (80049f4 <HAL_DMA_Init+0x668>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d05e      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a57      	ldr	r2, [pc, #348]	@ (80049f8 <HAL_DMA_Init+0x66c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d059      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a56      	ldr	r2, [pc, #344]	@ (80049fc <HAL_DMA_Init+0x670>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d054      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a54      	ldr	r2, [pc, #336]	@ (8004a00 <HAL_DMA_Init+0x674>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d04f      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a53      	ldr	r2, [pc, #332]	@ (8004a04 <HAL_DMA_Init+0x678>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04a      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a51      	ldr	r2, [pc, #324]	@ (8004a08 <HAL_DMA_Init+0x67c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d045      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a50      	ldr	r2, [pc, #320]	@ (8004a0c <HAL_DMA_Init+0x680>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d040      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a10 <HAL_DMA_Init+0x684>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d03b      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4d      	ldr	r2, [pc, #308]	@ (8004a14 <HAL_DMA_Init+0x688>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004a18 <HAL_DMA_Init+0x68c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4a      	ldr	r2, [pc, #296]	@ (8004a1c <HAL_DMA_Init+0x690>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02c      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a48      	ldr	r2, [pc, #288]	@ (8004a20 <HAL_DMA_Init+0x694>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d027      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a47      	ldr	r2, [pc, #284]	@ (8004a24 <HAL_DMA_Init+0x698>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a45      	ldr	r2, [pc, #276]	@ (8004a28 <HAL_DMA_Init+0x69c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a44      	ldr	r2, [pc, #272]	@ (8004a2c <HAL_DMA_Init+0x6a0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a42      	ldr	r2, [pc, #264]	@ (8004a30 <HAL_DMA_Init+0x6a4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a41      	ldr	r2, [pc, #260]	@ (8004a34 <HAL_DMA_Init+0x6a8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a3f      	ldr	r2, [pc, #252]	@ (8004a38 <HAL_DMA_Init+0x6ac>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a3e      	ldr	r2, [pc, #248]	@ (8004a3c <HAL_DMA_Init+0x6b0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_Init+0x5c6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a40 <HAL_DMA_Init+0x6b4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d101      	bne.n	8004956 <HAL_DMA_Init+0x5ca>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_DMA_Init+0x5cc>
 8004956:	2300      	movs	r3, #0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d032      	beq.n	80049c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f002 fa43 	bl	8006de8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b80      	cmp	r3, #128	@ 0x80
 8004968:	d102      	bne.n	8004970 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004984:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_DMA_Init+0x624>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d80c      	bhi.n	80049b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f002 fac0 	bl	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	e008      	b.n	80049c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	a7fdabf8 	.word	0xa7fdabf8
 80049e0:	cccccccd 	.word	0xcccccccd
 80049e4:	40020010 	.word	0x40020010
 80049e8:	40020028 	.word	0x40020028
 80049ec:	40020040 	.word	0x40020040
 80049f0:	40020058 	.word	0x40020058
 80049f4:	40020070 	.word	0x40020070
 80049f8:	40020088 	.word	0x40020088
 80049fc:	400200a0 	.word	0x400200a0
 8004a00:	400200b8 	.word	0x400200b8
 8004a04:	40020410 	.word	0x40020410
 8004a08:	40020428 	.word	0x40020428
 8004a0c:	40020440 	.word	0x40020440
 8004a10:	40020458 	.word	0x40020458
 8004a14:	40020470 	.word	0x40020470
 8004a18:	40020488 	.word	0x40020488
 8004a1c:	400204a0 	.word	0x400204a0
 8004a20:	400204b8 	.word	0x400204b8
 8004a24:	58025408 	.word	0x58025408
 8004a28:	5802541c 	.word	0x5802541c
 8004a2c:	58025430 	.word	0x58025430
 8004a30:	58025444 	.word	0x58025444
 8004a34:	58025458 	.word	0x58025458
 8004a38:	5802546c 	.word	0x5802546c
 8004a3c:	58025480 	.word	0x58025480
 8004a40:	58025494 	.word	0x58025494

08004a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e226      	b.n	8004eae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Start_IT+0x2a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e21f      	b.n	8004eae <HAL_DMA_Start_IT+0x46a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	f040 820a 	bne.w	8004e98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a68      	ldr	r2, [pc, #416]	@ (8004c38 <HAL_DMA_Start_IT+0x1f4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d04a      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a66      	ldr	r2, [pc, #408]	@ (8004c3c <HAL_DMA_Start_IT+0x1f8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d045      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a65      	ldr	r2, [pc, #404]	@ (8004c40 <HAL_DMA_Start_IT+0x1fc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d040      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a63      	ldr	r2, [pc, #396]	@ (8004c44 <HAL_DMA_Start_IT+0x200>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d03b      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a62      	ldr	r2, [pc, #392]	@ (8004c48 <HAL_DMA_Start_IT+0x204>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d036      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a60      	ldr	r2, [pc, #384]	@ (8004c4c <HAL_DMA_Start_IT+0x208>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d031      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c50 <HAL_DMA_Start_IT+0x20c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d02c      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c54 <HAL_DMA_Start_IT+0x210>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d027      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c58 <HAL_DMA_Start_IT+0x214>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d022      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c5c <HAL_DMA_Start_IT+0x218>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01d      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a59      	ldr	r2, [pc, #356]	@ (8004c60 <HAL_DMA_Start_IT+0x21c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d018      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a57      	ldr	r2, [pc, #348]	@ (8004c64 <HAL_DMA_Start_IT+0x220>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a56      	ldr	r2, [pc, #344]	@ (8004c68 <HAL_DMA_Start_IT+0x224>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a54      	ldr	r2, [pc, #336]	@ (8004c6c <HAL_DMA_Start_IT+0x228>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a53      	ldr	r2, [pc, #332]	@ (8004c70 <HAL_DMA_Start_IT+0x22c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_DMA_Start_IT+0xee>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	@ (8004c74 <HAL_DMA_Start_IT+0x230>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <HAL_DMA_Start_IT+0x100>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e007      	b.n	8004b54 <HAL_DMA_Start_IT+0x110>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f001 fe6a 	bl	8006834 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a34      	ldr	r2, [pc, #208]	@ (8004c38 <HAL_DMA_Start_IT+0x1f4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d04a      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a33      	ldr	r2, [pc, #204]	@ (8004c3c <HAL_DMA_Start_IT+0x1f8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d045      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a31      	ldr	r2, [pc, #196]	@ (8004c40 <HAL_DMA_Start_IT+0x1fc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d040      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a30      	ldr	r2, [pc, #192]	@ (8004c44 <HAL_DMA_Start_IT+0x200>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d03b      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004c48 <HAL_DMA_Start_IT+0x204>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d036      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2d      	ldr	r2, [pc, #180]	@ (8004c4c <HAL_DMA_Start_IT+0x208>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d031      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c50 <HAL_DMA_Start_IT+0x20c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02c      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2a      	ldr	r2, [pc, #168]	@ (8004c54 <HAL_DMA_Start_IT+0x210>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d027      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a28      	ldr	r2, [pc, #160]	@ (8004c58 <HAL_DMA_Start_IT+0x214>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a27      	ldr	r2, [pc, #156]	@ (8004c5c <HAL_DMA_Start_IT+0x218>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d01d      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a25      	ldr	r2, [pc, #148]	@ (8004c60 <HAL_DMA_Start_IT+0x21c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a24      	ldr	r2, [pc, #144]	@ (8004c64 <HAL_DMA_Start_IT+0x220>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a22      	ldr	r2, [pc, #136]	@ (8004c68 <HAL_DMA_Start_IT+0x224>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a21      	ldr	r2, [pc, #132]	@ (8004c6c <HAL_DMA_Start_IT+0x228>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c70 <HAL_DMA_Start_IT+0x22c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_Start_IT+0x1bc>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004c74 <HAL_DMA_Start_IT+0x230>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_DMA_Start_IT+0x1c0>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_DMA_Start_IT+0x1c2>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d036      	beq.n	8004c78 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 021e 	bic.w	r2, r3, #30
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0216 	orr.w	r2, r2, #22
 8004c1c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d03e      	beq.n	8004ca4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0208 	orr.w	r2, r2, #8
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e035      	b.n	8004ca4 <HAL_DMA_Start_IT+0x260>
 8004c38:	40020010 	.word	0x40020010
 8004c3c:	40020028 	.word	0x40020028
 8004c40:	40020040 	.word	0x40020040
 8004c44:	40020058 	.word	0x40020058
 8004c48:	40020070 	.word	0x40020070
 8004c4c:	40020088 	.word	0x40020088
 8004c50:	400200a0 	.word	0x400200a0
 8004c54:	400200b8 	.word	0x400200b8
 8004c58:	40020410 	.word	0x40020410
 8004c5c:	40020428 	.word	0x40020428
 8004c60:	40020440 	.word	0x40020440
 8004c64:	40020458 	.word	0x40020458
 8004c68:	40020470 	.word	0x40020470
 8004c6c:	40020488 	.word	0x40020488
 8004c70:	400204a0 	.word	0x400204a0
 8004c74:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 020e 	bic.w	r2, r3, #14
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 020a 	orr.w	r2, r2, #10
 8004c8a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0204 	orr.w	r2, r2, #4
 8004ca2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a83      	ldr	r2, [pc, #524]	@ (8004eb8 <HAL_DMA_Start_IT+0x474>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d072      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a82      	ldr	r2, [pc, #520]	@ (8004ebc <HAL_DMA_Start_IT+0x478>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d06d      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a80      	ldr	r2, [pc, #512]	@ (8004ec0 <HAL_DMA_Start_IT+0x47c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d068      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7f      	ldr	r2, [pc, #508]	@ (8004ec4 <HAL_DMA_Start_IT+0x480>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d063      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a7d      	ldr	r2, [pc, #500]	@ (8004ec8 <HAL_DMA_Start_IT+0x484>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d05e      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7c      	ldr	r2, [pc, #496]	@ (8004ecc <HAL_DMA_Start_IT+0x488>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d059      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ed0 <HAL_DMA_Start_IT+0x48c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d054      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a79      	ldr	r2, [pc, #484]	@ (8004ed4 <HAL_DMA_Start_IT+0x490>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d04f      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a77      	ldr	r2, [pc, #476]	@ (8004ed8 <HAL_DMA_Start_IT+0x494>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d04a      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a76      	ldr	r2, [pc, #472]	@ (8004edc <HAL_DMA_Start_IT+0x498>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d045      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a74      	ldr	r2, [pc, #464]	@ (8004ee0 <HAL_DMA_Start_IT+0x49c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d040      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a73      	ldr	r2, [pc, #460]	@ (8004ee4 <HAL_DMA_Start_IT+0x4a0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d03b      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a71      	ldr	r2, [pc, #452]	@ (8004ee8 <HAL_DMA_Start_IT+0x4a4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d036      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a70      	ldr	r2, [pc, #448]	@ (8004eec <HAL_DMA_Start_IT+0x4a8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d031      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6e      	ldr	r2, [pc, #440]	@ (8004ef0 <HAL_DMA_Start_IT+0x4ac>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d02c      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ef4 <HAL_DMA_Start_IT+0x4b0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d027      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a6b      	ldr	r2, [pc, #428]	@ (8004ef8 <HAL_DMA_Start_IT+0x4b4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6a      	ldr	r2, [pc, #424]	@ (8004efc <HAL_DMA_Start_IT+0x4b8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a68      	ldr	r2, [pc, #416]	@ (8004f00 <HAL_DMA_Start_IT+0x4bc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a67      	ldr	r2, [pc, #412]	@ (8004f04 <HAL_DMA_Start_IT+0x4c0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a65      	ldr	r2, [pc, #404]	@ (8004f08 <HAL_DMA_Start_IT+0x4c4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a64      	ldr	r2, [pc, #400]	@ (8004f0c <HAL_DMA_Start_IT+0x4c8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a62      	ldr	r2, [pc, #392]	@ (8004f10 <HAL_DMA_Start_IT+0x4cc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_DMA_Start_IT+0x350>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a61      	ldr	r2, [pc, #388]	@ (8004f14 <HAL_DMA_Start_IT+0x4d0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Start_IT+0x354>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_DMA_Start_IT+0x356>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dd2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a37      	ldr	r2, [pc, #220]	@ (8004eb8 <HAL_DMA_Start_IT+0x474>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d04a      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a36      	ldr	r2, [pc, #216]	@ (8004ebc <HAL_DMA_Start_IT+0x478>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d045      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a34      	ldr	r2, [pc, #208]	@ (8004ec0 <HAL_DMA_Start_IT+0x47c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d040      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a33      	ldr	r2, [pc, #204]	@ (8004ec4 <HAL_DMA_Start_IT+0x480>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d03b      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a31      	ldr	r2, [pc, #196]	@ (8004ec8 <HAL_DMA_Start_IT+0x484>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d036      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a30      	ldr	r2, [pc, #192]	@ (8004ecc <HAL_DMA_Start_IT+0x488>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d031      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed0 <HAL_DMA_Start_IT+0x48c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d02c      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed4 <HAL_DMA_Start_IT+0x490>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d027      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed8 <HAL_DMA_Start_IT+0x494>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <HAL_DMA_Start_IT+0x498>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d01d      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a28      	ldr	r2, [pc, #160]	@ (8004ee0 <HAL_DMA_Start_IT+0x49c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <HAL_DMA_Start_IT+0x4a0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a25      	ldr	r2, [pc, #148]	@ (8004ee8 <HAL_DMA_Start_IT+0x4a4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a24      	ldr	r2, [pc, #144]	@ (8004eec <HAL_DMA_Start_IT+0x4a8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a22      	ldr	r2, [pc, #136]	@ (8004ef0 <HAL_DMA_Start_IT+0x4ac>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_DMA_Start_IT+0x430>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	@ (8004ef4 <HAL_DMA_Start_IT+0x4b0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d108      	bne.n	8004e86 <HAL_DMA_Start_IT+0x442>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e012      	b.n	8004eac <HAL_DMA_Start_IT+0x468>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e009      	b.n	8004eac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40020010 	.word	0x40020010
 8004ebc:	40020028 	.word	0x40020028
 8004ec0:	40020040 	.word	0x40020040
 8004ec4:	40020058 	.word	0x40020058
 8004ec8:	40020070 	.word	0x40020070
 8004ecc:	40020088 	.word	0x40020088
 8004ed0:	400200a0 	.word	0x400200a0
 8004ed4:	400200b8 	.word	0x400200b8
 8004ed8:	40020410 	.word	0x40020410
 8004edc:	40020428 	.word	0x40020428
 8004ee0:	40020440 	.word	0x40020440
 8004ee4:	40020458 	.word	0x40020458
 8004ee8:	40020470 	.word	0x40020470
 8004eec:	40020488 	.word	0x40020488
 8004ef0:	400204a0 	.word	0x400204a0
 8004ef4:	400204b8 	.word	0x400204b8
 8004ef8:	58025408 	.word	0x58025408
 8004efc:	5802541c 	.word	0x5802541c
 8004f00:	58025430 	.word	0x58025430
 8004f04:	58025444 	.word	0x58025444
 8004f08:	58025458 	.word	0x58025458
 8004f0c:	5802546c 	.word	0x5802546c
 8004f10:	58025480 	.word	0x58025480
 8004f14:	58025494 	.word	0x58025494

08004f18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004f20:	f7fd f83e 	bl	8001fa0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e2dc      	b.n	80054ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d008      	beq.n	8004f4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2280      	movs	r2, #128	@ 0x80
 8004f40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e2cd      	b.n	80054ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a76      	ldr	r2, [pc, #472]	@ (800512c <HAL_DMA_Abort+0x214>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d04a      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a74      	ldr	r2, [pc, #464]	@ (8005130 <HAL_DMA_Abort+0x218>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d045      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a73      	ldr	r2, [pc, #460]	@ (8005134 <HAL_DMA_Abort+0x21c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d040      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a71      	ldr	r2, [pc, #452]	@ (8005138 <HAL_DMA_Abort+0x220>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d03b      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a70      	ldr	r2, [pc, #448]	@ (800513c <HAL_DMA_Abort+0x224>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d036      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6e      	ldr	r2, [pc, #440]	@ (8005140 <HAL_DMA_Abort+0x228>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d031      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8005144 <HAL_DMA_Abort+0x22c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d02c      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6b      	ldr	r2, [pc, #428]	@ (8005148 <HAL_DMA_Abort+0x230>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d027      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6a      	ldr	r2, [pc, #424]	@ (800514c <HAL_DMA_Abort+0x234>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a68      	ldr	r2, [pc, #416]	@ (8005150 <HAL_DMA_Abort+0x238>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a67      	ldr	r2, [pc, #412]	@ (8005154 <HAL_DMA_Abort+0x23c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a65      	ldr	r2, [pc, #404]	@ (8005158 <HAL_DMA_Abort+0x240>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a64      	ldr	r2, [pc, #400]	@ (800515c <HAL_DMA_Abort+0x244>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a62      	ldr	r2, [pc, #392]	@ (8005160 <HAL_DMA_Abort+0x248>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a61      	ldr	r2, [pc, #388]	@ (8005164 <HAL_DMA_Abort+0x24c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_DMA_Abort+0xd6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8005168 <HAL_DMA_Abort+0x250>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <HAL_DMA_Abort+0xda>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <HAL_DMA_Abort+0xdc>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 021e 	bic.w	r2, r2, #30
 8005006:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005016:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e00a      	b.n	8005036 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 020e 	bic.w	r2, r2, #14
 800502e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3c      	ldr	r2, [pc, #240]	@ (800512c <HAL_DMA_Abort+0x214>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d072      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3a      	ldr	r2, [pc, #232]	@ (8005130 <HAL_DMA_Abort+0x218>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d06d      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a39      	ldr	r2, [pc, #228]	@ (8005134 <HAL_DMA_Abort+0x21c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d068      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a37      	ldr	r2, [pc, #220]	@ (8005138 <HAL_DMA_Abort+0x220>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d063      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a36      	ldr	r2, [pc, #216]	@ (800513c <HAL_DMA_Abort+0x224>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d05e      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a34      	ldr	r2, [pc, #208]	@ (8005140 <HAL_DMA_Abort+0x228>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d059      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a33      	ldr	r2, [pc, #204]	@ (8005144 <HAL_DMA_Abort+0x22c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d054      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a31      	ldr	r2, [pc, #196]	@ (8005148 <HAL_DMA_Abort+0x230>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d04f      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a30      	ldr	r2, [pc, #192]	@ (800514c <HAL_DMA_Abort+0x234>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d04a      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2e      	ldr	r2, [pc, #184]	@ (8005150 <HAL_DMA_Abort+0x238>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d045      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2d      	ldr	r2, [pc, #180]	@ (8005154 <HAL_DMA_Abort+0x23c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d040      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005158 <HAL_DMA_Abort+0x240>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d03b      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2a      	ldr	r2, [pc, #168]	@ (800515c <HAL_DMA_Abort+0x244>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d036      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a28      	ldr	r2, [pc, #160]	@ (8005160 <HAL_DMA_Abort+0x248>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d031      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a27      	ldr	r2, [pc, #156]	@ (8005164 <HAL_DMA_Abort+0x24c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d02c      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a25      	ldr	r2, [pc, #148]	@ (8005168 <HAL_DMA_Abort+0x250>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d027      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a24      	ldr	r2, [pc, #144]	@ (800516c <HAL_DMA_Abort+0x254>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d022      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a22      	ldr	r2, [pc, #136]	@ (8005170 <HAL_DMA_Abort+0x258>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01d      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	@ (8005174 <HAL_DMA_Abort+0x25c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d018      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <HAL_DMA_Abort+0x260>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	@ (800517c <HAL_DMA_Abort+0x264>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00e      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <HAL_DMA_Abort+0x268>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	@ (8005184 <HAL_DMA_Abort+0x26c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_DMA_Abort+0x20e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <HAL_DMA_Abort+0x270>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d132      	bne.n	800518c <HAL_DMA_Abort+0x274>
 8005126:	2301      	movs	r3, #1
 8005128:	e031      	b.n	800518e <HAL_DMA_Abort+0x276>
 800512a:	bf00      	nop
 800512c:	40020010 	.word	0x40020010
 8005130:	40020028 	.word	0x40020028
 8005134:	40020040 	.word	0x40020040
 8005138:	40020058 	.word	0x40020058
 800513c:	40020070 	.word	0x40020070
 8005140:	40020088 	.word	0x40020088
 8005144:	400200a0 	.word	0x400200a0
 8005148:	400200b8 	.word	0x400200b8
 800514c:	40020410 	.word	0x40020410
 8005150:	40020428 	.word	0x40020428
 8005154:	40020440 	.word	0x40020440
 8005158:	40020458 	.word	0x40020458
 800515c:	40020470 	.word	0x40020470
 8005160:	40020488 	.word	0x40020488
 8005164:	400204a0 	.word	0x400204a0
 8005168:	400204b8 	.word	0x400204b8
 800516c:	58025408 	.word	0x58025408
 8005170:	5802541c 	.word	0x5802541c
 8005174:	58025430 	.word	0x58025430
 8005178:	58025444 	.word	0x58025444
 800517c:	58025458 	.word	0x58025458
 8005180:	5802546c 	.word	0x5802546c
 8005184:	58025480 	.word	0x58025480
 8005188:	58025494 	.word	0x58025494
 800518c:	2300      	movs	r3, #0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a6d      	ldr	r2, [pc, #436]	@ (800535c <HAL_DMA_Abort+0x444>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d04a      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005360 <HAL_DMA_Abort+0x448>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d045      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005364 <HAL_DMA_Abort+0x44c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d040      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a68      	ldr	r2, [pc, #416]	@ (8005368 <HAL_DMA_Abort+0x450>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d03b      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a67      	ldr	r2, [pc, #412]	@ (800536c <HAL_DMA_Abort+0x454>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d036      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a65      	ldr	r2, [pc, #404]	@ (8005370 <HAL_DMA_Abort+0x458>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d031      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a64      	ldr	r2, [pc, #400]	@ (8005374 <HAL_DMA_Abort+0x45c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d02c      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a62      	ldr	r2, [pc, #392]	@ (8005378 <HAL_DMA_Abort+0x460>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d027      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a61      	ldr	r2, [pc, #388]	@ (800537c <HAL_DMA_Abort+0x464>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d022      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a5f      	ldr	r2, [pc, #380]	@ (8005380 <HAL_DMA_Abort+0x468>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01d      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a5e      	ldr	r2, [pc, #376]	@ (8005384 <HAL_DMA_Abort+0x46c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a5c      	ldr	r2, [pc, #368]	@ (8005388 <HAL_DMA_Abort+0x470>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a5b      	ldr	r2, [pc, #364]	@ (800538c <HAL_DMA_Abort+0x474>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a59      	ldr	r2, [pc, #356]	@ (8005390 <HAL_DMA_Abort+0x478>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a58      	ldr	r2, [pc, #352]	@ (8005394 <HAL_DMA_Abort+0x47c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_DMA_Abort+0x32a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a56      	ldr	r2, [pc, #344]	@ (8005398 <HAL_DMA_Abort+0x480>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <HAL_DMA_Abort+0x33c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e007      	b.n	8005264 <HAL_DMA_Abort+0x34c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005264:	e013      	b.n	800528e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005266:	f7fc fe9b 	bl	8001fa0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b05      	cmp	r3, #5
 8005272:	d90c      	bls.n	800528e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2203      	movs	r2, #3
 800527e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e12d      	b.n	80054ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2f      	ldr	r2, [pc, #188]	@ (800535c <HAL_DMA_Abort+0x444>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005360 <HAL_DMA_Abort+0x448>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005364 <HAL_DMA_Abort+0x44c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005368 <HAL_DMA_Abort+0x450>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a29      	ldr	r2, [pc, #164]	@ (800536c <HAL_DMA_Abort+0x454>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a27      	ldr	r2, [pc, #156]	@ (8005370 <HAL_DMA_Abort+0x458>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a26      	ldr	r2, [pc, #152]	@ (8005374 <HAL_DMA_Abort+0x45c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <HAL_DMA_Abort+0x460>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a23      	ldr	r2, [pc, #140]	@ (800537c <HAL_DMA_Abort+0x464>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a21      	ldr	r2, [pc, #132]	@ (8005380 <HAL_DMA_Abort+0x468>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_Abort+0x422>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <HAL_DMA_Abort+0x46c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_Abort+0x422>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <HAL_DMA_Abort+0x470>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_Abort+0x422>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <HAL_DMA_Abort+0x474>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_Abort+0x422>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <HAL_DMA_Abort+0x478>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_Abort+0x422>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1a      	ldr	r2, [pc, #104]	@ (8005394 <HAL_DMA_Abort+0x47c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_Abort+0x422>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_DMA_Abort+0x480>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_DMA_Abort+0x426>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_DMA_Abort+0x428>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02b      	beq.n	800539c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	223f      	movs	r2, #63	@ 0x3f
 8005354:	409a      	lsls	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	e02a      	b.n	80053b2 <HAL_DMA_Abort+0x49a>
 800535c:	40020010 	.word	0x40020010
 8005360:	40020028 	.word	0x40020028
 8005364:	40020040 	.word	0x40020040
 8005368:	40020058 	.word	0x40020058
 800536c:	40020070 	.word	0x40020070
 8005370:	40020088 	.word	0x40020088
 8005374:	400200a0 	.word	0x400200a0
 8005378:	400200b8 	.word	0x400200b8
 800537c:	40020410 	.word	0x40020410
 8005380:	40020428 	.word	0x40020428
 8005384:	40020440 	.word	0x40020440
 8005388:	40020458 	.word	0x40020458
 800538c:	40020470 	.word	0x40020470
 8005390:	40020488 	.word	0x40020488
 8005394:	400204a0 	.word	0x400204a0
 8005398:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2201      	movs	r2, #1
 80053ac:	409a      	lsls	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a4f      	ldr	r2, [pc, #316]	@ (80054f4 <HAL_DMA_Abort+0x5dc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d072      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a4d      	ldr	r2, [pc, #308]	@ (80054f8 <HAL_DMA_Abort+0x5e0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d06d      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a4c      	ldr	r2, [pc, #304]	@ (80054fc <HAL_DMA_Abort+0x5e4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d068      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005500 <HAL_DMA_Abort+0x5e8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d063      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a49      	ldr	r2, [pc, #292]	@ (8005504 <HAL_DMA_Abort+0x5ec>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d05e      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a47      	ldr	r2, [pc, #284]	@ (8005508 <HAL_DMA_Abort+0x5f0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d059      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a46      	ldr	r2, [pc, #280]	@ (800550c <HAL_DMA_Abort+0x5f4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d054      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a44      	ldr	r2, [pc, #272]	@ (8005510 <HAL_DMA_Abort+0x5f8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d04f      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a43      	ldr	r2, [pc, #268]	@ (8005514 <HAL_DMA_Abort+0x5fc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d04a      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a41      	ldr	r2, [pc, #260]	@ (8005518 <HAL_DMA_Abort+0x600>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d045      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a40      	ldr	r2, [pc, #256]	@ (800551c <HAL_DMA_Abort+0x604>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d040      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3e      	ldr	r2, [pc, #248]	@ (8005520 <HAL_DMA_Abort+0x608>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d03b      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3d      	ldr	r2, [pc, #244]	@ (8005524 <HAL_DMA_Abort+0x60c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d036      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a3b      	ldr	r2, [pc, #236]	@ (8005528 <HAL_DMA_Abort+0x610>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d031      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a3a      	ldr	r2, [pc, #232]	@ (800552c <HAL_DMA_Abort+0x614>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d02c      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a38      	ldr	r2, [pc, #224]	@ (8005530 <HAL_DMA_Abort+0x618>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d027      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a37      	ldr	r2, [pc, #220]	@ (8005534 <HAL_DMA_Abort+0x61c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d022      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a35      	ldr	r2, [pc, #212]	@ (8005538 <HAL_DMA_Abort+0x620>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01d      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a34      	ldr	r2, [pc, #208]	@ (800553c <HAL_DMA_Abort+0x624>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d018      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a32      	ldr	r2, [pc, #200]	@ (8005540 <HAL_DMA_Abort+0x628>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a31      	ldr	r2, [pc, #196]	@ (8005544 <HAL_DMA_Abort+0x62c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00e      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2f      	ldr	r2, [pc, #188]	@ (8005548 <HAL_DMA_Abort+0x630>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d009      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2e      	ldr	r2, [pc, #184]	@ (800554c <HAL_DMA_Abort+0x634>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_DMA_Abort+0x58a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2c      	ldr	r2, [pc, #176]	@ (8005550 <HAL_DMA_Abort+0x638>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_DMA_Abort+0x58e>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <HAL_DMA_Abort+0x590>
 80054a6:	2300      	movs	r3, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d015      	beq.n	80054d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8
 8005534:	58025408 	.word	0x58025408
 8005538:	5802541c 	.word	0x5802541c
 800553c:	58025430 	.word	0x58025430
 8005540:	58025444 	.word	0x58025444
 8005544:	58025458 	.word	0x58025458
 8005548:	5802546c 	.word	0x5802546c
 800554c:	58025480 	.word	0x58025480
 8005550:	58025494 	.word	0x58025494

08005554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e237      	b.n	80059d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d004      	beq.n	800557c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2280      	movs	r2, #128	@ 0x80
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e22c      	b.n	80059d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5c      	ldr	r2, [pc, #368]	@ (80056f4 <HAL_DMA_Abort_IT+0x1a0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d04a      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5b      	ldr	r2, [pc, #364]	@ (80056f8 <HAL_DMA_Abort_IT+0x1a4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d045      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a59      	ldr	r2, [pc, #356]	@ (80056fc <HAL_DMA_Abort_IT+0x1a8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d040      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_DMA_Abort_IT+0x1ac>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d03b      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a56      	ldr	r2, [pc, #344]	@ (8005704 <HAL_DMA_Abort_IT+0x1b0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d036      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a55      	ldr	r2, [pc, #340]	@ (8005708 <HAL_DMA_Abort_IT+0x1b4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d031      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a53      	ldr	r2, [pc, #332]	@ (800570c <HAL_DMA_Abort_IT+0x1b8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02c      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a52      	ldr	r2, [pc, #328]	@ (8005710 <HAL_DMA_Abort_IT+0x1bc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d027      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a50      	ldr	r2, [pc, #320]	@ (8005714 <HAL_DMA_Abort_IT+0x1c0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d022      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a4f      	ldr	r2, [pc, #316]	@ (8005718 <HAL_DMA_Abort_IT+0x1c4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d01d      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a4d      	ldr	r2, [pc, #308]	@ (800571c <HAL_DMA_Abort_IT+0x1c8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005720 <HAL_DMA_Abort_IT+0x1cc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005724 <HAL_DMA_Abort_IT+0x1d0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a49      	ldr	r2, [pc, #292]	@ (8005728 <HAL_DMA_Abort_IT+0x1d4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a47      	ldr	r2, [pc, #284]	@ (800572c <HAL_DMA_Abort_IT+0x1d8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_DMA_Abort_IT+0xc8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a46      	ldr	r2, [pc, #280]	@ (8005730 <HAL_DMA_Abort_IT+0x1dc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d101      	bne.n	8005620 <HAL_DMA_Abort_IT+0xcc>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_DMA_Abort_IT+0xce>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8086 	beq.w	8005734 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2204      	movs	r2, #4
 800562c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2f      	ldr	r2, [pc, #188]	@ (80056f4 <HAL_DMA_Abort_IT+0x1a0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04a      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <HAL_DMA_Abort_IT+0x1a4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d045      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2c      	ldr	r2, [pc, #176]	@ (80056fc <HAL_DMA_Abort_IT+0x1a8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d040      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2b      	ldr	r2, [pc, #172]	@ (8005700 <HAL_DMA_Abort_IT+0x1ac>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d03b      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a29      	ldr	r2, [pc, #164]	@ (8005704 <HAL_DMA_Abort_IT+0x1b0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d036      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <HAL_DMA_Abort_IT+0x1b4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d031      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a26      	ldr	r2, [pc, #152]	@ (800570c <HAL_DMA_Abort_IT+0x1b8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02c      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a25      	ldr	r2, [pc, #148]	@ (8005710 <HAL_DMA_Abort_IT+0x1bc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d027      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a23      	ldr	r2, [pc, #140]	@ (8005714 <HAL_DMA_Abort_IT+0x1c0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a22      	ldr	r2, [pc, #136]	@ (8005718 <HAL_DMA_Abort_IT+0x1c4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d01d      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a20      	ldr	r2, [pc, #128]	@ (800571c <HAL_DMA_Abort_IT+0x1c8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005720 <HAL_DMA_Abort_IT+0x1cc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <HAL_DMA_Abort_IT+0x1d0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <HAL_DMA_Abort_IT+0x1d4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <HAL_DMA_Abort_IT+0x1d8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x17c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <HAL_DMA_Abort_IT+0x1dc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <HAL_DMA_Abort_IT+0x18e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e178      	b.n	80059d4 <HAL_DMA_Abort_IT+0x480>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e16f      	b.n	80059d4 <HAL_DMA_Abort_IT+0x480>
 80056f4:	40020010 	.word	0x40020010
 80056f8:	40020028 	.word	0x40020028
 80056fc:	40020040 	.word	0x40020040
 8005700:	40020058 	.word	0x40020058
 8005704:	40020070 	.word	0x40020070
 8005708:	40020088 	.word	0x40020088
 800570c:	400200a0 	.word	0x400200a0
 8005710:	400200b8 	.word	0x400200b8
 8005714:	40020410 	.word	0x40020410
 8005718:	40020428 	.word	0x40020428
 800571c:	40020440 	.word	0x40020440
 8005720:	40020458 	.word	0x40020458
 8005724:	40020470 	.word	0x40020470
 8005728:	40020488 	.word	0x40020488
 800572c:	400204a0 	.word	0x400204a0
 8005730:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 020e 	bic.w	r2, r2, #14
 8005742:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a6c      	ldr	r2, [pc, #432]	@ (80058fc <HAL_DMA_Abort_IT+0x3a8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d04a      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6b      	ldr	r2, [pc, #428]	@ (8005900 <HAL_DMA_Abort_IT+0x3ac>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d045      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a69      	ldr	r2, [pc, #420]	@ (8005904 <HAL_DMA_Abort_IT+0x3b0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d040      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a68      	ldr	r2, [pc, #416]	@ (8005908 <HAL_DMA_Abort_IT+0x3b4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d03b      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a66      	ldr	r2, [pc, #408]	@ (800590c <HAL_DMA_Abort_IT+0x3b8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d036      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a65      	ldr	r2, [pc, #404]	@ (8005910 <HAL_DMA_Abort_IT+0x3bc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d031      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a63      	ldr	r2, [pc, #396]	@ (8005914 <HAL_DMA_Abort_IT+0x3c0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d02c      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a62      	ldr	r2, [pc, #392]	@ (8005918 <HAL_DMA_Abort_IT+0x3c4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d027      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a60      	ldr	r2, [pc, #384]	@ (800591c <HAL_DMA_Abort_IT+0x3c8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d022      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a5f      	ldr	r2, [pc, #380]	@ (8005920 <HAL_DMA_Abort_IT+0x3cc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d01d      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005924 <HAL_DMA_Abort_IT+0x3d0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d018      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005928 <HAL_DMA_Abort_IT+0x3d4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a5a      	ldr	r2, [pc, #360]	@ (800592c <HAL_DMA_Abort_IT+0x3d8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00e      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a59      	ldr	r2, [pc, #356]	@ (8005930 <HAL_DMA_Abort_IT+0x3dc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a57      	ldr	r2, [pc, #348]	@ (8005934 <HAL_DMA_Abort_IT+0x3e0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x290>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a56      	ldr	r2, [pc, #344]	@ (8005938 <HAL_DMA_Abort_IT+0x3e4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d108      	bne.n	80057f6 <HAL_DMA_Abort_IT+0x2a2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e007      	b.n	8005806 <HAL_DMA_Abort_IT+0x2b2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a3c      	ldr	r2, [pc, #240]	@ (80058fc <HAL_DMA_Abort_IT+0x3a8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d072      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3a      	ldr	r2, [pc, #232]	@ (8005900 <HAL_DMA_Abort_IT+0x3ac>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d06d      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a39      	ldr	r2, [pc, #228]	@ (8005904 <HAL_DMA_Abort_IT+0x3b0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d068      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a37      	ldr	r2, [pc, #220]	@ (8005908 <HAL_DMA_Abort_IT+0x3b4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d063      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a36      	ldr	r2, [pc, #216]	@ (800590c <HAL_DMA_Abort_IT+0x3b8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d05e      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a34      	ldr	r2, [pc, #208]	@ (8005910 <HAL_DMA_Abort_IT+0x3bc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d059      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a33      	ldr	r2, [pc, #204]	@ (8005914 <HAL_DMA_Abort_IT+0x3c0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d054      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a31      	ldr	r2, [pc, #196]	@ (8005918 <HAL_DMA_Abort_IT+0x3c4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04f      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a30      	ldr	r2, [pc, #192]	@ (800591c <HAL_DMA_Abort_IT+0x3c8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04a      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a2e      	ldr	r2, [pc, #184]	@ (8005920 <HAL_DMA_Abort_IT+0x3cc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d045      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a2d      	ldr	r2, [pc, #180]	@ (8005924 <HAL_DMA_Abort_IT+0x3d0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d040      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2b      	ldr	r2, [pc, #172]	@ (8005928 <HAL_DMA_Abort_IT+0x3d4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d03b      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2a      	ldr	r2, [pc, #168]	@ (800592c <HAL_DMA_Abort_IT+0x3d8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d036      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a28      	ldr	r2, [pc, #160]	@ (8005930 <HAL_DMA_Abort_IT+0x3dc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a27      	ldr	r2, [pc, #156]	@ (8005934 <HAL_DMA_Abort_IT+0x3e0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d02c      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a25      	ldr	r2, [pc, #148]	@ (8005938 <HAL_DMA_Abort_IT+0x3e4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d027      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a24      	ldr	r2, [pc, #144]	@ (800593c <HAL_DMA_Abort_IT+0x3e8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a22      	ldr	r2, [pc, #136]	@ (8005940 <HAL_DMA_Abort_IT+0x3ec>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <HAL_DMA_Abort_IT+0x3f0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005948 <HAL_DMA_Abort_IT+0x3f4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	@ (800594c <HAL_DMA_Abort_IT+0x3f8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005950 <HAL_DMA_Abort_IT+0x3fc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005954 <HAL_DMA_Abort_IT+0x400>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_DMA_Abort_IT+0x3a2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <HAL_DMA_Abort_IT+0x404>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d132      	bne.n	800595c <HAL_DMA_Abort_IT+0x408>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e031      	b.n	800595e <HAL_DMA_Abort_IT+0x40a>
 80058fa:	bf00      	nop
 80058fc:	40020010 	.word	0x40020010
 8005900:	40020028 	.word	0x40020028
 8005904:	40020040 	.word	0x40020040
 8005908:	40020058 	.word	0x40020058
 800590c:	40020070 	.word	0x40020070
 8005910:	40020088 	.word	0x40020088
 8005914:	400200a0 	.word	0x400200a0
 8005918:	400200b8 	.word	0x400200b8
 800591c:	40020410 	.word	0x40020410
 8005920:	40020428 	.word	0x40020428
 8005924:	40020440 	.word	0x40020440
 8005928:	40020458 	.word	0x40020458
 800592c:	40020470 	.word	0x40020470
 8005930:	40020488 	.word	0x40020488
 8005934:	400204a0 	.word	0x400204a0
 8005938:	400204b8 	.word	0x400204b8
 800593c:	58025408 	.word	0x58025408
 8005940:	5802541c 	.word	0x5802541c
 8005944:	58025430 	.word	0x58025430
 8005948:	58025444 	.word	0x58025444
 800594c:	58025458 	.word	0x58025458
 8005950:	5802546c 	.word	0x5802546c
 8005954:	58025480 	.word	0x58025480
 8005958:	58025494 	.word	0x58025494
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d028      	beq.n	80059b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005970:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005976:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2201      	movs	r2, #1
 8005982:	409a      	lsls	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005990:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80059b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop

080059e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	@ 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059ec:	4b67      	ldr	r3, [pc, #412]	@ (8005b8c <HAL_DMA_IRQHandler+0x1ac>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a67      	ldr	r2, [pc, #412]	@ (8005b90 <HAL_DMA_IRQHandler+0x1b0>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	0a9b      	lsrs	r3, r3, #10
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a5f      	ldr	r2, [pc, #380]	@ (8005b94 <HAL_DMA_IRQHandler+0x1b4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d04a      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5d      	ldr	r2, [pc, #372]	@ (8005b98 <HAL_DMA_IRQHandler+0x1b8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d045      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8005b9c <HAL_DMA_IRQHandler+0x1bc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d040      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5a      	ldr	r2, [pc, #360]	@ (8005ba0 <HAL_DMA_IRQHandler+0x1c0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d03b      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a59      	ldr	r2, [pc, #356]	@ (8005ba4 <HAL_DMA_IRQHandler+0x1c4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d036      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a57      	ldr	r2, [pc, #348]	@ (8005ba8 <HAL_DMA_IRQHandler+0x1c8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d031      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a56      	ldr	r2, [pc, #344]	@ (8005bac <HAL_DMA_IRQHandler+0x1cc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d02c      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a54      	ldr	r2, [pc, #336]	@ (8005bb0 <HAL_DMA_IRQHandler+0x1d0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d027      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a53      	ldr	r2, [pc, #332]	@ (8005bb4 <HAL_DMA_IRQHandler+0x1d4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a51      	ldr	r2, [pc, #324]	@ (8005bb8 <HAL_DMA_IRQHandler+0x1d8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a50      	ldr	r2, [pc, #320]	@ (8005bbc <HAL_DMA_IRQHandler+0x1dc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a4e      	ldr	r2, [pc, #312]	@ (8005bc0 <HAL_DMA_IRQHandler+0x1e0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a4d      	ldr	r2, [pc, #308]	@ (8005bc4 <HAL_DMA_IRQHandler+0x1e4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a4b      	ldr	r2, [pc, #300]	@ (8005bc8 <HAL_DMA_IRQHandler+0x1e8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4a      	ldr	r2, [pc, #296]	@ (8005bcc <HAL_DMA_IRQHandler+0x1ec>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xd2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a48      	ldr	r2, [pc, #288]	@ (8005bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0xd6>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <HAL_DMA_IRQHandler+0xd8>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 842b 	beq.w	8006314 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80a2 	beq.w	8005c18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8005b94 <HAL_DMA_IRQHandler+0x1b4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d04a      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b98 <HAL_DMA_IRQHandler+0x1b8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d045      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2b      	ldr	r2, [pc, #172]	@ (8005b9c <HAL_DMA_IRQHandler+0x1bc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2a      	ldr	r2, [pc, #168]	@ (8005ba0 <HAL_DMA_IRQHandler+0x1c0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d03b      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a28      	ldr	r2, [pc, #160]	@ (8005ba4 <HAL_DMA_IRQHandler+0x1c4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d036      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a27      	ldr	r2, [pc, #156]	@ (8005ba8 <HAL_DMA_IRQHandler+0x1c8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d031      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a25      	ldr	r2, [pc, #148]	@ (8005bac <HAL_DMA_IRQHandler+0x1cc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02c      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a24      	ldr	r2, [pc, #144]	@ (8005bb0 <HAL_DMA_IRQHandler+0x1d0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d027      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a22      	ldr	r2, [pc, #136]	@ (8005bb4 <HAL_DMA_IRQHandler+0x1d4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a21      	ldr	r2, [pc, #132]	@ (8005bb8 <HAL_DMA_IRQHandler+0x1d8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d01d      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <HAL_DMA_IRQHandler+0x1dc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc0 <HAL_DMA_IRQHandler+0x1e0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <HAL_DMA_IRQHandler+0x1e4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc8 <HAL_DMA_IRQHandler+0x1e8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <HAL_DMA_IRQHandler+0x1ec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x194>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d12f      	bne.n	8005bd4 <HAL_DMA_IRQHandler+0x1f4>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	e02e      	b.n	8005be8 <HAL_DMA_IRQHandler+0x208>
 8005b8a:	bf00      	nop
 8005b8c:	2400002c 	.word	0x2400002c
 8005b90:	1b4e81b5 	.word	0x1b4e81b5
 8005b94:	40020010 	.word	0x40020010
 8005b98:	40020028 	.word	0x40020028
 8005b9c:	40020040 	.word	0x40020040
 8005ba0:	40020058 	.word	0x40020058
 8005ba4:	40020070 	.word	0x40020070
 8005ba8:	40020088 	.word	0x40020088
 8005bac:	400200a0 	.word	0x400200a0
 8005bb0:	400200b8 	.word	0x400200b8
 8005bb4:	40020410 	.word	0x40020410
 8005bb8:	40020428 	.word	0x40020428
 8005bbc:	40020440 	.word	0x40020440
 8005bc0:	40020458 	.word	0x40020458
 8005bc4:	40020470 	.word	0x40020470
 8005bc8:	40020488 	.word	0x40020488
 8005bcc:	400204a0 	.word	0x400204a0
 8005bd0:	400204b8 	.word	0x400204b8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf14      	ite	ne
 8005be2:	2301      	movne	r3, #1
 8005be4:	2300      	moveq	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2208      	movs	r2, #8
 8005c06:	409a      	lsls	r2, r3
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c10:	f043 0201 	orr.w	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d06e      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a69      	ldr	r2, [pc, #420]	@ (8005dd8 <HAL_DMA_IRQHandler+0x3f8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d04a      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a67      	ldr	r2, [pc, #412]	@ (8005ddc <HAL_DMA_IRQHandler+0x3fc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d045      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a66      	ldr	r2, [pc, #408]	@ (8005de0 <HAL_DMA_IRQHandler+0x400>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d040      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a64      	ldr	r2, [pc, #400]	@ (8005de4 <HAL_DMA_IRQHandler+0x404>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d03b      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a63      	ldr	r2, [pc, #396]	@ (8005de8 <HAL_DMA_IRQHandler+0x408>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d036      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a61      	ldr	r2, [pc, #388]	@ (8005dec <HAL_DMA_IRQHandler+0x40c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d031      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a60      	ldr	r2, [pc, #384]	@ (8005df0 <HAL_DMA_IRQHandler+0x410>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d02c      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5e      	ldr	r2, [pc, #376]	@ (8005df4 <HAL_DMA_IRQHandler+0x414>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d027      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5d      	ldr	r2, [pc, #372]	@ (8005df8 <HAL_DMA_IRQHandler+0x418>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d022      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5b      	ldr	r2, [pc, #364]	@ (8005dfc <HAL_DMA_IRQHandler+0x41c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01d      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5a      	ldr	r2, [pc, #360]	@ (8005e00 <HAL_DMA_IRQHandler+0x420>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a58      	ldr	r2, [pc, #352]	@ (8005e04 <HAL_DMA_IRQHandler+0x424>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a57      	ldr	r2, [pc, #348]	@ (8005e08 <HAL_DMA_IRQHandler+0x428>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a55      	ldr	r2, [pc, #340]	@ (8005e0c <HAL_DMA_IRQHandler+0x42c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a54      	ldr	r2, [pc, #336]	@ (8005e10 <HAL_DMA_IRQHandler+0x430>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_DMA_IRQHandler+0x2ee>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a52      	ldr	r2, [pc, #328]	@ (8005e14 <HAL_DMA_IRQHandler+0x434>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x304>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e003      	b.n	8005cec <HAL_DMA_IRQHandler+0x30c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d04:	f043 0202 	orr.w	r2, r3, #2
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	2204      	movs	r2, #4
 8005d16:	409a      	lsls	r2, r3
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 808f 	beq.w	8005e40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd8 <HAL_DMA_IRQHandler+0x3f8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d04a      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	@ (8005ddc <HAL_DMA_IRQHandler+0x3fc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d045      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a29      	ldr	r2, [pc, #164]	@ (8005de0 <HAL_DMA_IRQHandler+0x400>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d040      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a27      	ldr	r2, [pc, #156]	@ (8005de4 <HAL_DMA_IRQHandler+0x404>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d03b      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a26      	ldr	r2, [pc, #152]	@ (8005de8 <HAL_DMA_IRQHandler+0x408>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d036      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a24      	ldr	r2, [pc, #144]	@ (8005dec <HAL_DMA_IRQHandler+0x40c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d031      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a23      	ldr	r2, [pc, #140]	@ (8005df0 <HAL_DMA_IRQHandler+0x410>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d02c      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a21      	ldr	r2, [pc, #132]	@ (8005df4 <HAL_DMA_IRQHandler+0x414>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d027      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a20      	ldr	r2, [pc, #128]	@ (8005df8 <HAL_DMA_IRQHandler+0x418>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1e      	ldr	r2, [pc, #120]	@ (8005dfc <HAL_DMA_IRQHandler+0x41c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01d      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <HAL_DMA_IRQHandler+0x420>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <HAL_DMA_IRQHandler+0x424>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <HAL_DMA_IRQHandler+0x428>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <HAL_DMA_IRQHandler+0x42c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <HAL_DMA_IRQHandler+0x430>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0x3e2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <HAL_DMA_IRQHandler+0x434>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d12a      	bne.n	8005e18 <HAL_DMA_IRQHandler+0x438>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e023      	b.n	8005e20 <HAL_DMA_IRQHandler+0x440>
 8005dd8:	40020010 	.word	0x40020010
 8005ddc:	40020028 	.word	0x40020028
 8005de0:	40020040 	.word	0x40020040
 8005de4:	40020058 	.word	0x40020058
 8005de8:	40020070 	.word	0x40020070
 8005dec:	40020088 	.word	0x40020088
 8005df0:	400200a0 	.word	0x400200a0
 8005df4:	400200b8 	.word	0x400200b8
 8005df8:	40020410 	.word	0x40020410
 8005dfc:	40020428 	.word	0x40020428
 8005e00:	40020440 	.word	0x40020440
 8005e04:	40020458 	.word	0x40020458
 8005e08:	40020470 	.word	0x40020470
 8005e0c:	40020488 	.word	0x40020488
 8005e10:	400204a0 	.word	0x400204a0
 8005e14:	400204b8 	.word	0x400204b8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e44:	f003 031f 	and.w	r3, r3, #31
 8005e48:	2210      	movs	r2, #16
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80a6 	beq.w	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a85      	ldr	r2, [pc, #532]	@ (8006070 <HAL_DMA_IRQHandler+0x690>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d04a      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a83      	ldr	r2, [pc, #524]	@ (8006074 <HAL_DMA_IRQHandler+0x694>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d045      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a82      	ldr	r2, [pc, #520]	@ (8006078 <HAL_DMA_IRQHandler+0x698>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d040      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a80      	ldr	r2, [pc, #512]	@ (800607c <HAL_DMA_IRQHandler+0x69c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d03b      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a7f      	ldr	r2, [pc, #508]	@ (8006080 <HAL_DMA_IRQHandler+0x6a0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d036      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a7d      	ldr	r2, [pc, #500]	@ (8006084 <HAL_DMA_IRQHandler+0x6a4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d031      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a7c      	ldr	r2, [pc, #496]	@ (8006088 <HAL_DMA_IRQHandler+0x6a8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d02c      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a7a      	ldr	r2, [pc, #488]	@ (800608c <HAL_DMA_IRQHandler+0x6ac>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d027      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a79      	ldr	r2, [pc, #484]	@ (8006090 <HAL_DMA_IRQHandler+0x6b0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a77      	ldr	r2, [pc, #476]	@ (8006094 <HAL_DMA_IRQHandler+0x6b4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a76      	ldr	r2, [pc, #472]	@ (8006098 <HAL_DMA_IRQHandler+0x6b8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a74      	ldr	r2, [pc, #464]	@ (800609c <HAL_DMA_IRQHandler+0x6bc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a73      	ldr	r2, [pc, #460]	@ (80060a0 <HAL_DMA_IRQHandler+0x6c0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a71      	ldr	r2, [pc, #452]	@ (80060a4 <HAL_DMA_IRQHandler+0x6c4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a70      	ldr	r2, [pc, #448]	@ (80060a8 <HAL_DMA_IRQHandler+0x6c8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x516>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80060ac <HAL_DMA_IRQHandler+0x6cc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10a      	bne.n	8005f0c <HAL_DMA_IRQHandler+0x52c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e009      	b.n	8005f20 <HAL_DMA_IRQHandler+0x540>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf14      	ite	ne
 8005f1a:	2301      	movne	r3, #1
 8005f1c:	2300      	moveq	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d03e      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d108      	bne.n	8005f62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d024      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
 8005f60:	e01f      	b.n	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01b      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
 8005f72:	e016      	b.n	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0208 	bic.w	r2, r2, #8
 8005f90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	2220      	movs	r2, #32
 8005fac:	409a      	lsls	r2, r3
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8110 	beq.w	80061d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8006070 <HAL_DMA_IRQHandler+0x690>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04a      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8006074 <HAL_DMA_IRQHandler+0x694>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d045      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a29      	ldr	r2, [pc, #164]	@ (8006078 <HAL_DMA_IRQHandler+0x698>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d040      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a28      	ldr	r2, [pc, #160]	@ (800607c <HAL_DMA_IRQHandler+0x69c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d03b      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a26      	ldr	r2, [pc, #152]	@ (8006080 <HAL_DMA_IRQHandler+0x6a0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d036      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a25      	ldr	r2, [pc, #148]	@ (8006084 <HAL_DMA_IRQHandler+0x6a4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d031      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a23      	ldr	r2, [pc, #140]	@ (8006088 <HAL_DMA_IRQHandler+0x6a8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02c      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a22      	ldr	r2, [pc, #136]	@ (800608c <HAL_DMA_IRQHandler+0x6ac>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d027      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a20      	ldr	r2, [pc, #128]	@ (8006090 <HAL_DMA_IRQHandler+0x6b0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1f      	ldr	r2, [pc, #124]	@ (8006094 <HAL_DMA_IRQHandler+0x6b4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01d      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1d      	ldr	r2, [pc, #116]	@ (8006098 <HAL_DMA_IRQHandler+0x6b8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1c      	ldr	r2, [pc, #112]	@ (800609c <HAL_DMA_IRQHandler+0x6bc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1a      	ldr	r2, [pc, #104]	@ (80060a0 <HAL_DMA_IRQHandler+0x6c0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a19      	ldr	r2, [pc, #100]	@ (80060a4 <HAL_DMA_IRQHandler+0x6c4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a17      	ldr	r2, [pc, #92]	@ (80060a8 <HAL_DMA_IRQHandler+0x6c8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_DMA_IRQHandler+0x678>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a16      	ldr	r2, [pc, #88]	@ (80060ac <HAL_DMA_IRQHandler+0x6cc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d12b      	bne.n	80060b0 <HAL_DMA_IRQHandler+0x6d0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	e02a      	b.n	80060c4 <HAL_DMA_IRQHandler+0x6e4>
 800606e:	bf00      	nop
 8006070:	40020010 	.word	0x40020010
 8006074:	40020028 	.word	0x40020028
 8006078:	40020040 	.word	0x40020040
 800607c:	40020058 	.word	0x40020058
 8006080:	40020070 	.word	0x40020070
 8006084:	40020088 	.word	0x40020088
 8006088:	400200a0 	.word	0x400200a0
 800608c:	400200b8 	.word	0x400200b8
 8006090:	40020410 	.word	0x40020410
 8006094:	40020428 	.word	0x40020428
 8006098:	40020440 	.word	0x40020440
 800609c:	40020458 	.word	0x40020458
 80060a0:	40020470 	.word	0x40020470
 80060a4:	40020488 	.word	0x40020488
 80060a8:	400204a0 	.word	0x400204a0
 80060ac:	400204b8 	.word	0x400204b8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bf14      	ite	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	2300      	moveq	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8087 	beq.w	80061d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	2220      	movs	r2, #32
 80060d4:	409a      	lsls	r2, r3
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d139      	bne.n	800615a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0216 	bic.w	r2, r2, #22
 80060f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006104:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_DMA_IRQHandler+0x736>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0208 	bic.w	r2, r2, #8
 8006124:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	223f      	movs	r2, #63	@ 0x3f
 8006130:	409a      	lsls	r2, r3
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 834a 	beq.w	80067e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
          }
          return;
 8006158:	e344      	b.n	80067e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d018      	beq.n	800619a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02c      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
 8006186:	e027      	b.n	80061d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d023      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	e01e      	b.n	80061d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10f      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0210 	bic.w	r2, r2, #16
 80061b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8306 	beq.w	80067ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8088 	beq.w	8006300 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2204      	movs	r2, #4
 80061f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a7a      	ldr	r2, [pc, #488]	@ (80063e8 <HAL_DMA_IRQHandler+0xa08>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04a      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a79      	ldr	r2, [pc, #484]	@ (80063ec <HAL_DMA_IRQHandler+0xa0c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d045      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a77      	ldr	r2, [pc, #476]	@ (80063f0 <HAL_DMA_IRQHandler+0xa10>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d040      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a76      	ldr	r2, [pc, #472]	@ (80063f4 <HAL_DMA_IRQHandler+0xa14>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d03b      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a74      	ldr	r2, [pc, #464]	@ (80063f8 <HAL_DMA_IRQHandler+0xa18>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d036      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a73      	ldr	r2, [pc, #460]	@ (80063fc <HAL_DMA_IRQHandler+0xa1c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d031      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a71      	ldr	r2, [pc, #452]	@ (8006400 <HAL_DMA_IRQHandler+0xa20>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02c      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a70      	ldr	r2, [pc, #448]	@ (8006404 <HAL_DMA_IRQHandler+0xa24>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d027      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6e      	ldr	r2, [pc, #440]	@ (8006408 <HAL_DMA_IRQHandler+0xa28>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a6d      	ldr	r2, [pc, #436]	@ (800640c <HAL_DMA_IRQHandler+0xa2c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01d      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a6b      	ldr	r2, [pc, #428]	@ (8006410 <HAL_DMA_IRQHandler+0xa30>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a6a      	ldr	r2, [pc, #424]	@ (8006414 <HAL_DMA_IRQHandler+0xa34>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a68      	ldr	r2, [pc, #416]	@ (8006418 <HAL_DMA_IRQHandler+0xa38>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a67      	ldr	r2, [pc, #412]	@ (800641c <HAL_DMA_IRQHandler+0xa3c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a65      	ldr	r2, [pc, #404]	@ (8006420 <HAL_DMA_IRQHandler+0xa40>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_DMA_IRQHandler+0x8b8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a64      	ldr	r2, [pc, #400]	@ (8006424 <HAL_DMA_IRQHandler+0xa44>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_DMA_IRQHandler+0x8ca>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e007      	b.n	80062ba <HAL_DMA_IRQHandler+0x8da>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d307      	bcc.n	80062d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f2      	bne.n	80062ba <HAL_DMA_IRQHandler+0x8da>
 80062d4:	e000      	b.n	80062d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80062d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2203      	movs	r2, #3
 80062ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80062ee:	e003      	b.n	80062f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8272 	beq.w	80067ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	e26c      	b.n	80067ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a43      	ldr	r2, [pc, #268]	@ (8006428 <HAL_DMA_IRQHandler+0xa48>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a42      	ldr	r2, [pc, #264]	@ (800642c <HAL_DMA_IRQHandler+0xa4c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d01d      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a40      	ldr	r2, [pc, #256]	@ (8006430 <HAL_DMA_IRQHandler+0xa50>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3f      	ldr	r2, [pc, #252]	@ (8006434 <HAL_DMA_IRQHandler+0xa54>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a3d      	ldr	r2, [pc, #244]	@ (8006438 <HAL_DMA_IRQHandler+0xa58>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3c      	ldr	r2, [pc, #240]	@ (800643c <HAL_DMA_IRQHandler+0xa5c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a3a      	ldr	r2, [pc, #232]	@ (8006440 <HAL_DMA_IRQHandler+0xa60>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_DMA_IRQHandler+0x984>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a39      	ldr	r2, [pc, #228]	@ (8006444 <HAL_DMA_IRQHandler+0xa64>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d101      	bne.n	8006368 <HAL_DMA_IRQHandler+0x988>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <HAL_DMA_IRQHandler+0x98a>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 823f 	beq.w	80067ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2204      	movs	r2, #4
 8006382:	409a      	lsls	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80cd 	beq.w	8006528 <HAL_DMA_IRQHandler+0xb48>
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80c7 	beq.w	8006528 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2204      	movs	r2, #4
 80063a4:	409a      	lsls	r2, r3
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d049      	beq.n	8006448 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8210 	beq.w	80067e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d0:	e20a      	b.n	80067e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8206 	beq.w	80067e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e4:	e200      	b.n	80067e8 <HAL_DMA_IRQHandler+0xe08>
 80063e6:	bf00      	nop
 80063e8:	40020010 	.word	0x40020010
 80063ec:	40020028 	.word	0x40020028
 80063f0:	40020040 	.word	0x40020040
 80063f4:	40020058 	.word	0x40020058
 80063f8:	40020070 	.word	0x40020070
 80063fc:	40020088 	.word	0x40020088
 8006400:	400200a0 	.word	0x400200a0
 8006404:	400200b8 	.word	0x400200b8
 8006408:	40020410 	.word	0x40020410
 800640c:	40020428 	.word	0x40020428
 8006410:	40020440 	.word	0x40020440
 8006414:	40020458 	.word	0x40020458
 8006418:	40020470 	.word	0x40020470
 800641c:	40020488 	.word	0x40020488
 8006420:	400204a0 	.word	0x400204a0
 8006424:	400204b8 	.word	0x400204b8
 8006428:	58025408 	.word	0x58025408
 800642c:	5802541c 	.word	0x5802541c
 8006430:	58025430 	.word	0x58025430
 8006434:	58025444 	.word	0x58025444
 8006438:	58025458 	.word	0x58025458
 800643c:	5802546c 	.word	0x5802546c
 8006440:	58025480 	.word	0x58025480
 8006444:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d160      	bne.n	8006514 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a7f      	ldr	r2, [pc, #508]	@ (8006654 <HAL_DMA_IRQHandler+0xc74>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d04a      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7d      	ldr	r2, [pc, #500]	@ (8006658 <HAL_DMA_IRQHandler+0xc78>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d045      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a7c      	ldr	r2, [pc, #496]	@ (800665c <HAL_DMA_IRQHandler+0xc7c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d040      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a7a      	ldr	r2, [pc, #488]	@ (8006660 <HAL_DMA_IRQHandler+0xc80>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d03b      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a79      	ldr	r2, [pc, #484]	@ (8006664 <HAL_DMA_IRQHandler+0xc84>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d036      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a77      	ldr	r2, [pc, #476]	@ (8006668 <HAL_DMA_IRQHandler+0xc88>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d031      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a76      	ldr	r2, [pc, #472]	@ (800666c <HAL_DMA_IRQHandler+0xc8c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d02c      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a74      	ldr	r2, [pc, #464]	@ (8006670 <HAL_DMA_IRQHandler+0xc90>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d027      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	@ (8006674 <HAL_DMA_IRQHandler+0xc94>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a71      	ldr	r2, [pc, #452]	@ (8006678 <HAL_DMA_IRQHandler+0xc98>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a70      	ldr	r2, [pc, #448]	@ (800667c <HAL_DMA_IRQHandler+0xc9c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006680 <HAL_DMA_IRQHandler+0xca0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006684 <HAL_DMA_IRQHandler+0xca4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006688 <HAL_DMA_IRQHandler+0xca8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a6a      	ldr	r2, [pc, #424]	@ (800668c <HAL_DMA_IRQHandler+0xcac>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_DMA_IRQHandler+0xb12>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a68      	ldr	r2, [pc, #416]	@ (8006690 <HAL_DMA_IRQHandler+0xcb0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d108      	bne.n	8006504 <HAL_DMA_IRQHandler+0xb24>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0208 	bic.w	r2, r2, #8
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e007      	b.n	8006514 <HAL_DMA_IRQHandler+0xb34>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0204 	bic.w	r2, r2, #4
 8006512:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8165 	beq.w	80067e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006526:	e15f      	b.n	80067e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	2202      	movs	r2, #2
 8006532:	409a      	lsls	r2, r3
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4013      	ands	r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80c5 	beq.w	80066c8 <HAL_DMA_IRQHandler+0xce8>
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80bf 	beq.w	80066c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	2202      	movs	r2, #2
 8006554:	409a      	lsls	r2, r3
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d018      	beq.n	8006596 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 813a 	beq.w	80067ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006580:	e134      	b.n	80067ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8130 	beq.w	80067ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006594:	e12a      	b.n	80067ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 8089 	bne.w	80066b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006654 <HAL_DMA_IRQHandler+0xc74>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d04a      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a29      	ldr	r2, [pc, #164]	@ (8006658 <HAL_DMA_IRQHandler+0xc78>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d045      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a28      	ldr	r2, [pc, #160]	@ (800665c <HAL_DMA_IRQHandler+0xc7c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d040      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a26      	ldr	r2, [pc, #152]	@ (8006660 <HAL_DMA_IRQHandler+0xc80>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d03b      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a25      	ldr	r2, [pc, #148]	@ (8006664 <HAL_DMA_IRQHandler+0xc84>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d036      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a23      	ldr	r2, [pc, #140]	@ (8006668 <HAL_DMA_IRQHandler+0xc88>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d031      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a22      	ldr	r2, [pc, #136]	@ (800666c <HAL_DMA_IRQHandler+0xc8c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d02c      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <HAL_DMA_IRQHandler+0xc90>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d027      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <HAL_DMA_IRQHandler+0xc94>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1d      	ldr	r2, [pc, #116]	@ (8006678 <HAL_DMA_IRQHandler+0xc98>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01d      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1c      	ldr	r2, [pc, #112]	@ (800667c <HAL_DMA_IRQHandler+0xc9c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1a      	ldr	r2, [pc, #104]	@ (8006680 <HAL_DMA_IRQHandler+0xca0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a19      	ldr	r2, [pc, #100]	@ (8006684 <HAL_DMA_IRQHandler+0xca4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a17      	ldr	r2, [pc, #92]	@ (8006688 <HAL_DMA_IRQHandler+0xca8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a16      	ldr	r2, [pc, #88]	@ (800668c <HAL_DMA_IRQHandler+0xcac>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_DMA_IRQHandler+0xc62>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a14      	ldr	r2, [pc, #80]	@ (8006690 <HAL_DMA_IRQHandler+0xcb0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d128      	bne.n	8006694 <HAL_DMA_IRQHandler+0xcb4>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0214 	bic.w	r2, r2, #20
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e027      	b.n	80066a4 <HAL_DMA_IRQHandler+0xcc4>
 8006654:	40020010 	.word	0x40020010
 8006658:	40020028 	.word	0x40020028
 800665c:	40020040 	.word	0x40020040
 8006660:	40020058 	.word	0x40020058
 8006664:	40020070 	.word	0x40020070
 8006668:	40020088 	.word	0x40020088
 800666c:	400200a0 	.word	0x400200a0
 8006670:	400200b8 	.word	0x400200b8
 8006674:	40020410 	.word	0x40020410
 8006678:	40020428 	.word	0x40020428
 800667c:	40020440 	.word	0x40020440
 8006680:	40020458 	.word	0x40020458
 8006684:	40020470 	.word	0x40020470
 8006688:	40020488 	.word	0x40020488
 800668c:	400204a0 	.word	0x400204a0
 8006690:	400204b8 	.word	0x400204b8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 020a 	bic.w	r2, r2, #10
 80066a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8097 	beq.w	80067ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066c6:	e091      	b.n	80067ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2208      	movs	r2, #8
 80066d2:	409a      	lsls	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 8088 	beq.w	80067ee <HAL_DMA_IRQHandler+0xe0e>
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8082 	beq.w	80067ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a41      	ldr	r2, [pc, #260]	@ (80067f4 <HAL_DMA_IRQHandler+0xe14>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d04a      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a3f      	ldr	r2, [pc, #252]	@ (80067f8 <HAL_DMA_IRQHandler+0xe18>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d045      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a3e      	ldr	r2, [pc, #248]	@ (80067fc <HAL_DMA_IRQHandler+0xe1c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d040      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a3c      	ldr	r2, [pc, #240]	@ (8006800 <HAL_DMA_IRQHandler+0xe20>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d03b      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a3b      	ldr	r2, [pc, #236]	@ (8006804 <HAL_DMA_IRQHandler+0xe24>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d036      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a39      	ldr	r2, [pc, #228]	@ (8006808 <HAL_DMA_IRQHandler+0xe28>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d031      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a38      	ldr	r2, [pc, #224]	@ (800680c <HAL_DMA_IRQHandler+0xe2c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d02c      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a36      	ldr	r2, [pc, #216]	@ (8006810 <HAL_DMA_IRQHandler+0xe30>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d027      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a35      	ldr	r2, [pc, #212]	@ (8006814 <HAL_DMA_IRQHandler+0xe34>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d022      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a33      	ldr	r2, [pc, #204]	@ (8006818 <HAL_DMA_IRQHandler+0xe38>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01d      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a32      	ldr	r2, [pc, #200]	@ (800681c <HAL_DMA_IRQHandler+0xe3c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d018      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a30      	ldr	r2, [pc, #192]	@ (8006820 <HAL_DMA_IRQHandler+0xe40>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a2f      	ldr	r2, [pc, #188]	@ (8006824 <HAL_DMA_IRQHandler+0xe44>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00e      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2d      	ldr	r2, [pc, #180]	@ (8006828 <HAL_DMA_IRQHandler+0xe48>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2c      	ldr	r2, [pc, #176]	@ (800682c <HAL_DMA_IRQHandler+0xe4c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_DMA_IRQHandler+0xdaa>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2a      	ldr	r2, [pc, #168]	@ (8006830 <HAL_DMA_IRQHandler+0xe50>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <HAL_DMA_IRQHandler+0xdbc>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 021c 	bic.w	r2, r2, #28
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e007      	b.n	80067ac <HAL_DMA_IRQHandler+0xdcc>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 020e 	bic.w	r2, r2, #14
 80067aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2201      	movs	r2, #1
 80067b6:	409a      	lsls	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	e004      	b.n	80067ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067ee:	3728      	adds	r7, #40	@ 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40020010 	.word	0x40020010
 80067f8:	40020028 	.word	0x40020028
 80067fc:	40020040 	.word	0x40020040
 8006800:	40020058 	.word	0x40020058
 8006804:	40020070 	.word	0x40020070
 8006808:	40020088 	.word	0x40020088
 800680c:	400200a0 	.word	0x400200a0
 8006810:	400200b8 	.word	0x400200b8
 8006814:	40020410 	.word	0x40020410
 8006818:	40020428 	.word	0x40020428
 800681c:	40020440 	.word	0x40020440
 8006820:	40020458 	.word	0x40020458
 8006824:	40020470 	.word	0x40020470
 8006828:	40020488 	.word	0x40020488
 800682c:	400204a0 	.word	0x400204a0
 8006830:	400204b8 	.word	0x400204b8

08006834 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006846:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a7f      	ldr	r2, [pc, #508]	@ (8006a50 <DMA_SetConfig+0x21c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d072      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a54 <DMA_SetConfig+0x220>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d06d      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a7c      	ldr	r2, [pc, #496]	@ (8006a58 <DMA_SetConfig+0x224>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d068      	beq.n	800693e <DMA_SetConfig+0x10a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a7a      	ldr	r2, [pc, #488]	@ (8006a5c <DMA_SetConfig+0x228>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d063      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a79      	ldr	r2, [pc, #484]	@ (8006a60 <DMA_SetConfig+0x22c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d05e      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a77      	ldr	r2, [pc, #476]	@ (8006a64 <DMA_SetConfig+0x230>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d059      	beq.n	800693e <DMA_SetConfig+0x10a>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a76      	ldr	r2, [pc, #472]	@ (8006a68 <DMA_SetConfig+0x234>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d054      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a74      	ldr	r2, [pc, #464]	@ (8006a6c <DMA_SetConfig+0x238>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d04f      	beq.n	800693e <DMA_SetConfig+0x10a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a73      	ldr	r2, [pc, #460]	@ (8006a70 <DMA_SetConfig+0x23c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d04a      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a71      	ldr	r2, [pc, #452]	@ (8006a74 <DMA_SetConfig+0x240>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d045      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a70      	ldr	r2, [pc, #448]	@ (8006a78 <DMA_SetConfig+0x244>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d040      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a6e      	ldr	r2, [pc, #440]	@ (8006a7c <DMA_SetConfig+0x248>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d03b      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006a80 <DMA_SetConfig+0x24c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d036      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a6b      	ldr	r2, [pc, #428]	@ (8006a84 <DMA_SetConfig+0x250>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d031      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a6a      	ldr	r2, [pc, #424]	@ (8006a88 <DMA_SetConfig+0x254>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d02c      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a68      	ldr	r2, [pc, #416]	@ (8006a8c <DMA_SetConfig+0x258>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d027      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a67      	ldr	r2, [pc, #412]	@ (8006a90 <DMA_SetConfig+0x25c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d022      	beq.n	800693e <DMA_SetConfig+0x10a>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a65      	ldr	r2, [pc, #404]	@ (8006a94 <DMA_SetConfig+0x260>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d01d      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a64      	ldr	r2, [pc, #400]	@ (8006a98 <DMA_SetConfig+0x264>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d018      	beq.n	800693e <DMA_SetConfig+0x10a>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a62      	ldr	r2, [pc, #392]	@ (8006a9c <DMA_SetConfig+0x268>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a61      	ldr	r2, [pc, #388]	@ (8006aa0 <DMA_SetConfig+0x26c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a5f      	ldr	r2, [pc, #380]	@ (8006aa4 <DMA_SetConfig+0x270>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <DMA_SetConfig+0x10a>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa8 <DMA_SetConfig+0x274>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <DMA_SetConfig+0x10a>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a5c      	ldr	r2, [pc, #368]	@ (8006aac <DMA_SetConfig+0x278>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d101      	bne.n	8006942 <DMA_SetConfig+0x10e>
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <DMA_SetConfig+0x110>
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006950:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006962:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a39      	ldr	r2, [pc, #228]	@ (8006a50 <DMA_SetConfig+0x21c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d04a      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a38      	ldr	r2, [pc, #224]	@ (8006a54 <DMA_SetConfig+0x220>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d045      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a36      	ldr	r2, [pc, #216]	@ (8006a58 <DMA_SetConfig+0x224>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d040      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a35      	ldr	r2, [pc, #212]	@ (8006a5c <DMA_SetConfig+0x228>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d03b      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a33      	ldr	r2, [pc, #204]	@ (8006a60 <DMA_SetConfig+0x22c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d036      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a32      	ldr	r2, [pc, #200]	@ (8006a64 <DMA_SetConfig+0x230>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d031      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a30      	ldr	r2, [pc, #192]	@ (8006a68 <DMA_SetConfig+0x234>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d02c      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2f      	ldr	r2, [pc, #188]	@ (8006a6c <DMA_SetConfig+0x238>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d027      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006a70 <DMA_SetConfig+0x23c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006a74 <DMA_SetConfig+0x240>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01d      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006a78 <DMA_SetConfig+0x244>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a29      	ldr	r2, [pc, #164]	@ (8006a7c <DMA_SetConfig+0x248>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a27      	ldr	r2, [pc, #156]	@ (8006a80 <DMA_SetConfig+0x24c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a26      	ldr	r2, [pc, #152]	@ (8006a84 <DMA_SetConfig+0x250>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a24      	ldr	r2, [pc, #144]	@ (8006a88 <DMA_SetConfig+0x254>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <DMA_SetConfig+0x1d0>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a23      	ldr	r2, [pc, #140]	@ (8006a8c <DMA_SetConfig+0x258>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d101      	bne.n	8006a08 <DMA_SetConfig+0x1d4>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <DMA_SetConfig+0x1d6>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d059      	beq.n	8006ac2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	223f      	movs	r2, #63	@ 0x3f
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a2c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b40      	cmp	r3, #64	@ 0x40
 8006a3c:	d138      	bne.n	8006ab0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a4e:	e086      	b.n	8006b5e <DMA_SetConfig+0x32a>
 8006a50:	40020010 	.word	0x40020010
 8006a54:	40020028 	.word	0x40020028
 8006a58:	40020040 	.word	0x40020040
 8006a5c:	40020058 	.word	0x40020058
 8006a60:	40020070 	.word	0x40020070
 8006a64:	40020088 	.word	0x40020088
 8006a68:	400200a0 	.word	0x400200a0
 8006a6c:	400200b8 	.word	0x400200b8
 8006a70:	40020410 	.word	0x40020410
 8006a74:	40020428 	.word	0x40020428
 8006a78:	40020440 	.word	0x40020440
 8006a7c:	40020458 	.word	0x40020458
 8006a80:	40020470 	.word	0x40020470
 8006a84:	40020488 	.word	0x40020488
 8006a88:	400204a0 	.word	0x400204a0
 8006a8c:	400204b8 	.word	0x400204b8
 8006a90:	58025408 	.word	0x58025408
 8006a94:	5802541c 	.word	0x5802541c
 8006a98:	58025430 	.word	0x58025430
 8006a9c:	58025444 	.word	0x58025444
 8006aa0:	58025458 	.word	0x58025458
 8006aa4:	5802546c 	.word	0x5802546c
 8006aa8:	58025480 	.word	0x58025480
 8006aac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]
}
 8006ac0:	e04d      	b.n	8006b5e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a29      	ldr	r2, [pc, #164]	@ (8006b6c <DMA_SetConfig+0x338>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d022      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a27      	ldr	r2, [pc, #156]	@ (8006b70 <DMA_SetConfig+0x33c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01d      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a26      	ldr	r2, [pc, #152]	@ (8006b74 <DMA_SetConfig+0x340>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d018      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a24      	ldr	r2, [pc, #144]	@ (8006b78 <DMA_SetConfig+0x344>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d013      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a23      	ldr	r2, [pc, #140]	@ (8006b7c <DMA_SetConfig+0x348>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00e      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a21      	ldr	r2, [pc, #132]	@ (8006b80 <DMA_SetConfig+0x34c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a20      	ldr	r2, [pc, #128]	@ (8006b84 <DMA_SetConfig+0x350>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <DMA_SetConfig+0x2de>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8006b88 <DMA_SetConfig+0x354>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d101      	bne.n	8006b16 <DMA_SetConfig+0x2e2>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <DMA_SetConfig+0x2e4>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d020      	beq.n	8006b5e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2201      	movs	r2, #1
 8006b26:	409a      	lsls	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b40      	cmp	r3, #64	@ 0x40
 8006b3a:	d108      	bne.n	8006b4e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	60da      	str	r2, [r3, #12]
}
 8006b4c:	e007      	b.n	8006b5e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	60da      	str	r2, [r3, #12]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	58025408 	.word	0x58025408
 8006b70:	5802541c 	.word	0x5802541c
 8006b74:	58025430 	.word	0x58025430
 8006b78:	58025444 	.word	0x58025444
 8006b7c:	58025458 	.word	0x58025458
 8006b80:	5802546c 	.word	0x5802546c
 8006b84:	58025480 	.word	0x58025480
 8006b88:	58025494 	.word	0x58025494

08006b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a42      	ldr	r2, [pc, #264]	@ (8006ca4 <DMA_CalcBaseAndBitshift+0x118>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d04a      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a41      	ldr	r2, [pc, #260]	@ (8006ca8 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d045      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a3f      	ldr	r2, [pc, #252]	@ (8006cac <DMA_CalcBaseAndBitshift+0x120>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d040      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <DMA_CalcBaseAndBitshift+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d03b      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb4 <DMA_CalcBaseAndBitshift+0x128>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d036      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a3b      	ldr	r2, [pc, #236]	@ (8006cb8 <DMA_CalcBaseAndBitshift+0x12c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d031      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a39      	ldr	r2, [pc, #228]	@ (8006cbc <DMA_CalcBaseAndBitshift+0x130>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d02c      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a38      	ldr	r2, [pc, #224]	@ (8006cc0 <DMA_CalcBaseAndBitshift+0x134>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d027      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a36      	ldr	r2, [pc, #216]	@ (8006cc4 <DMA_CalcBaseAndBitshift+0x138>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d022      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a35      	ldr	r2, [pc, #212]	@ (8006cc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01d      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a33      	ldr	r2, [pc, #204]	@ (8006ccc <DMA_CalcBaseAndBitshift+0x140>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a32      	ldr	r2, [pc, #200]	@ (8006cd0 <DMA_CalcBaseAndBitshift+0x144>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a30      	ldr	r2, [pc, #192]	@ (8006cd4 <DMA_CalcBaseAndBitshift+0x148>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8006cd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a2d      	ldr	r2, [pc, #180]	@ (8006cdc <DMA_CalcBaseAndBitshift+0x150>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <DMA_CalcBaseAndBitshift+0xa8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce0 <DMA_CalcBaseAndBitshift+0x154>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d101      	bne.n	8006c38 <DMA_CalcBaseAndBitshift+0xac>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <DMA_CalcBaseAndBitshift+0xae>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d024      	beq.n	8006c88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	3b10      	subs	r3, #16
 8006c46:	4a27      	ldr	r2, [pc, #156]	@ (8006ce4 <DMA_CalcBaseAndBitshift+0x158>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	091b      	lsrs	r3, r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	4a24      	ldr	r2, [pc, #144]	@ (8006ce8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006c58:	5cd3      	ldrb	r3, [r2, r3]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d908      	bls.n	8006c78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cec <DMA_CalcBaseAndBitshift+0x160>)
 8006c6e:	4013      	ands	r3, r2
 8006c70:	1d1a      	adds	r2, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c76:	e00d      	b.n	8006c94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cec <DMA_CalcBaseAndBitshift+0x160>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c86:	e005      	b.n	8006c94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40020010 	.word	0x40020010
 8006ca8:	40020028 	.word	0x40020028
 8006cac:	40020040 	.word	0x40020040
 8006cb0:	40020058 	.word	0x40020058
 8006cb4:	40020070 	.word	0x40020070
 8006cb8:	40020088 	.word	0x40020088
 8006cbc:	400200a0 	.word	0x400200a0
 8006cc0:	400200b8 	.word	0x400200b8
 8006cc4:	40020410 	.word	0x40020410
 8006cc8:	40020428 	.word	0x40020428
 8006ccc:	40020440 	.word	0x40020440
 8006cd0:	40020458 	.word	0x40020458
 8006cd4:	40020470 	.word	0x40020470
 8006cd8:	40020488 	.word	0x40020488
 8006cdc:	400204a0 	.word	0x400204a0
 8006ce0:	400204b8 	.word	0x400204b8
 8006ce4:	aaaaaaab 	.word	0xaaaaaaab
 8006ce8:	08011114 	.word	0x08011114
 8006cec:	fffffc00 	.word	0xfffffc00

08006cf0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d120      	bne.n	8006d46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d858      	bhi.n	8006dbe <DMA_CheckFifoParam+0xce>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <DMA_CheckFifoParam+0x24>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d37 	.word	0x08006d37
 8006d1c:	08006d25 	.word	0x08006d25
 8006d20:	08006dbf 	.word	0x08006dbf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d048      	beq.n	8006dc2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d34:	e045      	b.n	8006dc2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d3e:	d142      	bne.n	8006dc6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d44:	e03f      	b.n	8006dc6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d4e:	d123      	bne.n	8006d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d838      	bhi.n	8006dca <DMA_CheckFifoParam+0xda>
 8006d58:	a201      	add	r2, pc, #4	@ (adr r2, 8006d60 <DMA_CheckFifoParam+0x70>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d77 	.word	0x08006d77
 8006d68:	08006d71 	.word	0x08006d71
 8006d6c:	08006d89 	.word	0x08006d89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
        break;
 8006d74:	e030      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d025      	beq.n	8006dce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d86:	e022      	b.n	8006dce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d90:	d11f      	bne.n	8006dd2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d96:	e01c      	b.n	8006dd2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d902      	bls.n	8006da6 <DMA_CheckFifoParam+0xb6>
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d003      	beq.n	8006dac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006da4:	e018      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
        break;
 8006daa:	e015      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00e      	beq.n	8006dd6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
    break;
 8006dbc:	e00b      	b.n	8006dd6 <DMA_CheckFifoParam+0xe6>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e00a      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dc2:	bf00      	nop
 8006dc4:	e008      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dc6:	bf00      	nop
 8006dc8:	e006      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dca:	bf00      	nop
 8006dcc:	e004      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e002      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e000      	b.n	8006dd8 <DMA_CheckFifoParam+0xe8>
    break;
 8006dd6:	bf00      	nop
    }
  }

  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop

08006de8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a38      	ldr	r2, [pc, #224]	@ (8006edc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d022      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a36      	ldr	r2, [pc, #216]	@ (8006ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d01d      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a35      	ldr	r2, [pc, #212]	@ (8006ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d018      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a33      	ldr	r2, [pc, #204]	@ (8006ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d013      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a32      	ldr	r2, [pc, #200]	@ (8006eec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00e      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a30      	ldr	r2, [pc, #192]	@ (8006ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d009      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2f      	ldr	r2, [pc, #188]	@ (8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d101      	bne.n	8006e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01a      	beq.n	8006e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	3b08      	subs	r3, #8
 8006e58:	4a28      	ldr	r2, [pc, #160]	@ (8006efc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4b26      	ldr	r3, [pc, #152]	@ (8006f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a24      	ldr	r2, [pc, #144]	@ (8006f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006e74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	409a      	lsls	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e84:	e024      	b.n	8006ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	3b10      	subs	r3, #16
 8006e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e90:	fba2 2303 	umull	r2, r3, r2, r3
 8006e94:	091b      	lsrs	r3, r3, #4
 8006e96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d806      	bhi.n	8006eae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d902      	bls.n	8006eae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4b18      	ldr	r3, [pc, #96]	@ (8006f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a16      	ldr	r2, [pc, #88]	@ (8006f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ec0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	2201      	movs	r2, #1
 8006eca:	409a      	lsls	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	58025408 	.word	0x58025408
 8006ee0:	5802541c 	.word	0x5802541c
 8006ee4:	58025430 	.word	0x58025430
 8006ee8:	58025444 	.word	0x58025444
 8006eec:	58025458 	.word	0x58025458
 8006ef0:	5802546c 	.word	0x5802546c
 8006ef4:	58025480 	.word	0x58025480
 8006ef8:	58025494 	.word	0x58025494
 8006efc:	cccccccd 	.word	0xcccccccd
 8006f00:	16009600 	.word	0x16009600
 8006f04:	58025880 	.word	0x58025880
 8006f08:	aaaaaaab 	.word	0xaaaaaaab
 8006f0c:	400204b8 	.word	0x400204b8
 8006f10:	4002040f 	.word	0x4002040f
 8006f14:	10008200 	.word	0x10008200
 8006f18:	40020880 	.word	0x40020880

08006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d04a      	beq.n	8006fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d847      	bhi.n	8006fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	@ (8006fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a24      	ldr	r2, [pc, #144]	@ (8006fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01d      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a22      	ldr	r2, [pc, #136]	@ (8006fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a21      	ldr	r2, [pc, #132]	@ (8006fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1c      	ldr	r2, [pc, #112]	@ (8006fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d101      	bne.n	8006f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4b17      	ldr	r3, [pc, #92]	@ (8006ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a15      	ldr	r2, [pc, #84]	@ (8006ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006fa4:	671a      	str	r2, [r3, #112]	@ 0x70
 8006fa6:	e009      	b.n	8006fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4b14      	ldr	r3, [pc, #80]	@ (8006ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a11      	ldr	r2, [pc, #68]	@ (8007000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006fba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	409a      	lsls	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	58025408 	.word	0x58025408
 8006fd8:	5802541c 	.word	0x5802541c
 8006fdc:	58025430 	.word	0x58025430
 8006fe0:	58025444 	.word	0x58025444
 8006fe4:	58025458 	.word	0x58025458
 8006fe8:	5802546c 	.word	0x5802546c
 8006fec:	58025480 	.word	0x58025480
 8006ff0:	58025494 	.word	0x58025494
 8006ff4:	1600963f 	.word	0x1600963f
 8006ff8:	58025940 	.word	0x58025940
 8006ffc:	1000823f 	.word	0x1000823f
 8007000:	40020940 	.word	0x40020940

08007004 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e0e3      	b.n	80071de <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2223      	movs	r2, #35	@ 0x23
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fa fafb 	bl	8001624 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800702e:	4b6e      	ldr	r3, [pc, #440]	@ (80071e8 <HAL_ETH_Init+0x1e4>)
 8007030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007034:	4a6c      	ldr	r2, [pc, #432]	@ (80071e8 <HAL_ETH_Init+0x1e4>)
 8007036:	f043 0302 	orr.w	r3, r3, #2
 800703a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800703e:	4b6a      	ldr	r3, [pc, #424]	@ (80071e8 <HAL_ETH_Init+0x1e4>)
 8007040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	60bb      	str	r3, [r7, #8]
 800704a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	7a1b      	ldrb	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007054:	2000      	movs	r0, #0
 8007056:	f7fa ffdf 	bl	8002018 <HAL_SYSCFG_ETHInterfaceSelect>
 800705a:	e003      	b.n	8007064 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800705c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007060:	f7fa ffda 	bl	8002018 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8007064:	4b61      	ldr	r3, [pc, #388]	@ (80071ec <HAL_ETH_Init+0x1e8>)
 8007066:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800707e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007080:	f7fa ff8e 	bl	8001fa0 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007086:	e011      	b.n	80070ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007088:	f7fa ff8a 	bl	8001fa0 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007096:	d909      	bls.n	80070ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2204      	movs	r2, #4
 800709c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	22e0      	movs	r2, #224	@ 0xe0
 80070a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e098      	b.n	80071de <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e4      	bne.n	8007088 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f89e 	bl	8007200 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80070c4:	f001 fea0 	bl	8008e08 <HAL_RCC_GetHCLKFreq>
 80070c8:	4603      	mov	r3, r0
 80070ca:	4a49      	ldr	r2, [pc, #292]	@ (80071f0 <HAL_ETH_Init+0x1ec>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	0c9a      	lsrs	r2, r3, #18
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3a01      	subs	r2, #1
 80070d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fa81 	bl	80075e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80070ee:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070fe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	22e0      	movs	r2, #224	@ 0xe0
 800711a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e05d      	b.n	80071de <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800712e:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <HAL_ETH_Init+0x1f0>)
 8007130:	4013      	ands	r3, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6952      	ldr	r2, [r2, #20]
 8007136:	0051      	lsls	r1, r2, #1
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	430b      	orrs	r3, r1
 800713e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007142:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fae9 	bl	800771e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fb2f 	bl	80077b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	3305      	adds	r3, #5
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	021a      	lsls	r2, r3, #8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	4619      	mov	r1, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	3303      	adds	r3, #3
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	061a      	lsls	r2, r3, #24
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	3302      	adds	r3, #2
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	3301      	adds	r3, #1
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007190:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800719e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80071a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b11      	ldr	r3, [pc, #68]	@ (80071f8 <HAL_ETH_Init+0x1f4>)
 80071b2:	430b      	orrs	r3, r1
 80071b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4b0d      	ldr	r3, [pc, #52]	@ (80071fc <HAL_ETH_Init+0x1f8>)
 80071c6:	430b      	orrs	r3, r1
 80071c8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2210      	movs	r2, #16
 80071d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	58000400 	.word	0x58000400
 80071f0:	431bde83 	.word	0x431bde83
 80071f4:	ffff8001 	.word	0xffff8001
 80071f8:	0c020060 	.word	0x0c020060
 80071fc:	0c20c000 	.word	0x0c20c000

08007200 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007210:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007218:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800721a:	f001 fdf5 	bl	8008e08 <HAL_RCC_GetHCLKFreq>
 800721e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4a1a      	ldr	r2, [pc, #104]	@ (800728c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d804      	bhi.n	8007232 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e022      	b.n	8007278 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4a16      	ldr	r2, [pc, #88]	@ (8007290 <HAL_ETH_SetMDIOClockRange+0x90>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d204      	bcs.n	8007244 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e019      	b.n	8007278 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4a13      	ldr	r2, [pc, #76]	@ (8007294 <HAL_ETH_SetMDIOClockRange+0x94>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d915      	bls.n	8007278 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a12      	ldr	r2, [pc, #72]	@ (8007298 <HAL_ETH_SetMDIOClockRange+0x98>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d804      	bhi.n	800725e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e00c      	b.n	8007278 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	4a0e      	ldr	r2, [pc, #56]	@ (800729c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d804      	bhi.n	8007270 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	e003      	b.n	8007278 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8007276:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	02160ebf 	.word	0x02160ebf
 8007290:	03938700 	.word	0x03938700
 8007294:	05f5e0ff 	.word	0x05f5e0ff
 8007298:	08f0d17f 	.word	0x08f0d17f
 800729c:	0ee6b27f 	.word	0x0ee6b27f

080072a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80072b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	791b      	ldrb	r3, [r3, #4]
 80072b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80072ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	7b1b      	ldrb	r3, [r3, #12]
 80072c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80072c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	7b5b      	ldrb	r3, [r3, #13]
 80072c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80072ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	7b9b      	ldrb	r3, [r3, #14]
 80072d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80072d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	7bdb      	ldrb	r3, [r3, #15]
 80072d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80072da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	d102      	bne.n	80072ea <ETH_SetMACConfig+0x4a>
 80072e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80072e8:	e000      	b.n	80072ec <ETH_SetMACConfig+0x4c>
 80072ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80072ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	7c52      	ldrb	r2, [r2, #17]
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	d102      	bne.n	80072fc <ETH_SetMACConfig+0x5c>
 80072f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80072fa:	e000      	b.n	80072fe <ETH_SetMACConfig+0x5e>
 80072fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80072fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	7c9b      	ldrb	r3, [r3, #18]
 8007304:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007306:	431a      	orrs	r2, r3
               macconf->Speed |
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800730c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	7f1b      	ldrb	r3, [r3, #28]
 8007318:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800731a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	7f5b      	ldrb	r3, [r3, #29]
 8007320:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007322:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	7f92      	ldrb	r2, [r2, #30]
 8007328:	2a00      	cmp	r2, #0
 800732a:	d102      	bne.n	8007332 <ETH_SetMACConfig+0x92>
 800732c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007330:	e000      	b.n	8007334 <ETH_SetMACConfig+0x94>
 8007332:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007334:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	7fdb      	ldrb	r3, [r3, #31]
 800733a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800733c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007344:	2a00      	cmp	r2, #0
 8007346:	d102      	bne.n	800734e <ETH_SetMACConfig+0xae>
 8007348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800734c:	e000      	b.n	8007350 <ETH_SetMACConfig+0xb0>
 800734e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007350:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007356:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800735e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007360:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b56      	ldr	r3, [pc, #344]	@ (80074cc <ETH_SetMACConfig+0x22c>)
 8007372:	4013      	ands	r3, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	68f9      	ldr	r1, [r7, #12]
 800737a:	430b      	orrs	r3, r1
 800737c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007382:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800738a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800738c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007394:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007396:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800739e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80073a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d102      	bne.n	80073b2 <ETH_SetMACConfig+0x112>
 80073ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80073b0:	e000      	b.n	80073b4 <ETH_SetMACConfig+0x114>
 80073b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80073b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	4b42      	ldr	r3, [pc, #264]	@ (80074d0 <ETH_SetMACConfig+0x230>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	430b      	orrs	r3, r1
 80073d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	4b3a      	ldr	r3, [pc, #232]	@ (80074d4 <ETH_SetMACConfig+0x234>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	430b      	orrs	r3, r1
 80073f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80073fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007402:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800740a:	2a00      	cmp	r2, #0
 800740c:	d101      	bne.n	8007412 <ETH_SetMACConfig+0x172>
 800740e:	2280      	movs	r2, #128	@ 0x80
 8007410:	e000      	b.n	8007414 <ETH_SetMACConfig+0x174>
 8007412:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007414:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007426:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800742a:	4013      	ands	r3, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	430b      	orrs	r3, r1
 8007434:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800743c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8007444:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	f023 0103 	bic.w	r1, r3, #3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	430a      	orrs	r2, r1
 800745e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800746a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007486:	2a00      	cmp	r2, #0
 8007488:	d101      	bne.n	800748e <ETH_SetMACConfig+0x1ee>
 800748a:	2240      	movs	r2, #64	@ 0x40
 800748c:	e000      	b.n	8007490 <ETH_SetMACConfig+0x1f0>
 800748e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007490:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007498:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800749a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80074a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80074b0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	00048083 	.word	0x00048083
 80074d0:	c0f88000 	.word	0xc0f88000
 80074d4:	fffffef0 	.word	0xfffffef0

080074d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	4b38      	ldr	r3, [pc, #224]	@ (80075d0 <ETH_SetDMAConfig+0xf8>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	6811      	ldr	r1, [r2, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	430b      	orrs	r3, r1
 80074fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80074fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	791b      	ldrb	r3, [r3, #4]
 8007504:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800750a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	7b1b      	ldrb	r3, [r3, #12]
 8007510:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	4b2c      	ldr	r3, [pc, #176]	@ (80075d4 <ETH_SetDMAConfig+0xfc>)
 8007522:	4013      	ands	r3, r2
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	430b      	orrs	r3, r1
 800752c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007530:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	7b5b      	ldrb	r3, [r3, #13]
 8007536:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007548:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800754c:	4b22      	ldr	r3, [pc, #136]	@ (80075d8 <ETH_SetDMAConfig+0x100>)
 800754e:	4013      	ands	r3, r2
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	68f9      	ldr	r1, [r7, #12]
 8007556:	430b      	orrs	r3, r1
 8007558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800755c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	7d1b      	ldrb	r3, [r3, #20]
 8007568:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800756a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	7f5b      	ldrb	r3, [r3, #29]
 8007570:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8007582:	4b16      	ldr	r3, [pc, #88]	@ (80075dc <ETH_SetDMAConfig+0x104>)
 8007584:	4013      	ands	r3, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	430b      	orrs	r3, r1
 800758e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007592:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	7f1b      	ldrb	r3, [r3, #28]
 800759a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80075b0:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <ETH_SetDMAConfig+0x108>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	430b      	orrs	r3, r1
 80075bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075c0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	ffff87fd 	.word	0xffff87fd
 80075d4:	ffff2ffe 	.word	0xffff2ffe
 80075d8:	fffec000 	.word	0xfffec000
 80075dc:	ffc0efef 	.word	0xffc0efef
 80075e0:	7fc0ffff 	.word	0x7fc0ffff

080075e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b0a4      	sub	sp, #144	@ 0x90
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80075f2:	2300      	movs	r3, #0
 80075f4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007624:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007626:	2300      	movs	r3, #0
 8007628:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800762c:	2300      	movs	r3, #0
 800762e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007630:	2300      	movs	r3, #0
 8007632:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007636:	2300      	movs	r3, #0
 8007638:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800763c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8007640:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007642:	2300      	movs	r3, #0
 8007644:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007648:	2300      	movs	r3, #0
 800764a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007658:	2300      	movs	r3, #0
 800765a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800765e:	2300      	movs	r3, #0
 8007660:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8007662:	2300      	movs	r3, #0
 8007664:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007666:	2300      	movs	r3, #0
 8007668:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800766a:	2300      	movs	r3, #0
 800766c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007670:	2300      	movs	r3, #0
 8007672:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800767c:	2320      	movs	r3, #32
 800767e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800768e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8007692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007694:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007698:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800769a:	2300      	movs	r3, #0
 800769c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80076a0:	2302      	movs	r3, #2
 80076a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80076be:	2300      	movs	r3, #0
 80076c0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80076c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff fde6 	bl	80072a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80076d8:	2301      	movs	r3, #1
 80076da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80076dc:	2300      	movs	r3, #0
 80076de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80076ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80076f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80076f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80076fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80076fe:	2300      	movs	r3, #0
 8007700:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007704:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800770a:	f107 0308 	add.w	r3, r7, #8
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff fee1 	bl	80074d8 <ETH_SetDMAConfig>
}
 8007716:	bf00      	nop
 8007718:	3790      	adds	r7, #144	@ 0x90
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	e01d      	b.n	8007768 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68d9      	ldr	r1, [r3, #12]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4613      	mov	r3, r2
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	4413      	add	r3, r2
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	440b      	add	r3, r1
 800773c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	3206      	adds	r2, #6
 800775e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b03      	cmp	r3, #3
 800776c:	d9de      	bls.n	800772c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800777c:	461a      	mov	r2, r3
 800777e:	2303      	movs	r3, #3
 8007780:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007790:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e023      	b.n	8007806 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6919      	ldr	r1, [r3, #16]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4613      	mov	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	440b      	add	r3, r1
 80077ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2200      	movs	r2, #0
 80077da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2200      	movs	r2, #0
 80077f2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	3212      	adds	r2, #18
 80077fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d9d8      	bls.n	80077be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007832:	461a      	mov	r2, r3
 8007834:	2303      	movs	r3, #3
 8007836:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691a      	ldr	r2, [r3, #16]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007846:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800785a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800785e:	bf00      	nop
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800786c:	b480      	push	{r7}
 800786e:	b089      	sub	sp, #36	@ 0x24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800787a:	4b89      	ldr	r3, [pc, #548]	@ (8007aa0 <HAL_GPIO_Init+0x234>)
 800787c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800787e:	e194      	b.n	8007baa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	4013      	ands	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8186 	beq.w	8007ba4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d005      	beq.n	80078b0 <HAL_GPIO_Init+0x44>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d130      	bne.n	8007912 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	2203      	movs	r2, #3
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	43db      	mvns	r3, r3
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4013      	ands	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078e6:	2201      	movs	r2, #1
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43db      	mvns	r3, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	4013      	ands	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	091b      	lsrs	r3, r3, #4
 80078fc:	f003 0201 	and.w	r2, r3, #1
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4313      	orrs	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d017      	beq.n	800794e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	2203      	movs	r2, #3
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4013      	ands	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4313      	orrs	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d123      	bne.n	80079a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	08da      	lsrs	r2, r3, #3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3208      	adds	r2, #8
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	220f      	movs	r2, #15
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	43db      	mvns	r3, r3
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4313      	orrs	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	08da      	lsrs	r2, r3, #3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3208      	adds	r2, #8
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	2203      	movs	r2, #3
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f003 0203 	and.w	r2, r3, #3
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	69ba      	ldr	r2, [r7, #24]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80e0 	beq.w	8007ba4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079e4:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa4 <HAL_GPIO_Init+0x238>)
 80079e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079ea:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa4 <HAL_GPIO_Init+0x238>)
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80079f4:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa4 <HAL_GPIO_Init+0x238>)
 80079f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a02:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <HAL_GPIO_Init+0x23c>)
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	089b      	lsrs	r3, r3, #2
 8007a08:	3302      	adds	r3, #2
 8007a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	220f      	movs	r2, #15
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a20      	ldr	r2, [pc, #128]	@ (8007aac <HAL_GPIO_Init+0x240>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d052      	beq.n	8007ad4 <HAL_GPIO_Init+0x268>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab0 <HAL_GPIO_Init+0x244>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d031      	beq.n	8007a9a <HAL_GPIO_Init+0x22e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab4 <HAL_GPIO_Init+0x248>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d02b      	beq.n	8007a96 <HAL_GPIO_Init+0x22a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab8 <HAL_GPIO_Init+0x24c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d025      	beq.n	8007a92 <HAL_GPIO_Init+0x226>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a1c      	ldr	r2, [pc, #112]	@ (8007abc <HAL_GPIO_Init+0x250>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01f      	beq.n	8007a8e <HAL_GPIO_Init+0x222>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac0 <HAL_GPIO_Init+0x254>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d019      	beq.n	8007a8a <HAL_GPIO_Init+0x21e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1a      	ldr	r2, [pc, #104]	@ (8007ac4 <HAL_GPIO_Init+0x258>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <HAL_GPIO_Init+0x21a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <HAL_GPIO_Init+0x25c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00d      	beq.n	8007a82 <HAL_GPIO_Init+0x216>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_GPIO_Init+0x260>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <HAL_GPIO_Init+0x212>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a17      	ldr	r2, [pc, #92]	@ (8007ad0 <HAL_GPIO_Init+0x264>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d101      	bne.n	8007a7a <HAL_GPIO_Init+0x20e>
 8007a76:	2309      	movs	r3, #9
 8007a78:	e02d      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	e02b      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a7e:	2308      	movs	r3, #8
 8007a80:	e029      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a82:	2307      	movs	r3, #7
 8007a84:	e027      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a86:	2306      	movs	r3, #6
 8007a88:	e025      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a8a:	2305      	movs	r3, #5
 8007a8c:	e023      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a8e:	2304      	movs	r3, #4
 8007a90:	e021      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a92:	2303      	movs	r3, #3
 8007a94:	e01f      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e01d      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e01b      	b.n	8007ad6 <HAL_GPIO_Init+0x26a>
 8007a9e:	bf00      	nop
 8007aa0:	58000080 	.word	0x58000080
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	58000400 	.word	0x58000400
 8007aac:	58020000 	.word	0x58020000
 8007ab0:	58020400 	.word	0x58020400
 8007ab4:	58020800 	.word	0x58020800
 8007ab8:	58020c00 	.word	0x58020c00
 8007abc:	58021000 	.word	0x58021000
 8007ac0:	58021400 	.word	0x58021400
 8007ac4:	58021800 	.word	0x58021800
 8007ac8:	58021c00 	.word	0x58021c00
 8007acc:	58022000 	.word	0x58022000
 8007ad0:	58022400 	.word	0x58022400
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	f002 0203 	and.w	r2, r2, #3
 8007adc:	0092      	lsls	r2, r2, #2
 8007ade:	4093      	lsls	r3, r2
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ae6:	4938      	ldr	r1, [pc, #224]	@ (8007bc8 <HAL_GPIO_Init+0x35c>)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	089b      	lsrs	r3, r3, #2
 8007aec:	3302      	adds	r3, #2
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	43db      	mvns	r3, r3
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	4013      	ands	r3, r2
 8007b04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4013      	ands	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	43db      	mvns	r3, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4013      	ands	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f ae63 	bne.w	8007880 <HAL_GPIO_Init+0x14>
  }
}
 8007bba:	bf00      	nop
 8007bbc:	bf00      	nop
 8007bbe:	3724      	adds	r7, #36	@ 0x24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	58000400 	.word	0x58000400

08007bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	807b      	strh	r3, [r7, #2]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bdc:	787b      	ldrb	r3, [r7, #1]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007be2:	887a      	ldrh	r2, [r7, #2]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007be8:	e003      	b.n	8007bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007bea:	887b      	ldrh	r3, [r7, #2]
 8007bec:	041a      	lsls	r2, r3, #16
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	619a      	str	r2, [r3, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af02      	add	r7, sp, #8
 8007c04:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0fe      	b.n	8007e0e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7f9 ff0f 	bl	8001a48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f006 faee 	bl	800e218 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7c1a      	ldrb	r2, [r3, #16]
 8007c44:	f88d 2000 	strb.w	r2, [sp]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c4c:	f006 fa72 	bl	800e134 <USB_CoreInit>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e0d5      	b.n	8007e0e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f006 fae6 	bl	800e23a <USB_SetCurrentMode>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e0c6      	b.n	8007e0e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e04a      	b.n	8007d1c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c86:	7bfa      	ldrb	r2, [r7, #15]
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	3315      	adds	r3, #21
 8007c96:	2201      	movs	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c9a:	7bfa      	ldrb	r2, [r7, #15]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	3314      	adds	r3, #20
 8007caa:	7bfa      	ldrb	r2, [r7, #15]
 8007cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007cae:	7bfa      	ldrb	r2, [r7, #15]
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	b298      	uxth	r0, r3
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	00db      	lsls	r3, r3, #3
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	332e      	adds	r3, #46	@ 0x2e
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cc6:	7bfa      	ldrb	r2, [r7, #15]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007cda:	7bfa      	ldrb	r2, [r7, #15]
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	331c      	adds	r3, #28
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007cee:	7bfa      	ldrb	r2, [r7, #15]
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	3320      	adds	r3, #32
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d02:	7bfa      	ldrb	r2, [r7, #15]
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3324      	adds	r3, #36	@ 0x24
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d3af      	bcc.n	8007c86 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
 8007d2a:	e044      	b.n	8007db6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d2c:	7bfa      	ldrb	r2, [r7, #15]
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007d3e:	2200      	movs	r2, #0
 8007d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007d54:	7bfa      	ldrb	r2, [r7, #15]
 8007d56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d58:	7bfa      	ldrb	r2, [r7, #15]
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d6e:	7bfa      	ldrb	r2, [r7, #15]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d84:	7bfa      	ldrb	r2, [r7, #15]
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d9a:	7bfa      	ldrb	r2, [r7, #15]
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	3301      	adds	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	7bfa      	ldrb	r2, [r7, #15]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3b5      	bcc.n	8007d2c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	7c1a      	ldrb	r2, [r3, #16]
 8007dc8:	f88d 2000 	strb.w	r2, [sp]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dd0:	f006 fa80 	bl	800e2d4 <USB_DevInit>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e013      	b.n	8007e0e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7b1b      	ldrb	r3, [r3, #12]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d102      	bne.n	8007e02 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f80b 	bl	8007e18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f006 fc3b 	bl	800e682 <USB_DevDisconnect>

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e46:	4b05      	ldr	r3, [pc, #20]	@ (8007e5c <HAL_PCDEx_ActivateLPM+0x44>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	10000003 	.word	0x10000003

08007e60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e68:	4b19      	ldr	r3, [pc, #100]	@ (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d00a      	beq.n	8007e8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e74:	4b16      	ldr	r3, [pc, #88]	@ (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d001      	beq.n	8007e86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e01f      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e01d      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e8a:	4b11      	ldr	r3, [pc, #68]	@ (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f023 0207 	bic.w	r2, r3, #7
 8007e92:	490f      	ldr	r1, [pc, #60]	@ (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e9a:	f7fa f881 	bl	8001fa0 <HAL_GetTick>
 8007e9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ea0:	e009      	b.n	8007eb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ea2:	f7fa f87d 	bl	8001fa0 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eb0:	d901      	bls.n	8007eb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e007      	b.n	8007ec6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007eb6:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec2:	d1ee      	bne.n	8007ea2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	58024800 	.word	0x58024800

08007ed4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ed8:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4a04      	ldr	r2, [pc, #16]	@ (8007ef0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ee2:	60d3      	str	r3, [r2, #12]
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	58024800 	.word	0x58024800

08007ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08c      	sub	sp, #48	@ 0x30
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f000 bc48 	b.w	8008798 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8088 	beq.w	8008026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f16:	4b99      	ldr	r3, [pc, #612]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f20:	4b96      	ldr	r3, [pc, #600]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d007      	beq.n	8007f3c <HAL_RCC_OscConfig+0x48>
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	2b18      	cmp	r3, #24
 8007f30:	d111      	bne.n	8007f56 <HAL_RCC_OscConfig+0x62>
 8007f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d10c      	bne.n	8007f56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f3c:	4b8f      	ldr	r3, [pc, #572]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d06d      	beq.n	8008024 <HAL_RCC_OscConfig+0x130>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d169      	bne.n	8008024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f000 bc21 	b.w	8008798 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f5e:	d106      	bne.n	8007f6e <HAL_RCC_OscConfig+0x7a>
 8007f60:	4b86      	ldr	r3, [pc, #536]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a85      	ldr	r2, [pc, #532]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e02e      	b.n	8007fcc <HAL_RCC_OscConfig+0xd8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x9c>
 8007f76:	4b81      	ldr	r3, [pc, #516]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a80      	ldr	r2, [pc, #512]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	4b7e      	ldr	r3, [pc, #504]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a7d      	ldr	r2, [pc, #500]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e01d      	b.n	8007fcc <HAL_RCC_OscConfig+0xd8>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f98:	d10c      	bne.n	8007fb4 <HAL_RCC_OscConfig+0xc0>
 8007f9a:	4b78      	ldr	r3, [pc, #480]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a77      	ldr	r2, [pc, #476]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	4b75      	ldr	r3, [pc, #468]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a74      	ldr	r2, [pc, #464]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	e00b      	b.n	8007fcc <HAL_RCC_OscConfig+0xd8>
 8007fb4:	4b71      	ldr	r3, [pc, #452]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a70      	ldr	r2, [pc, #448]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	4b6e      	ldr	r3, [pc, #440]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d013      	beq.n	8007ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7f9 ffe4 	bl	8001fa0 <HAL_GetTick>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fdc:	f7f9 ffe0 	bl	8001fa0 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b64      	cmp	r3, #100	@ 0x64
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e3d4      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fee:	4b63      	ldr	r3, [pc, #396]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f0      	beq.n	8007fdc <HAL_RCC_OscConfig+0xe8>
 8007ffa:	e014      	b.n	8008026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7f9 ffd0 	bl	8001fa0 <HAL_GetTick>
 8008000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008004:	f7f9 ffcc 	bl	8001fa0 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b64      	cmp	r3, #100	@ 0x64
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e3c0      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008016:	4b59      	ldr	r3, [pc, #356]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x110>
 8008022:	e000      	b.n	8008026 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80ca 	beq.w	80081c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008034:	4b51      	ldr	r3, [pc, #324]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800803c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800803e:	4b4f      	ldr	r3, [pc, #316]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008042:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <HAL_RCC_OscConfig+0x166>
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	2b18      	cmp	r3, #24
 800804e:	d156      	bne.n	80080fe <HAL_RCC_OscConfig+0x20a>
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d151      	bne.n	80080fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800805a:	4b48      	ldr	r3, [pc, #288]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0304 	and.w	r3, r3, #4
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <HAL_RCC_OscConfig+0x17e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e392      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008072:	4b42      	ldr	r3, [pc, #264]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f023 0219 	bic.w	r2, r3, #25
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	493f      	ldr	r1, [pc, #252]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008080:	4313      	orrs	r3, r2
 8008082:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008084:	f7f9 ff8c 	bl	8001fa0 <HAL_GetTick>
 8008088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800808c:	f7f9 ff88 	bl	8001fa0 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e37c      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800809e:	4b37      	ldr	r3, [pc, #220]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0f0      	beq.n	800808c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080aa:	f7f9 ffa9 	bl	8002000 <HAL_GetREVID>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d817      	bhi.n	80080e8 <HAL_RCC_OscConfig+0x1f4>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d108      	bne.n	80080d2 <HAL_RCC_OscConfig+0x1de>
 80080c0:	4b2e      	ldr	r3, [pc, #184]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80080c8:	4a2c      	ldr	r2, [pc, #176]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080d0:	e07a      	b.n	80081c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d2:	4b2a      	ldr	r3, [pc, #168]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	031b      	lsls	r3, r3, #12
 80080e0:	4926      	ldr	r1, [pc, #152]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e6:	e06f      	b.n	80081c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e8:	4b24      	ldr	r3, [pc, #144]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	061b      	lsls	r3, r3, #24
 80080f6:	4921      	ldr	r1, [pc, #132]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080fc:	e064      	b.n	80081c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d047      	beq.n	8008196 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008106:	4b1d      	ldr	r3, [pc, #116]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f023 0219 	bic.w	r2, r3, #25
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	491a      	ldr	r1, [pc, #104]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008114:	4313      	orrs	r3, r2
 8008116:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7f9 ff42 	bl	8001fa0 <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008120:	f7f9 ff3e 	bl	8001fa0 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e332      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008132:	4b12      	ldr	r3, [pc, #72]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800813e:	f7f9 ff5f 	bl	8002000 <HAL_GetREVID>
 8008142:	4603      	mov	r3, r0
 8008144:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008148:	4293      	cmp	r3, r2
 800814a:	d819      	bhi.n	8008180 <HAL_RCC_OscConfig+0x28c>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b40      	cmp	r3, #64	@ 0x40
 8008152:	d108      	bne.n	8008166 <HAL_RCC_OscConfig+0x272>
 8008154:	4b09      	ldr	r3, [pc, #36]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800815c:	4a07      	ldr	r2, [pc, #28]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 800815e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008162:	6053      	str	r3, [r2, #4]
 8008164:	e030      	b.n	80081c8 <HAL_RCC_OscConfig+0x2d4>
 8008166:	4b05      	ldr	r3, [pc, #20]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	031b      	lsls	r3, r3, #12
 8008174:	4901      	ldr	r1, [pc, #4]	@ (800817c <HAL_RCC_OscConfig+0x288>)
 8008176:	4313      	orrs	r3, r2
 8008178:	604b      	str	r3, [r1, #4]
 800817a:	e025      	b.n	80081c8 <HAL_RCC_OscConfig+0x2d4>
 800817c:	58024400 	.word	0x58024400
 8008180:	4b9a      	ldr	r3, [pc, #616]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	061b      	lsls	r3, r3, #24
 800818e:	4997      	ldr	r1, [pc, #604]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008190:	4313      	orrs	r3, r2
 8008192:	604b      	str	r3, [r1, #4]
 8008194:	e018      	b.n	80081c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008196:	4b95      	ldr	r3, [pc, #596]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a94      	ldr	r2, [pc, #592]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a2:	f7f9 fefd 	bl	8001fa0 <HAL_GetTick>
 80081a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081aa:	f7f9 fef9 	bl	8001fa0 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e2ed      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081bc:	4b8b      	ldr	r3, [pc, #556]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f0      	bne.n	80081aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80a9 	beq.w	8008328 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081d6:	4b85      	ldr	r3, [pc, #532]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081e0:	4b82      	ldr	r3, [pc, #520]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80081e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d007      	beq.n	80081fc <HAL_RCC_OscConfig+0x308>
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	2b18      	cmp	r3, #24
 80081f0:	d13a      	bne.n	8008268 <HAL_RCC_OscConfig+0x374>
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d135      	bne.n	8008268 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081fc:	4b7b      	ldr	r3, [pc, #492]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <HAL_RCC_OscConfig+0x320>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	2b80      	cmp	r3, #128	@ 0x80
 800820e:	d001      	beq.n	8008214 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e2c1      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008214:	f7f9 fef4 	bl	8002000 <HAL_GetREVID>
 8008218:	4603      	mov	r3, r0
 800821a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800821e:	4293      	cmp	r3, r2
 8008220:	d817      	bhi.n	8008252 <HAL_RCC_OscConfig+0x35e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	2b20      	cmp	r3, #32
 8008228:	d108      	bne.n	800823c <HAL_RCC_OscConfig+0x348>
 800822a:	4b70      	ldr	r3, [pc, #448]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008232:	4a6e      	ldr	r2, [pc, #440]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008234:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008238:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800823a:	e075      	b.n	8008328 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800823c:	4b6b      	ldr	r3, [pc, #428]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	069b      	lsls	r3, r3, #26
 800824a:	4968      	ldr	r1, [pc, #416]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 800824c:	4313      	orrs	r3, r2
 800824e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008250:	e06a      	b.n	8008328 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008252:	4b66      	ldr	r3, [pc, #408]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	061b      	lsls	r3, r3, #24
 8008260:	4962      	ldr	r1, [pc, #392]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008262:	4313      	orrs	r3, r2
 8008264:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008266:	e05f      	b.n	8008328 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d042      	beq.n	80082f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008270:	4b5e      	ldr	r3, [pc, #376]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a5d      	ldr	r2, [pc, #372]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800827a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827c:	f7f9 fe90 	bl	8001fa0 <HAL_GetTick>
 8008280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008284:	f7f9 fe8c 	bl	8001fa0 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e280      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008296:	4b55      	ldr	r3, [pc, #340]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082a2:	f7f9 fead 	bl	8002000 <HAL_GetREVID>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d817      	bhi.n	80082e0 <HAL_RCC_OscConfig+0x3ec>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d108      	bne.n	80082ca <HAL_RCC_OscConfig+0x3d6>
 80082b8:	4b4c      	ldr	r3, [pc, #304]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80082c0:	4a4a      	ldr	r2, [pc, #296]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082c6:	6053      	str	r3, [r2, #4]
 80082c8:	e02e      	b.n	8008328 <HAL_RCC_OscConfig+0x434>
 80082ca:	4b48      	ldr	r3, [pc, #288]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	069b      	lsls	r3, r3, #26
 80082d8:	4944      	ldr	r1, [pc, #272]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
 80082de:	e023      	b.n	8008328 <HAL_RCC_OscConfig+0x434>
 80082e0:	4b42      	ldr	r3, [pc, #264]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	061b      	lsls	r3, r3, #24
 80082ee:	493f      	ldr	r1, [pc, #252]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60cb      	str	r3, [r1, #12]
 80082f4:	e018      	b.n	8008328 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082f6:	4b3d      	ldr	r3, [pc, #244]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3c      	ldr	r2, [pc, #240]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80082fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008302:	f7f9 fe4d 	bl	8001fa0 <HAL_GetTick>
 8008306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008308:	e008      	b.n	800831c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800830a:	f7f9 fe49 	bl	8001fa0 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e23d      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800831c:	4b33      	ldr	r3, [pc, #204]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f0      	bne.n	800830a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d036      	beq.n	80083a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d019      	beq.n	8008370 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800833c:	4b2b      	ldr	r3, [pc, #172]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 800833e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008340:	4a2a      	ldr	r2, [pc, #168]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008342:	f043 0301 	orr.w	r3, r3, #1
 8008346:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008348:	f7f9 fe2a 	bl	8001fa0 <HAL_GetTick>
 800834c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008350:	f7f9 fe26 	bl	8001fa0 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e21a      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008362:	4b22      	ldr	r3, [pc, #136]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f0      	beq.n	8008350 <HAL_RCC_OscConfig+0x45c>
 800836e:	e018      	b.n	80083a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008370:	4b1e      	ldr	r3, [pc, #120]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008374:	4a1d      	ldr	r2, [pc, #116]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008376:	f023 0301 	bic.w	r3, r3, #1
 800837a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800837c:	f7f9 fe10 	bl	8001fa0 <HAL_GetTick>
 8008380:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008384:	f7f9 fe0c 	bl	8001fa0 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e200      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008396:	4b15      	ldr	r3, [pc, #84]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 8008398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d039      	beq.n	8008422 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01c      	beq.n	80083f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083b6:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a0c      	ldr	r2, [pc, #48]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80083bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083c2:	f7f9 fded 	bl	8001fa0 <HAL_GetTick>
 80083c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083c8:	e008      	b.n	80083dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ca:	f7f9 fde9 	bl	8001fa0 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e1dd      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083dc:	4b03      	ldr	r3, [pc, #12]	@ (80083ec <HAL_RCC_OscConfig+0x4f8>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0f0      	beq.n	80083ca <HAL_RCC_OscConfig+0x4d6>
 80083e8:	e01b      	b.n	8008422 <HAL_RCC_OscConfig+0x52e>
 80083ea:	bf00      	nop
 80083ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083f0:	4b9b      	ldr	r3, [pc, #620]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a9a      	ldr	r2, [pc, #616]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80083f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083fc:	f7f9 fdd0 	bl	8001fa0 <HAL_GetTick>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008404:	f7f9 fdcc 	bl	8001fa0 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e1c0      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008416:	4b92      	ldr	r3, [pc, #584]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f0      	bne.n	8008404 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8081 	beq.w	8008532 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008430:	4b8c      	ldr	r3, [pc, #560]	@ (8008664 <HAL_RCC_OscConfig+0x770>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a8b      	ldr	r2, [pc, #556]	@ (8008664 <HAL_RCC_OscConfig+0x770>)
 8008436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800843a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800843c:	f7f9 fdb0 	bl	8001fa0 <HAL_GetTick>
 8008440:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008444:	f7f9 fdac 	bl	8001fa0 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b64      	cmp	r3, #100	@ 0x64
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e1a0      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008456:	4b83      	ldr	r3, [pc, #524]	@ (8008664 <HAL_RCC_OscConfig+0x770>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d106      	bne.n	8008478 <HAL_RCC_OscConfig+0x584>
 800846a:	4b7d      	ldr	r3, [pc, #500]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846e:	4a7c      	ldr	r2, [pc, #496]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008470:	f043 0301 	orr.w	r3, r3, #1
 8008474:	6713      	str	r3, [r2, #112]	@ 0x70
 8008476:	e02d      	b.n	80084d4 <HAL_RCC_OscConfig+0x5e0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <HAL_RCC_OscConfig+0x5a6>
 8008480:	4b77      	ldr	r3, [pc, #476]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008484:	4a76      	ldr	r2, [pc, #472]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	6713      	str	r3, [r2, #112]	@ 0x70
 800848c:	4b74      	ldr	r3, [pc, #464]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008490:	4a73      	ldr	r2, [pc, #460]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008492:	f023 0304 	bic.w	r3, r3, #4
 8008496:	6713      	str	r3, [r2, #112]	@ 0x70
 8008498:	e01c      	b.n	80084d4 <HAL_RCC_OscConfig+0x5e0>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d10c      	bne.n	80084bc <HAL_RCC_OscConfig+0x5c8>
 80084a2:	4b6f      	ldr	r3, [pc, #444]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a6:	4a6e      	ldr	r2, [pc, #440]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084a8:	f043 0304 	orr.w	r3, r3, #4
 80084ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80084ae:	4b6c      	ldr	r3, [pc, #432]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80084ba:	e00b      	b.n	80084d4 <HAL_RCC_OscConfig+0x5e0>
 80084bc:	4b68      	ldr	r3, [pc, #416]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c0:	4a67      	ldr	r2, [pc, #412]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80084c8:	4b65      	ldr	r3, [pc, #404]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084cc:	4a64      	ldr	r2, [pc, #400]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084ce:	f023 0304 	bic.w	r3, r3, #4
 80084d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d015      	beq.n	8008508 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084dc:	f7f9 fd60 	bl	8001fa0 <HAL_GetTick>
 80084e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084e2:	e00a      	b.n	80084fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084e4:	f7f9 fd5c 	bl	8001fa0 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e14e      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084fa:	4b59      	ldr	r3, [pc, #356]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80084fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0ee      	beq.n	80084e4 <HAL_RCC_OscConfig+0x5f0>
 8008506:	e014      	b.n	8008532 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008508:	f7f9 fd4a 	bl	8001fa0 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800850e:	e00a      	b.n	8008526 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008510:	f7f9 fd46 	bl	8001fa0 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800851e:	4293      	cmp	r3, r2
 8008520:	d901      	bls.n	8008526 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e138      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008526:	4b4e      	ldr	r3, [pc, #312]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1ee      	bne.n	8008510 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 812d 	beq.w	8008796 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800853c:	4b48      	ldr	r3, [pc, #288]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008544:	2b18      	cmp	r3, #24
 8008546:	f000 80bd 	beq.w	80086c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854e:	2b02      	cmp	r3, #2
 8008550:	f040 809e 	bne.w	8008690 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008554:	4b42      	ldr	r3, [pc, #264]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a41      	ldr	r2, [pc, #260]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800855a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800855e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7f9 fd1e 	bl	8001fa0 <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008568:	f7f9 fd1a 	bl	8001fa0 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e10e      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800857a:	4b39      	ldr	r3, [pc, #228]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008586:	4b36      	ldr	r3, [pc, #216]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008588:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800858a:	4b37      	ldr	r3, [pc, #220]	@ (8008668 <HAL_RCC_OscConfig+0x774>)
 800858c:	4013      	ands	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008596:	0112      	lsls	r2, r2, #4
 8008598:	430a      	orrs	r2, r1
 800859a:	4931      	ldr	r1, [pc, #196]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800859c:	4313      	orrs	r3, r2
 800859e:	628b      	str	r3, [r1, #40]	@ 0x28
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a4:	3b01      	subs	r3, #1
 80085a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ae:	3b01      	subs	r3, #1
 80085b0:	025b      	lsls	r3, r3, #9
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	431a      	orrs	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ba:	3b01      	subs	r3, #1
 80085bc:	041b      	lsls	r3, r3, #16
 80085be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c8:	3b01      	subs	r3, #1
 80085ca:	061b      	lsls	r3, r3, #24
 80085cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085d0:	4923      	ldr	r1, [pc, #140]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80085d6:	4b22      	ldr	r3, [pc, #136]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	4a21      	ldr	r2, [pc, #132]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80085e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085e6:	4b21      	ldr	r3, [pc, #132]	@ (800866c <HAL_RCC_OscConfig+0x778>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085ee:	00d2      	lsls	r2, r2, #3
 80085f0:	491b      	ldr	r1, [pc, #108]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	f023 020c 	bic.w	r2, r3, #12
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008602:	4917      	ldr	r1, [pc, #92]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008604:	4313      	orrs	r3, r2
 8008606:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008608:	4b15      	ldr	r3, [pc, #84]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	f023 0202 	bic.w	r2, r3, #2
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008614:	4912      	ldr	r1, [pc, #72]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008616:	4313      	orrs	r3, r2
 8008618:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800861a:	4b11      	ldr	r3, [pc, #68]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	4a10      	ldr	r2, [pc, #64]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008626:	4b0e      	ldr	r3, [pc, #56]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862a:	4a0d      	ldr	r2, [pc, #52]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800862c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008632:	4b0b      	ldr	r3, [pc, #44]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	4a0a      	ldr	r2, [pc, #40]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800863c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800863e:	4b08      	ldr	r3, [pc, #32]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	4a07      	ldr	r2, [pc, #28]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800864a:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <HAL_RCC_OscConfig+0x76c>)
 8008650:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008656:	f7f9 fca3 	bl	8001fa0 <HAL_GetTick>
 800865a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800865c:	e011      	b.n	8008682 <HAL_RCC_OscConfig+0x78e>
 800865e:	bf00      	nop
 8008660:	58024400 	.word	0x58024400
 8008664:	58024800 	.word	0x58024800
 8008668:	fffffc0c 	.word	0xfffffc0c
 800866c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008670:	f7f9 fc96 	bl	8001fa0 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e08a      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008682:	4b47      	ldr	r3, [pc, #284]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f0      	beq.n	8008670 <HAL_RCC_OscConfig+0x77c>
 800868e:	e082      	b.n	8008796 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008690:	4b43      	ldr	r3, [pc, #268]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a42      	ldr	r2, [pc, #264]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800869a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869c:	f7f9 fc80 	bl	8001fa0 <HAL_GetTick>
 80086a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086a4:	f7f9 fc7c 	bl	8001fa0 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e070      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086b6:	4b3a      	ldr	r3, [pc, #232]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f0      	bne.n	80086a4 <HAL_RCC_OscConfig+0x7b0>
 80086c2:	e068      	b.n	8008796 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086c4:	4b36      	ldr	r3, [pc, #216]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 80086c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086ca:	4b35      	ldr	r3, [pc, #212]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d031      	beq.n	800873c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f003 0203 	and.w	r2, r3, #3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d12a      	bne.n	800873c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	091b      	lsrs	r3, r3, #4
 80086ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d122      	bne.n	800873c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008700:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008702:	429a      	cmp	r2, r3
 8008704:	d11a      	bne.n	800873c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	0a5b      	lsrs	r3, r3, #9
 800870a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008712:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008714:	429a      	cmp	r2, r3
 8008716:	d111      	bne.n	800873c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008724:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008726:	429a      	cmp	r2, r3
 8008728:	d108      	bne.n	800873c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	0e1b      	lsrs	r3, r3, #24
 800872e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008736:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008738:	429a      	cmp	r2, r3
 800873a:	d001      	beq.n	8008740 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e02b      	b.n	8008798 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008740:	4b17      	ldr	r3, [pc, #92]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008744:	08db      	lsrs	r3, r3, #3
 8008746:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800874a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	429a      	cmp	r2, r3
 8008754:	d01f      	beq.n	8008796 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008756:	4b12      	ldr	r3, [pc, #72]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875a:	4a11      	ldr	r2, [pc, #68]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 800875c:	f023 0301 	bic.w	r3, r3, #1
 8008760:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008762:	f7f9 fc1d 	bl	8001fa0 <HAL_GetTick>
 8008766:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008768:	bf00      	nop
 800876a:	f7f9 fc19 	bl	8001fa0 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008772:	4293      	cmp	r3, r2
 8008774:	d0f9      	beq.n	800876a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008776:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800877a:	4b0a      	ldr	r3, [pc, #40]	@ (80087a4 <HAL_RCC_OscConfig+0x8b0>)
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008782:	00d2      	lsls	r2, r2, #3
 8008784:	4906      	ldr	r1, [pc, #24]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008786:	4313      	orrs	r3, r2
 8008788:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800878a:	4b05      	ldr	r3, [pc, #20]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 800878c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878e:	4a04      	ldr	r2, [pc, #16]	@ (80087a0 <HAL_RCC_OscConfig+0x8ac>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3730      	adds	r7, #48	@ 0x30
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58024400 	.word	0x58024400
 80087a4:	ffff0007 	.word	0xffff0007

080087a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e19c      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087bc:	4b8a      	ldr	r3, [pc, #552]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d910      	bls.n	80087ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ca:	4b87      	ldr	r3, [pc, #540]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f023 020f 	bic.w	r2, r3, #15
 80087d2:	4985      	ldr	r1, [pc, #532]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087da:	4b83      	ldr	r3, [pc, #524]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d001      	beq.n	80087ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e184      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d010      	beq.n	800881a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	4b7b      	ldr	r3, [pc, #492]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008804:	429a      	cmp	r2, r3
 8008806:	d908      	bls.n	800881a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008808:	4b78      	ldr	r3, [pc, #480]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	4975      	ldr	r1, [pc, #468]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008816:	4313      	orrs	r3, r2
 8008818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695a      	ldr	r2, [r3, #20]
 800882a:	4b70      	ldr	r3, [pc, #448]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008832:	429a      	cmp	r2, r3
 8008834:	d908      	bls.n	8008848 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008836:	4b6d      	ldr	r3, [pc, #436]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	496a      	ldr	r1, [pc, #424]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008844:	4313      	orrs	r3, r2
 8008846:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	d010      	beq.n	8008876 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	4b64      	ldr	r3, [pc, #400]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008860:	429a      	cmp	r2, r3
 8008862:	d908      	bls.n	8008876 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008864:	4b61      	ldr	r3, [pc, #388]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	495e      	ldr	r1, [pc, #376]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008872:	4313      	orrs	r3, r2
 8008874:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0320 	and.w	r3, r3, #32
 800887e:	2b00      	cmp	r3, #0
 8008880:	d010      	beq.n	80088a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69da      	ldr	r2, [r3, #28]
 8008886:	4b59      	ldr	r3, [pc, #356]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800888e:	429a      	cmp	r2, r3
 8008890:	d908      	bls.n	80088a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008892:	4b56      	ldr	r3, [pc, #344]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	4953      	ldr	r1, [pc, #332]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d010      	beq.n	80088d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	4b4d      	ldr	r3, [pc, #308]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	429a      	cmp	r2, r3
 80088be:	d908      	bls.n	80088d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088c0:	4b4a      	ldr	r3, [pc, #296]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f023 020f 	bic.w	r2, r3, #15
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	4947      	ldr	r1, [pc, #284]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d055      	beq.n	800898a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088de:	4b43      	ldr	r3, [pc, #268]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	4940      	ldr	r1, [pc, #256]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d107      	bne.n	8008908 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088f8:	4b3c      	ldr	r3, [pc, #240]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d121      	bne.n	8008948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0f6      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d107      	bne.n	8008920 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008910:	4b36      	ldr	r3, [pc, #216]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d115      	bne.n	8008948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0ea      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d107      	bne.n	8008938 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008928:	4b30      	ldr	r3, [pc, #192]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e0de      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008938:	4b2c      	ldr	r3, [pc, #176]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e0d6      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008948:	4b28      	ldr	r3, [pc, #160]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f023 0207 	bic.w	r2, r3, #7
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	4925      	ldr	r1, [pc, #148]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 8008956:	4313      	orrs	r3, r2
 8008958:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800895a:	f7f9 fb21 	bl	8001fa0 <HAL_GetTick>
 800895e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008960:	e00a      	b.n	8008978 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008962:	f7f9 fb1d 	bl	8001fa0 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008970:	4293      	cmp	r3, r2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e0be      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008978:	4b1c      	ldr	r3, [pc, #112]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	429a      	cmp	r2, r3
 8008988:	d1eb      	bne.n	8008962 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d010      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	4b14      	ldr	r3, [pc, #80]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d208      	bcs.n	80089b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a6:	4b11      	ldr	r3, [pc, #68]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f023 020f 	bic.w	r2, r3, #15
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	490e      	ldr	r1, [pc, #56]	@ (80089ec <HAL_RCC_ClockConfig+0x244>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089b8:	4b0b      	ldr	r3, [pc, #44]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d214      	bcs.n	80089f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b08      	ldr	r3, [pc, #32]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f023 020f 	bic.w	r2, r3, #15
 80089ce:	4906      	ldr	r1, [pc, #24]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d6:	4b04      	ldr	r3, [pc, #16]	@ (80089e8 <HAL_RCC_ClockConfig+0x240>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d005      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e086      	b.n	8008af6 <HAL_RCC_ClockConfig+0x34e>
 80089e8:	52002000 	.word	0x52002000
 80089ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d010      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	4b3f      	ldr	r3, [pc, #252]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d208      	bcs.n	8008a1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	4939      	ldr	r1, [pc, #228]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	4b34      	ldr	r3, [pc, #208]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d208      	bcs.n	8008a4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a3a:	4b31      	ldr	r3, [pc, #196]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	492e      	ldr	r1, [pc, #184]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d010      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699a      	ldr	r2, [r3, #24]
 8008a5c:	4b28      	ldr	r3, [pc, #160]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d208      	bcs.n	8008a7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a68:	4b25      	ldr	r3, [pc, #148]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	4922      	ldr	r1, [pc, #136]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d010      	beq.n	8008aa8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69da      	ldr	r2, [r3, #28]
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d208      	bcs.n	8008aa8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a96:	4b1a      	ldr	r3, [pc, #104]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	4917      	ldr	r1, [pc, #92]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008aa8:	f000 f834 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b14      	ldr	r3, [pc, #80]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	4912      	ldr	r1, [pc, #72]	@ (8008b04 <HAL_RCC_ClockConfig+0x35c>)
 8008aba:	5ccb      	ldrb	r3, [r1, r3]
 8008abc:	f003 031f 	and.w	r3, r3, #31
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b00 <HAL_RCC_ClockConfig+0x358>)
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	4a0d      	ldr	r2, [pc, #52]	@ (8008b04 <HAL_RCC_ClockConfig+0x35c>)
 8008ad0:	5cd3      	ldrb	r3, [r2, r3]
 8008ad2:	f003 031f 	and.w	r3, r3, #31
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8008adc:	4a0a      	ldr	r2, [pc, #40]	@ (8008b08 <HAL_RCC_ClockConfig+0x360>)
 8008ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <HAL_RCC_ClockConfig+0x364>)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b10 <HAL_RCC_ClockConfig+0x368>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f9 fa0e 	bl	8001f0c <HAL_InitTick>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
 8008b04:	08011104 	.word	0x08011104
 8008b08:	24000030 	.word	0x24000030
 8008b0c:	2400002c 	.word	0x2400002c
 8008b10:	24000034 	.word	0x24000034

08008b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b089      	sub	sp, #36	@ 0x24
 8008b18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b1a:	4bb3      	ldr	r3, [pc, #716]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b22:	2b18      	cmp	r3, #24
 8008b24:	f200 8155 	bhi.w	8008dd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008b28:	a201      	add	r2, pc, #4	@ (adr r2, 8008b30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b95 	.word	0x08008b95
 8008b34:	08008dd3 	.word	0x08008dd3
 8008b38:	08008dd3 	.word	0x08008dd3
 8008b3c:	08008dd3 	.word	0x08008dd3
 8008b40:	08008dd3 	.word	0x08008dd3
 8008b44:	08008dd3 	.word	0x08008dd3
 8008b48:	08008dd3 	.word	0x08008dd3
 8008b4c:	08008dd3 	.word	0x08008dd3
 8008b50:	08008bbb 	.word	0x08008bbb
 8008b54:	08008dd3 	.word	0x08008dd3
 8008b58:	08008dd3 	.word	0x08008dd3
 8008b5c:	08008dd3 	.word	0x08008dd3
 8008b60:	08008dd3 	.word	0x08008dd3
 8008b64:	08008dd3 	.word	0x08008dd3
 8008b68:	08008dd3 	.word	0x08008dd3
 8008b6c:	08008dd3 	.word	0x08008dd3
 8008b70:	08008bc1 	.word	0x08008bc1
 8008b74:	08008dd3 	.word	0x08008dd3
 8008b78:	08008dd3 	.word	0x08008dd3
 8008b7c:	08008dd3 	.word	0x08008dd3
 8008b80:	08008dd3 	.word	0x08008dd3
 8008b84:	08008dd3 	.word	0x08008dd3
 8008b88:	08008dd3 	.word	0x08008dd3
 8008b8c:	08008dd3 	.word	0x08008dd3
 8008b90:	08008bc7 	.word	0x08008bc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b94:	4b94      	ldr	r3, [pc, #592]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d009      	beq.n	8008bb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ba0:	4b91      	ldr	r3, [pc, #580]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a90      	ldr	r2, [pc, #576]	@ (8008dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008bb2:	e111      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8008dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bb6:	61bb      	str	r3, [r7, #24]
      break;
 8008bb8:	e10e      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008bba:	4b8d      	ldr	r3, [pc, #564]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bbc:	61bb      	str	r3, [r7, #24]
      break;
 8008bbe:	e10b      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8008df4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008bc2:	61bb      	str	r3, [r7, #24]
      break;
 8008bc4:	e108      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bc6:	4b88      	ldr	r3, [pc, #544]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008bd0:	4b85      	ldr	r3, [pc, #532]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	091b      	lsrs	r3, r3, #4
 8008bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bdc:	4b82      	ldr	r3, [pc, #520]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008be6:	4b80      	ldr	r3, [pc, #512]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bea:	08db      	lsrs	r3, r3, #3
 8008bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80e1 	beq.w	8008dcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	f000 8083 	beq.w	8008d18 <HAL_RCC_GetSysClockFreq+0x204>
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	f200 80a1 	bhi.w	8008d5c <HAL_RCC_GetSysClockFreq+0x248>
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <HAL_RCC_GetSysClockFreq+0x114>
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d056      	beq.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c26:	e099      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c28:	4b6f      	ldr	r3, [pc, #444]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0320 	and.w	r3, r3, #32
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d02d      	beq.n	8008c90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c34:	4b6c      	ldr	r3, [pc, #432]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	08db      	lsrs	r3, r3, #3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	4a6b      	ldr	r2, [pc, #428]	@ (8008dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
 8008c44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	ee07 3a90 	vmov	s15, r3
 8008c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5e:	4b62      	ldr	r3, [pc, #392]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008c8e:	e087      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008dfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	4b51      	ldr	r3, [pc, #324]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cd2:	e065      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce6:	4b40      	ldr	r3, [pc, #256]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cfa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d16:	e043      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008e04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d5a:	e021      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d82:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008da0:	4b11      	ldr	r3, [pc, #68]	@ (8008de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da4:	0a5b      	lsrs	r3, r3, #9
 8008da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008daa:	3301      	adds	r3, #1
 8008dac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	ee07 3a90 	vmov	s15, r3
 8008db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc4:	ee17 3a90 	vmov	r3, s15
 8008dc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008dca:	e005      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61bb      	str	r3, [r7, #24]
      break;
 8008dd0:	e002      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008dd2:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008dd4:	61bb      	str	r3, [r7, #24]
      break;
 8008dd6:	bf00      	nop
  }

  return sysclockfreq;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3724      	adds	r7, #36	@ 0x24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	58024400 	.word	0x58024400
 8008dec:	03d09000 	.word	0x03d09000
 8008df0:	003d0900 	.word	0x003d0900
 8008df4:	007a1200 	.word	0x007a1200
 8008df8:	46000000 	.word	0x46000000
 8008dfc:	4c742400 	.word	0x4c742400
 8008e00:	4a742400 	.word	0x4a742400
 8008e04:	4af42400 	.word	0x4af42400

08008e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e0e:	f7ff fe81 	bl	8008b14 <HAL_RCC_GetSysClockFreq>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4b10      	ldr	r3, [pc, #64]	@ (8008e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	0a1b      	lsrs	r3, r3, #8
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	490f      	ldr	r1, [pc, #60]	@ (8008e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8008e20:	5ccb      	ldrb	r3, [r1, r3]
 8008e22:	f003 031f 	and.w	r3, r3, #31
 8008e26:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	f003 030f 	and.w	r3, r3, #15
 8008e34:	4a09      	ldr	r2, [pc, #36]	@ (8008e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8008e36:	5cd3      	ldrb	r3, [r2, r3]
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e42:	4a07      	ldr	r2, [pc, #28]	@ (8008e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e46:	4a07      	ldr	r2, [pc, #28]	@ (8008e64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	58024400 	.word	0x58024400
 8008e5c:	08011104 	.word	0x08011104
 8008e60:	24000030 	.word	0x24000030
 8008e64:	2400002c 	.word	0x2400002c

08008e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e6c:	f7ff ffcc 	bl	8008e08 <HAL_RCC_GetHCLKFreq>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4b06      	ldr	r3, [pc, #24]	@ (8008e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	091b      	lsrs	r3, r3, #4
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	4904      	ldr	r1, [pc, #16]	@ (8008e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e7e:	5ccb      	ldrb	r3, [r1, r3]
 8008e80:	f003 031f 	and.w	r3, r3, #31
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	58024400 	.word	0x58024400
 8008e90:	08011104 	.word	0x08011104

08008e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e98:	f7ff ffb6 	bl	8008e08 <HAL_RCC_GetHCLKFreq>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	4b06      	ldr	r3, [pc, #24]	@ (8008eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	0a1b      	lsrs	r3, r3, #8
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	4904      	ldr	r1, [pc, #16]	@ (8008ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008eaa:	5ccb      	ldrb	r3, [r1, r3]
 8008eac:	f003 031f 	and.w	r3, r3, #31
 8008eb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	08011104 	.word	0x08011104

08008ec0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ec4:	b0ca      	sub	sp, #296	@ 0x128
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ee4:	2500      	movs	r5, #0
 8008ee6:	ea54 0305 	orrs.w	r3, r4, r5
 8008eea:	d049      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ef2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ef6:	d02f      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ef8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008efc:	d828      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f02:	d01a      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f08:	d822      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f12:	d007      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f14:	e01c      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f16:	4bb8      	ldr	r3, [pc, #736]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1a:	4ab7      	ldr	r2, [pc, #732]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f22:	e01a      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f28:	3308      	adds	r3, #8
 8008f2a:	2102      	movs	r1, #2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f002 fb61 	bl	800b5f4 <RCCEx_PLL2_Config>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f38:	e00f      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	3328      	adds	r3, #40	@ 0x28
 8008f40:	2102      	movs	r1, #2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f002 fc08 	bl	800b758 <RCCEx_PLL3_Config>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f4e:	e004      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f56:	e000      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f62:	4ba5      	ldr	r3, [pc, #660]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f70:	4aa1      	ldr	r2, [pc, #644]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f72:	430b      	orrs	r3, r1
 8008f74:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f76:	e003      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f8c:	f04f 0900 	mov.w	r9, #0
 8008f90:	ea58 0309 	orrs.w	r3, r8, r9
 8008f94:	d047      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d82a      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08008fbd 	.word	0x08008fbd
 8008fac:	08008fcb 	.word	0x08008fcb
 8008fb0:	08008fe1 	.word	0x08008fe1
 8008fb4:	08008fff 	.word	0x08008fff
 8008fb8:	08008fff 	.word	0x08008fff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fbc:	4b8e      	ldr	r3, [pc, #568]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc0:	4a8d      	ldr	r2, [pc, #564]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fc8:	e01a      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fce:	3308      	adds	r3, #8
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f002 fb0e 	bl	800b5f4 <RCCEx_PLL2_Config>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fde:	e00f      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe4:	3328      	adds	r3, #40	@ 0x28
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f002 fbb5 	bl	800b758 <RCCEx_PLL3_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ff4:	e004      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ffc:	e000      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009008:	4b7b      	ldr	r3, [pc, #492]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800900a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900c:	f023 0107 	bic.w	r1, r3, #7
 8009010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009016:	4a78      	ldr	r2, [pc, #480]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009018:	430b      	orrs	r3, r1
 800901a:	6513      	str	r3, [r2, #80]	@ 0x50
 800901c:	e003      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009032:	f04f 0b00 	mov.w	fp, #0
 8009036:	ea5a 030b 	orrs.w	r3, sl, fp
 800903a:	d04c      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009046:	d030      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800904c:	d829      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800904e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009050:	d02d      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009052:	2bc0      	cmp	r3, #192	@ 0xc0
 8009054:	d825      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009056:	2b80      	cmp	r3, #128	@ 0x80
 8009058:	d018      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800905a:	2b80      	cmp	r3, #128	@ 0x80
 800905c:	d821      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009062:	2b40      	cmp	r3, #64	@ 0x40
 8009064:	d007      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009066:	e01c      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4b63      	ldr	r3, [pc, #396]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906c:	4a62      	ldr	r2, [pc, #392]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009074:	e01c      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907a:	3308      	adds	r3, #8
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f002 fab8 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800908a:	e011      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	3328      	adds	r3, #40	@ 0x28
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f002 fb5f 	bl	800b758 <RCCEx_PLL3_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80090a0:	e006      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80090ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80090b8:	4b4f      	ldr	r3, [pc, #316]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80090c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090c6:	4a4c      	ldr	r2, [pc, #304]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c8:	430b      	orrs	r3, r1
 80090ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80090cc:	e003      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80090e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80090e6:	2300      	movs	r3, #0
 80090e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80090ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80090f0:	460b      	mov	r3, r1
 80090f2:	4313      	orrs	r3, r2
 80090f4:	d053      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009102:	d035      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009108:	d82e      	bhi.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800910a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800910e:	d031      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009110:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009114:	d828      	bhi.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800911a:	d01a      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800911c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009120:	d822      	bhi.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800912a:	d007      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800912c:	e01c      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800912e:	4b32      	ldr	r3, [pc, #200]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	4a31      	ldr	r2, [pc, #196]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800913a:	e01c      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009140:	3308      	adds	r3, #8
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f002 fa55 	bl	800b5f4 <RCCEx_PLL2_Config>
 800914a:	4603      	mov	r3, r0
 800914c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009150:	e011      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	3328      	adds	r3, #40	@ 0x28
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f002 fafc 	bl	800b758 <RCCEx_PLL3_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009166:	e006      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800916e:	e002      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009170:	bf00      	nop
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800917e:	4b1e      	ldr	r3, [pc, #120]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009182:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800918e:	4a1a      	ldr	r2, [pc, #104]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009190:	430b      	orrs	r3, r1
 8009192:	6593      	str	r3, [r2, #88]	@ 0x58
 8009194:	e003      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80091aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80091ae:	2300      	movs	r3, #0
 80091b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80091b8:	460b      	mov	r3, r1
 80091ba:	4313      	orrs	r3, r2
 80091bc:	d056      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091ca:	d038      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80091cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091d0:	d831      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091d6:	d034      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80091d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091dc:	d82b      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091e2:	d01d      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80091e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091e8:	d825      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80091ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091f2:	d00a      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80091f4:	e01f      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091f6:	bf00      	nop
 80091f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091fc:	4ba2      	ldr	r3, [pc, #648]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009200:	4aa1      	ldr	r2, [pc, #644]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009208:	e01c      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	3308      	adds	r3, #8
 8009210:	2100      	movs	r1, #0
 8009212:	4618      	mov	r0, r3
 8009214:	f002 f9ee 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800921e:	e011      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009224:	3328      	adds	r3, #40	@ 0x28
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fa95 	bl	800b758 <RCCEx_PLL3_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009234:	e006      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800923c:	e002      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800923e:	bf00      	nop
 8009240:	e000      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10b      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800924c:	4b8e      	ldr	r3, [pc, #568]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800924e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009250:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800925c:	4a8a      	ldr	r2, [pc, #552]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800925e:	430b      	orrs	r3, r1
 8009260:	6593      	str	r3, [r2, #88]	@ 0x58
 8009262:	e003      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009278:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800927c:	2300      	movs	r3, #0
 800927e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009282:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009286:	460b      	mov	r3, r1
 8009288:	4313      	orrs	r3, r2
 800928a:	d03a      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800928c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009292:	2b30      	cmp	r3, #48	@ 0x30
 8009294:	d01f      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009296:	2b30      	cmp	r3, #48	@ 0x30
 8009298:	d819      	bhi.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800929a:	2b20      	cmp	r3, #32
 800929c:	d00c      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d815      	bhi.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d019      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80092a6:	2b10      	cmp	r3, #16
 80092a8:	d111      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092aa:	4b77      	ldr	r3, [pc, #476]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ae:	4a76      	ldr	r2, [pc, #472]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092b6:	e011      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092bc:	3308      	adds	r3, #8
 80092be:	2102      	movs	r1, #2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f002 f997 	bl	800b5f4 <RCCEx_PLL2_Config>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092cc:	e006      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092d4:	e002      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092d6:	bf00      	nop
 80092d8:	e000      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80092e4:	4b68      	ldr	r3, [pc, #416]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80092ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092f2:	4a65      	ldr	r2, [pc, #404]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f4:	430b      	orrs	r3, r1
 80092f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092f8:	e003      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800930e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009312:	2300      	movs	r3, #0
 8009314:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009318:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800931c:	460b      	mov	r3, r1
 800931e:	4313      	orrs	r3, r2
 8009320:	d051      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800932c:	d035      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800932e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009332:	d82e      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009334:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009338:	d031      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800933a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800933e:	d828      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009344:	d01a      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800934a:	d822      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009354:	d007      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009356:	e01c      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009358:	4b4b      	ldr	r3, [pc, #300]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	4a4a      	ldr	r2, [pc, #296]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800935e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009364:	e01c      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936a:	3308      	adds	r3, #8
 800936c:	2100      	movs	r1, #0
 800936e:	4618      	mov	r0, r3
 8009370:	f002 f940 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800937a:	e011      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009380:	3328      	adds	r3, #40	@ 0x28
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f002 f9e7 	bl	800b758 <RCCEx_PLL3_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009390:	e006      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009398:	e002      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800939a:	bf00      	nop
 800939c:	e000      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800939e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093a8:	4b37      	ldr	r3, [pc, #220]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b6:	4a34      	ldr	r2, [pc, #208]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093b8:	430b      	orrs	r3, r1
 80093ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80093bc:	e003      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80093d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80093d6:	2300      	movs	r3, #0
 80093d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80093dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80093e0:	460b      	mov	r3, r1
 80093e2:	4313      	orrs	r3, r2
 80093e4:	d056      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80093e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093f0:	d033      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80093f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093f6:	d82c      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093fc:	d02f      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80093fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009402:	d826      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009404:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009408:	d02b      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800940a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800940e:	d820      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009414:	d012      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800941a:	d81a      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800941c:	2b00      	cmp	r3, #0
 800941e:	d022      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009424:	d115      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942a:	3308      	adds	r3, #8
 800942c:	2101      	movs	r1, #1
 800942e:	4618      	mov	r0, r3
 8009430:	f002 f8e0 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009434:	4603      	mov	r3, r0
 8009436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800943a:	e015      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800943c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009440:	3328      	adds	r3, #40	@ 0x28
 8009442:	2101      	movs	r1, #1
 8009444:	4618      	mov	r0, r3
 8009446:	f002 f987 	bl	800b758 <RCCEx_PLL3_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009450:	e00a      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009458:	e006      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800945a:	bf00      	nop
 800945c:	e004      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800945e:	bf00      	nop
 8009460:	e002      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10d      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009470:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009474:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800947e:	4a02      	ldr	r2, [pc, #8]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009480:	430b      	orrs	r3, r1
 8009482:	6513      	str	r3, [r2, #80]	@ 0x50
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009486:	bf00      	nop
 8009488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80094a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094a4:	2300      	movs	r3, #0
 80094a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4313      	orrs	r3, r2
 80094b2:	d055      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80094b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c0:	d033      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80094c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094c6:	d82c      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094cc:	d02f      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80094ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094d2:	d826      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094d8:	d02b      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80094da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094de:	d820      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094e4:	d012      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80094e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ea:	d81a      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d022      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80094f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094f4:	d115      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fa:	3308      	adds	r3, #8
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f002 f878 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800950a:	e015      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800950c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009510:	3328      	adds	r3, #40	@ 0x28
 8009512:	2101      	movs	r1, #1
 8009514:	4618      	mov	r0, r3
 8009516:	f002 f91f 	bl	800b758 <RCCEx_PLL3_Config>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009520:	e00a      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009528:	e006      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800952a:	bf00      	nop
 800952c:	e004      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800952e:	bf00      	nop
 8009530:	e002      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009532:	bf00      	nop
 8009534:	e000      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10b      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009540:	4ba3      	ldr	r3, [pc, #652]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009544:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009550:	4a9f      	ldr	r2, [pc, #636]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009552:	430b      	orrs	r3, r1
 8009554:	6593      	str	r3, [r2, #88]	@ 0x58
 8009556:	e003      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800955c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800956c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009570:	2300      	movs	r3, #0
 8009572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800957a:	460b      	mov	r3, r1
 800957c:	4313      	orrs	r3, r2
 800957e:	d037      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800958a:	d00e      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800958c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009590:	d816      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d018      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800959a:	d111      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800959c:	4b8c      	ldr	r3, [pc, #560]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	4a8b      	ldr	r2, [pc, #556]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095a8:	e00f      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	3308      	adds	r3, #8
 80095b0:	2101      	movs	r1, #1
 80095b2:	4618      	mov	r0, r3
 80095b4:	f002 f81e 	bl	800b5f4 <RCCEx_PLL2_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095be:	e004      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095c6:	e000      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80095c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095d2:	4b7f      	ldr	r3, [pc, #508]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095e0:	4a7b      	ldr	r2, [pc, #492]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e2:	430b      	orrs	r3, r1
 80095e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80095e6:	e003      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80095fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009600:	2300      	movs	r3, #0
 8009602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009606:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	d039      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009616:	2b03      	cmp	r3, #3
 8009618:	d81c      	bhi.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800961a:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	0800965d 	.word	0x0800965d
 8009624:	08009631 	.word	0x08009631
 8009628:	0800963f 	.word	0x0800963f
 800962c:	0800965d 	.word	0x0800965d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009630:	4b67      	ldr	r3, [pc, #412]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009634:	4a66      	ldr	r2, [pc, #408]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800963a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800963c:	e00f      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800963e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009642:	3308      	adds	r3, #8
 8009644:	2102      	movs	r1, #2
 8009646:	4618      	mov	r0, r3
 8009648:	f001 ffd4 	bl	800b5f4 <RCCEx_PLL2_Config>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009652:	e004      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800965a:	e000      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800965c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10a      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009666:	4b5a      	ldr	r3, [pc, #360]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966a:	f023 0103 	bic.w	r1, r3, #3
 800966e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009674:	4a56      	ldr	r2, [pc, #344]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009676:	430b      	orrs	r3, r1
 8009678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800967a:	e003      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009694:	2300      	movs	r3, #0
 8009696:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800969a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800969e:	460b      	mov	r3, r1
 80096a0:	4313      	orrs	r3, r2
 80096a2:	f000 809f 	beq.w	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096a6:	4b4b      	ldr	r3, [pc, #300]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a4a      	ldr	r2, [pc, #296]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096b2:	f7f8 fc75 	bl	8001fa0 <HAL_GetTick>
 80096b6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096ba:	e00b      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096bc:	f7f8 fc70 	bl	8001fa0 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b64      	cmp	r3, #100	@ 0x64
 80096ca:	d903      	bls.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096d2:	e005      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096d4:	4b3f      	ldr	r3, [pc, #252]	@ (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0ed      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80096e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d179      	bne.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096e8:	4b39      	ldr	r3, [pc, #228]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096f4:	4053      	eors	r3, r2
 80096f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d015      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096fe:	4b34      	ldr	r3, [pc, #208]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009706:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800970a:	4b31      	ldr	r3, [pc, #196]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800970c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800970e:	4a30      	ldr	r2, [pc, #192]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009714:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009716:	4b2e      	ldr	r3, [pc, #184]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800971a:	4a2d      	ldr	r2, [pc, #180]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800971c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009720:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009722:	4a2b      	ldr	r2, [pc, #172]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009728:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009736:	d118      	bne.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009738:	f7f8 fc32 	bl	8001fa0 <HAL_GetTick>
 800973c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009740:	e00d      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009742:	f7f8 fc2d 	bl	8001fa0 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800974c:	1ad2      	subs	r2, r2, r3
 800974e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009752:	429a      	cmp	r2, r3
 8009754:	d903      	bls.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800975c:	e005      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800975e:	4b1c      	ldr	r3, [pc, #112]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0eb      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800976a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800976e:	2b00      	cmp	r3, #0
 8009770:	d129      	bne.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800977a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800977e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009782:	d10e      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009784:	4b12      	ldr	r3, [pc, #72]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800978c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009790:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009794:	091a      	lsrs	r2, r3, #4
 8009796:	4b10      	ldr	r3, [pc, #64]	@ (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009798:	4013      	ands	r3, r2
 800979a:	4a0d      	ldr	r2, [pc, #52]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800979c:	430b      	orrs	r3, r1
 800979e:	6113      	str	r3, [r2, #16]
 80097a0:	e005      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80097a2:	4b0b      	ldr	r3, [pc, #44]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	4a0a      	ldr	r2, [pc, #40]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80097ac:	6113      	str	r3, [r2, #16]
 80097ae:	4b08      	ldr	r3, [pc, #32]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80097b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097be:	4a04      	ldr	r2, [pc, #16]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097c0:	430b      	orrs	r3, r1
 80097c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80097c4:	e00e      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80097ce:	e009      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80097d0:	58024400 	.word	0x58024400
 80097d4:	58024800 	.word	0x58024800
 80097d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f002 0301 	and.w	r3, r2, #1
 80097f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097f4:	2300      	movs	r3, #0
 80097f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097fe:	460b      	mov	r3, r1
 8009800:	4313      	orrs	r3, r2
 8009802:	f000 8089 	beq.w	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800980c:	2b28      	cmp	r3, #40	@ 0x28
 800980e:	d86b      	bhi.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009810:	a201      	add	r2, pc, #4	@ (adr r2, 8009818 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	080098f1 	.word	0x080098f1
 800981c:	080098e9 	.word	0x080098e9
 8009820:	080098e9 	.word	0x080098e9
 8009824:	080098e9 	.word	0x080098e9
 8009828:	080098e9 	.word	0x080098e9
 800982c:	080098e9 	.word	0x080098e9
 8009830:	080098e9 	.word	0x080098e9
 8009834:	080098e9 	.word	0x080098e9
 8009838:	080098bd 	.word	0x080098bd
 800983c:	080098e9 	.word	0x080098e9
 8009840:	080098e9 	.word	0x080098e9
 8009844:	080098e9 	.word	0x080098e9
 8009848:	080098e9 	.word	0x080098e9
 800984c:	080098e9 	.word	0x080098e9
 8009850:	080098e9 	.word	0x080098e9
 8009854:	080098e9 	.word	0x080098e9
 8009858:	080098d3 	.word	0x080098d3
 800985c:	080098e9 	.word	0x080098e9
 8009860:	080098e9 	.word	0x080098e9
 8009864:	080098e9 	.word	0x080098e9
 8009868:	080098e9 	.word	0x080098e9
 800986c:	080098e9 	.word	0x080098e9
 8009870:	080098e9 	.word	0x080098e9
 8009874:	080098e9 	.word	0x080098e9
 8009878:	080098f1 	.word	0x080098f1
 800987c:	080098e9 	.word	0x080098e9
 8009880:	080098e9 	.word	0x080098e9
 8009884:	080098e9 	.word	0x080098e9
 8009888:	080098e9 	.word	0x080098e9
 800988c:	080098e9 	.word	0x080098e9
 8009890:	080098e9 	.word	0x080098e9
 8009894:	080098e9 	.word	0x080098e9
 8009898:	080098f1 	.word	0x080098f1
 800989c:	080098e9 	.word	0x080098e9
 80098a0:	080098e9 	.word	0x080098e9
 80098a4:	080098e9 	.word	0x080098e9
 80098a8:	080098e9 	.word	0x080098e9
 80098ac:	080098e9 	.word	0x080098e9
 80098b0:	080098e9 	.word	0x080098e9
 80098b4:	080098e9 	.word	0x080098e9
 80098b8:	080098f1 	.word	0x080098f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c0:	3308      	adds	r3, #8
 80098c2:	2101      	movs	r1, #1
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 fe95 	bl	800b5f4 <RCCEx_PLL2_Config>
 80098ca:	4603      	mov	r3, r0
 80098cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098d0:	e00f      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	3328      	adds	r3, #40	@ 0x28
 80098d8:	2101      	movs	r1, #1
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 ff3c 	bl	800b758 <RCCEx_PLL3_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098e6:	e004      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098ee:	e000      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80098f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098fa:	4bbf      	ldr	r3, [pc, #764]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009908:	4abb      	ldr	r2, [pc, #748]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800990a:	430b      	orrs	r3, r1
 800990c:	6553      	str	r3, [r2, #84]	@ 0x54
 800990e:	e003      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f002 0302 	and.w	r3, r2, #2
 8009924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009928:	2300      	movs	r3, #0
 800992a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800992e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009932:	460b      	mov	r3, r1
 8009934:	4313      	orrs	r3, r2
 8009936:	d041      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800993e:	2b05      	cmp	r3, #5
 8009940:	d824      	bhi.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009942:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	08009995 	.word	0x08009995
 800994c:	08009961 	.word	0x08009961
 8009950:	08009977 	.word	0x08009977
 8009954:	08009995 	.word	0x08009995
 8009958:	08009995 	.word	0x08009995
 800995c:	08009995 	.word	0x08009995
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009964:	3308      	adds	r3, #8
 8009966:	2101      	movs	r1, #1
 8009968:	4618      	mov	r0, r3
 800996a:	f001 fe43 	bl	800b5f4 <RCCEx_PLL2_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009974:	e00f      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997a:	3328      	adds	r3, #40	@ 0x28
 800997c:	2101      	movs	r1, #1
 800997e:	4618      	mov	r0, r3
 8009980:	f001 feea 	bl	800b758 <RCCEx_PLL3_Config>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800998a:	e004      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009992:	e000      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800999e:	4b96      	ldr	r3, [pc, #600]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	f023 0107 	bic.w	r1, r3, #7
 80099a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099ac:	4a92      	ldr	r2, [pc, #584]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80099b2:	e003      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f002 0304 	and.w	r3, r2, #4
 80099c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099cc:	2300      	movs	r3, #0
 80099ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d044      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099e4:	2b05      	cmp	r3, #5
 80099e6:	d825      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80099e8:	a201      	add	r2, pc, #4	@ (adr r2, 80099f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a3d 	.word	0x08009a3d
 80099f4:	08009a09 	.word	0x08009a09
 80099f8:	08009a1f 	.word	0x08009a1f
 80099fc:	08009a3d 	.word	0x08009a3d
 8009a00:	08009a3d 	.word	0x08009a3d
 8009a04:	08009a3d 	.word	0x08009a3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fdef 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a1c:	e00f      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a22:	3328      	adds	r3, #40	@ 0x28
 8009a24:	2101      	movs	r1, #1
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 fe96 	bl	800b758 <RCCEx_PLL3_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a32:	e004      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a3a:	e000      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10b      	bne.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a46:	4b6c      	ldr	r3, [pc, #432]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4a:	f023 0107 	bic.w	r1, r3, #7
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a56:	4a68      	ldr	r2, [pc, #416]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a5c:	e003      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f002 0320 	and.w	r3, r2, #32
 8009a72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a76:	2300      	movs	r3, #0
 8009a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a80:	460b      	mov	r3, r1
 8009a82:	4313      	orrs	r3, r2
 8009a84:	d055      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a92:	d033      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a98:	d82c      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a9e:	d02f      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa4:	d826      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009aaa:	d02b      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009aac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ab0:	d820      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ab6:	d012      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d81a      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d022      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ac6:	d115      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009acc:	3308      	adds	r3, #8
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 fd8f 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009adc:	e015      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae2:	3328      	adds	r3, #40	@ 0x28
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fe36 	bl	800b758 <RCCEx_PLL3_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009af2:	e00a      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009afa:	e006      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009afc:	bf00      	nop
 8009afe:	e004      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b00:	bf00      	nop
 8009b02:	e002      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b04:	bf00      	nop
 8009b06:	e000      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b12:	4b39      	ldr	r3, [pc, #228]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b22:	4a35      	ldr	r2, [pc, #212]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b24:	430b      	orrs	r3, r1
 8009b26:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b28:	e003      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b42:	2300      	movs	r3, #0
 8009b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	d058      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b5e:	d033      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009b60:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b64:	d82c      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b6a:	d02f      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b70:	d826      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b76:	d02b      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b7c:	d820      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b82:	d012      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b88:	d81a      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d022      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b92:	d115      	bne.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b98:	3308      	adds	r3, #8
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fd29 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ba8:	e015      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bae:	3328      	adds	r3, #40	@ 0x28
 8009bb0:	2102      	movs	r1, #2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fdd0 	bl	800b758 <RCCEx_PLL3_Config>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009bbe:	e00a      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bc6:	e006      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bc8:	bf00      	nop
 8009bca:	e004      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bcc:	bf00      	nop
 8009bce:	e002      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bd0:	bf00      	nop
 8009bd2:	e000      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10e      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bde:	4b06      	ldr	r3, [pc, #24]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bee:	4a02      	ldr	r2, [pc, #8]	@ (8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bf4:	e006      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009bf6:	bf00      	nop
 8009bf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c14:	2300      	movs	r3, #0
 8009c16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4313      	orrs	r3, r2
 8009c22:	d055      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c30:	d033      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009c32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c36:	d82c      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c3c:	d02f      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c42:	d826      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c48:	d02b      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009c4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c4e:	d820      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c54:	d012      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c5a:	d81a      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d022      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c64:	d115      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 fcc0 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c7a:	e015      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c80:	3328      	adds	r3, #40	@ 0x28
 8009c82:	2102      	movs	r1, #2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f001 fd67 	bl	800b758 <RCCEx_PLL3_Config>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c90:	e00a      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c98:	e006      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c9a:	bf00      	nop
 8009c9c:	e004      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c9e:	bf00      	nop
 8009ca0:	e002      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ca2:	bf00      	nop
 8009ca4:	e000      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10b      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cb0:	4ba1      	ldr	r3, [pc, #644]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cb4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009cc0:	4a9d      	ldr	r2, [pc, #628]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cc6:	e003      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f002 0308 	and.w	r3, r2, #8
 8009cdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ce6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	d01e      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfc:	d10c      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d02:	3328      	adds	r3, #40	@ 0x28
 8009d04:	2102      	movs	r1, #2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 fd26 	bl	800b758 <RCCEx_PLL3_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d18:	4b87      	ldr	r3, [pc, #540]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d28:	4a83      	ldr	r2, [pc, #524]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d2a:	430b      	orrs	r3, r1
 8009d2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f002 0310 	and.w	r3, r2, #16
 8009d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	d01e      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d5a:	d10c      	bne.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d60:	3328      	adds	r3, #40	@ 0x28
 8009d62:	2102      	movs	r1, #2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fcf7 	bl	800b758 <RCCEx_PLL3_Config>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d76:	4b70      	ldr	r3, [pc, #448]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d86:	4a6c      	ldr	r2, [pc, #432]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009da2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009da6:	460b      	mov	r3, r1
 8009da8:	4313      	orrs	r3, r2
 8009daa:	d03e      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009db8:	d022      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dbe:	d81b      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dc8:	d00b      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009dca:	e015      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 fc0d 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009de0:	e00f      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de6:	3328      	adds	r3, #40	@ 0x28
 8009de8:	2102      	movs	r1, #2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fcb4 	bl	800b758 <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009df6:	e004      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dfe:	e000      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e1a:	4a47      	ldr	r2, [pc, #284]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e20:	e003      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009e36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e38:	2300      	movs	r3, #0
 8009e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009e40:	460b      	mov	r3, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	d03b      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e52:	d01f      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e58:	d818      	bhi.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e5e:	d003      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009e60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e64:	d007      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009e66:	e011      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e68:	4b33      	ldr	r3, [pc, #204]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6c:	4a32      	ldr	r2, [pc, #200]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e74:	e00f      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7a:	3328      	adds	r3, #40	@ 0x28
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 fc6a 	bl	800b758 <RCCEx_PLL3_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e8a:	e004      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e92:	e000      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e9e:	4b26      	ldr	r3, [pc, #152]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eae:	4a22      	ldr	r2, [pc, #136]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009eb4:	e003      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009eca:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ecc:	2300      	movs	r3, #0
 8009ece:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ed0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	d034      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ee8:	d007      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009eea:	e011      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eec:	4b12      	ldr	r3, [pc, #72]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef0:	4a11      	ldr	r2, [pc, #68]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ef8:	e00e      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efe:	3308      	adds	r3, #8
 8009f00:	2102      	movs	r1, #2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fb76 	bl	800b5f4 <RCCEx_PLL2_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f0e:	e003      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10d      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f20:	4b05      	ldr	r3, [pc, #20]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f2e:	4a02      	ldr	r2, [pc, #8]	@ (8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f34:	e006      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009f36:	bf00      	nop
 8009f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f52:	2300      	movs	r3, #0
 8009f54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d00c      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f64:	3328      	adds	r3, #40	@ 0x28
 8009f66:	2102      	movs	r1, #2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 fbf5 	bl	800b758 <RCCEx_PLL3_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f86:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f88:	2300      	movs	r3, #0
 8009f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f90:	460b      	mov	r3, r1
 8009f92:	4313      	orrs	r3, r2
 8009f94:	d038      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fa2:	d018      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fa8:	d811      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fae:	d014      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fb4:	d80b      	bhi.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d011      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fbe:	d106      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc0:	4bc3      	ldr	r3, [pc, #780]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	4ac2      	ldr	r2, [pc, #776]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009fcc:	e008      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fd4:	e004      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fd6:	bf00      	nop
 8009fd8:	e002      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fda:	bf00      	nop
 8009fdc:	e000      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fe8:	4bb9      	ldr	r3, [pc, #740]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ff8:	4ab5      	ldr	r2, [pc, #724]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ffe:	e003      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a014:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a016:	2300      	movs	r3, #0
 800a018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a01a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a01e:	460b      	mov	r3, r1
 800a020:	4313      	orrs	r3, r2
 800a022:	d009      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a024:	4baa      	ldr	r3, [pc, #680]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a028:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a032:	4aa7      	ldr	r2, [pc, #668]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a034:	430b      	orrs	r3, r1
 800a036:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a044:	653b      	str	r3, [r7, #80]	@ 0x50
 800a046:	2300      	movs	r3, #0
 800a048:	657b      	str	r3, [r7, #84]	@ 0x54
 800a04a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a04e:	460b      	mov	r3, r1
 800a050:	4313      	orrs	r3, r2
 800a052:	d00a      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a054:	4b9e      	ldr	r3, [pc, #632]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a060:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a064:	4a9a      	ldr	r2, [pc, #616]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a066:	430b      	orrs	r3, r1
 800a068:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a076:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a078:	2300      	movs	r3, #0
 800a07a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a07c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a080:	460b      	mov	r3, r1
 800a082:	4313      	orrs	r3, r2
 800a084:	d009      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a086:	4b92      	ldr	r3, [pc, #584]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a08a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a094:	4a8e      	ldr	r2, [pc, #568]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a096:	430b      	orrs	r3, r1
 800a098:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a0a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d00e      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0b6:	4b86      	ldr	r3, [pc, #536]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	4a85      	ldr	r2, [pc, #532]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a0c0:	6113      	str	r3, [r2, #16]
 800a0c2:	4b83      	ldr	r3, [pc, #524]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c4:	6919      	ldr	r1, [r3, #16]
 800a0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a0ce:	4a80      	ldr	r2, [pc, #512]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	d009      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0f0:	4b77      	ldr	r3, [pc, #476]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0fe:	4a74      	ldr	r2, [pc, #464]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a100:	430b      	orrs	r3, r1
 800a102:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a110:	633b      	str	r3, [r7, #48]	@ 0x30
 800a112:	2300      	movs	r3, #0
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
 800a116:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a11a:	460b      	mov	r3, r1
 800a11c:	4313      	orrs	r3, r2
 800a11e:	d00a      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a120:	4b6b      	ldr	r3, [pc, #428]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a124:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a130:	4a67      	ldr	r2, [pc, #412]	@ (800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a132:	430b      	orrs	r3, r1
 800a134:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	2100      	movs	r1, #0
 800a140:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a148:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a14c:	460b      	mov	r3, r1
 800a14e:	4313      	orrs	r3, r2
 800a150:	d011      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a156:	3308      	adds	r3, #8
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 fa4a 	bl	800b5f4 <RCCEx_PLL2_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	2100      	movs	r1, #0
 800a180:	6239      	str	r1, [r7, #32]
 800a182:	f003 0302 	and.w	r3, r3, #2
 800a186:	627b      	str	r3, [r7, #36]	@ 0x24
 800a188:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a18c:	460b      	mov	r3, r1
 800a18e:	4313      	orrs	r3, r2
 800a190:	d011      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	3308      	adds	r3, #8
 800a198:	2101      	movs	r1, #1
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fa2a 	bl	800b5f4 <RCCEx_PLL2_Config>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	2100      	movs	r1, #0
 800a1c0:	61b9      	str	r1, [r7, #24]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	61fb      	str	r3, [r7, #28]
 800a1c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d011      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	2102      	movs	r1, #2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 fa0a 	bl	800b5f4 <RCCEx_PLL2_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	2100      	movs	r1, #0
 800a200:	6139      	str	r1, [r7, #16]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a20c:	460b      	mov	r3, r1
 800a20e:	4313      	orrs	r3, r2
 800a210:	d011      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	3328      	adds	r3, #40	@ 0x28
 800a218:	2100      	movs	r1, #0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fa9c 	bl	800b758 <RCCEx_PLL3_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	2100      	movs	r1, #0
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a24c:	460b      	mov	r3, r1
 800a24e:	4313      	orrs	r3, r2
 800a250:	d011      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a256:	3328      	adds	r3, #40	@ 0x28
 800a258:	2101      	movs	r1, #1
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 fa7c 	bl	800b758 <RCCEx_PLL3_Config>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	2100      	movs	r1, #0
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	f003 0320 	and.w	r3, r3, #32
 800a286:	607b      	str	r3, [r7, #4]
 800a288:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a28c:	460b      	mov	r3, r1
 800a28e:	4313      	orrs	r3, r2
 800a290:	d011      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a296:	3328      	adds	r3, #40	@ 0x28
 800a298:	2102      	movs	r1, #2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 fa5c 	bl	800b758 <RCCEx_PLL3_Config>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a2b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e000      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2d0:	58024400 	.word	0x58024400

0800a2d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b090      	sub	sp, #64	@ 0x40
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	f040 8094 	bne.w	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a2ec:	4b9e      	ldr	r3, [pc, #632]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2f0:	f003 0307 	and.w	r3, r3, #7
 800a2f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	f200 8087 	bhi.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a319 	.word	0x0800a319
 800a308:	0800a341 	.word	0x0800a341
 800a30c:	0800a369 	.word	0x0800a369
 800a310:	0800a405 	.word	0x0800a405
 800a314:	0800a391 	.word	0x0800a391
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a318:	4b93      	ldr	r3, [pc, #588]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a324:	d108      	bne.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 f810 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a334:	f000 bd45 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33c:	f000 bd41 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a340:	4b89      	ldr	r3, [pc, #548]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a34c:	d108      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34e:	f107 0318 	add.w	r3, r7, #24
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fd54 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35c:	f000 bd31 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a364:	f000 bd2d 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a368:	4b7f      	ldr	r3, [pc, #508]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a374:	d108      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a376:	f107 030c 	add.w	r3, r7, #12
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fe94 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a384:	f000 bd1d 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38c:	f000 bd19 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a390:	4b75      	ldr	r3, [pc, #468]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a394:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a39a:	4b73      	ldr	r3, [pc, #460]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d10c      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d109      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3ac:	4b6e      	ldr	r3, [pc, #440]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	08db      	lsrs	r3, r3, #3
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	4a6d      	ldr	r2, [pc, #436]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3be:	e01f      	b.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3c0:	4b69      	ldr	r3, [pc, #420]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3cc:	d106      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3d4:	d102      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3d6:	4b66      	ldr	r3, [pc, #408]	@ (800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3da:	e011      	b.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3dc:	4b62      	ldr	r3, [pc, #392]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3e8:	d106      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3f0:	d102      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3f2:	4b60      	ldr	r3, [pc, #384]	@ (800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f6:	e003      	b.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3fc:	f000 bce1 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a400:	f000 bcdf 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a404:	4b5c      	ldr	r3, [pc, #368]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a408:	f000 bcdb 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a410:	f000 bcd7 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a418:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a41c:	430b      	orrs	r3, r1
 800a41e:	f040 80ad 	bne.w	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a422:	4b51      	ldr	r3, [pc, #324]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a426:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a42a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a432:	d056      	beq.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43a:	f200 8090 	bhi.w	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	2bc0      	cmp	r3, #192	@ 0xc0
 800a442:	f000 8088 	beq.w	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a448:	2bc0      	cmp	r3, #192	@ 0xc0
 800a44a:	f200 8088 	bhi.w	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	2b80      	cmp	r3, #128	@ 0x80
 800a452:	d032      	beq.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a456:	2b80      	cmp	r3, #128	@ 0x80
 800a458:	f200 8081 	bhi.w	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	2b40      	cmp	r3, #64	@ 0x40
 800a466:	d014      	beq.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a468:	e079      	b.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a46a:	4b3f      	ldr	r3, [pc, #252]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a476:	d108      	bne.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 ff67 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a486:	f000 bc9c 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a48e:	f000 bc98 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a492:	4b35      	ldr	r3, [pc, #212]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a49e:	d108      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a0:	f107 0318 	add.w	r3, r7, #24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fcab 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ae:	f000 bc88 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b6:	f000 bc84 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4ba:	4b2b      	ldr	r3, [pc, #172]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4c6:	d108      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c8:	f107 030c 	add.w	r3, r7, #12
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fdeb 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d6:	f000 bc74 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4de:	f000 bc70 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4e2:	4b21      	ldr	r3, [pc, #132]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4ec:	4b1e      	ldr	r3, [pc, #120]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d10c      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	08db      	lsrs	r3, r3, #3
 800a504:	f003 0303 	and.w	r3, r3, #3
 800a508:	4a18      	ldr	r2, [pc, #96]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a50a:	fa22 f303 	lsr.w	r3, r2, r3
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a510:	e01f      	b.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a512:	4b15      	ldr	r3, [pc, #84]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a51a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a51e:	d106      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a526:	d102      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a528:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a52c:	e011      	b.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a52e:	4b0e      	ldr	r3, [pc, #56]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a53a:	d106      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a542:	d102      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a544:	4b0b      	ldr	r3, [pc, #44]	@ (800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a548:	e003      	b.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a54e:	f000 bc38 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a552:	f000 bc36 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a556:	4b08      	ldr	r3, [pc, #32]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55a:	f000 bc32 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a562:	f000 bc2e 	b.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a566:	bf00      	nop
 800a568:	58024400 	.word	0x58024400
 800a56c:	03d09000 	.word	0x03d09000
 800a570:	003d0900 	.word	0x003d0900
 800a574:	007a1200 	.word	0x007a1200
 800a578:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a580:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a584:	430b      	orrs	r3, r1
 800a586:	f040 809c 	bne.w	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a58a:	4b9e      	ldr	r3, [pc, #632]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a58c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a58e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a592:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a59a:	d054      	beq.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5a2:	f200 808b 	bhi.w	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5ac:	f000 8083 	beq.w	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5b6:	f200 8081 	bhi.w	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5c0:	d02f      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5c8:	d878      	bhi.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5d6:	d012      	beq.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a5d8:	e070      	b.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5da:	4b8a      	ldr	r3, [pc, #552]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5e6:	d107      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 feaf 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f6:	e3e4      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fc:	e3e1      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5fe:	4b81      	ldr	r3, [pc, #516]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a60a:	d107      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a60c:	f107 0318 	add.w	r3, r7, #24
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fbf5 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61a:	e3d2      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a620:	e3cf      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a622:	4b78      	ldr	r3, [pc, #480]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a62a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a62e:	d107      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a630:	f107 030c 	add.w	r3, r7, #12
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fd37 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63e:	e3c0      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a644:	e3bd      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a646:	4b6f      	ldr	r3, [pc, #444]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a64a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a64e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a650:	4b6c      	ldr	r3, [pc, #432]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d10c      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a662:	4b68      	ldr	r3, [pc, #416]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	08db      	lsrs	r3, r3, #3
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	4a66      	ldr	r2, [pc, #408]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a66e:	fa22 f303 	lsr.w	r3, r2, r3
 800a672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a674:	e01e      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a676:	4b63      	ldr	r3, [pc, #396]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a682:	d106      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a68a:	d102      	bne.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a68c:	4b5f      	ldr	r3, [pc, #380]	@ (800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a690:	e010      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a692:	4b5c      	ldr	r3, [pc, #368]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a69a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a69e:	d106      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a6:	d102      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6a8:	4b59      	ldr	r3, [pc, #356]	@ (800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ac:	e002      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6b2:	e386      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6b4:	e385      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6b6:	4b57      	ldr	r3, [pc, #348]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ba:	e382      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c0:	e37f      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	f040 80a7 	bne.w	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a6d0:	4b4c      	ldr	r3, [pc, #304]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a6d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6e0:	d055      	beq.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6e8:	f200 8096 	bhi.w	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6f2:	f000 8084 	beq.w	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6fc:	f200 808c 	bhi.w	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a706:	d030      	beq.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a70e:	f200 8083 	bhi.w	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a714:	2b00      	cmp	r3, #0
 800a716:	d004      	beq.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a71e:	d012      	beq.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a720:	e07a      	b.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a722:	4b38      	ldr	r3, [pc, #224]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a72a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a72e:	d107      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fe0b 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a73e:	e340      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a744:	e33d      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a746:	4b2f      	ldr	r3, [pc, #188]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a74e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a752:	d107      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a754:	f107 0318 	add.w	r3, r7, #24
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fb51 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a762:	e32e      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a768:	e32b      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a76a:	4b26      	ldr	r3, [pc, #152]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a776:	d107      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a778:	f107 030c 	add.w	r3, r7, #12
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fc93 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a786:	e31c      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a78c:	e319      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a78e:	4b1d      	ldr	r3, [pc, #116]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a792:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a798:	4b1a      	ldr	r3, [pc, #104]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d10c      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d109      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7aa:	4b16      	ldr	r3, [pc, #88]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	08db      	lsrs	r3, r3, #3
 800a7b0:	f003 0303 	and.w	r3, r3, #3
 800a7b4:	4a14      	ldr	r2, [pc, #80]	@ (800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7bc:	e01e      	b.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7be:	4b11      	ldr	r3, [pc, #68]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7ca:	d106      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7d2:	d102      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7d8:	e010      	b.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7da:	4b0a      	ldr	r3, [pc, #40]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7e6:	d106      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ee:	d102      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7f0:	4b07      	ldr	r3, [pc, #28]	@ (800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7f4:	e002      	b.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7fa:	e2e2      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7fc:	e2e1      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7fe:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a802:	e2de      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a804:	58024400 	.word	0x58024400
 800a808:	03d09000 	.word	0x03d09000
 800a80c:	003d0900 	.word	0x003d0900
 800a810:	007a1200 	.word	0x007a1200
 800a814:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81c:	e2d1      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a81e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a822:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a826:	430b      	orrs	r3, r1
 800a828:	f040 809c 	bne.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a82c:	4b93      	ldr	r3, [pc, #588]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a82e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a830:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a834:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a83c:	d054      	beq.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a844:	f200 808b 	bhi.w	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a84e:	f000 8083 	beq.w	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a854:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a858:	f200 8081 	bhi.w	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a862:	d02f      	beq.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a86a:	d878      	bhi.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a878:	d012      	beq.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a87a:	e070      	b.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a87c:	4b7f      	ldr	r3, [pc, #508]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a888:	d107      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fd5e 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a898:	e293      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89e:	e290      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a0:	4b76      	ldr	r3, [pc, #472]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8ac:	d107      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ae:	f107 0318 	add.w	r3, r7, #24
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 faa4 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8bc:	e281      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c2:	e27e      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8c4:	4b6d      	ldr	r3, [pc, #436]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d0:	d107      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d2:	f107 030c 	add.w	r3, r7, #12
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fbe6 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e0:	e26f      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e6:	e26c      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8e8:	4b64      	ldr	r3, [pc, #400]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8f2:	4b62      	ldr	r3, [pc, #392]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d10c      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a900:	2b00      	cmp	r3, #0
 800a902:	d109      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a904:	4b5d      	ldr	r3, [pc, #372]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	08db      	lsrs	r3, r3, #3
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	4a5c      	ldr	r2, [pc, #368]	@ (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a910:	fa22 f303 	lsr.w	r3, r2, r3
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a916:	e01e      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a918:	4b58      	ldr	r3, [pc, #352]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a924:	d106      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a92c:	d102      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a92e:	4b55      	ldr	r3, [pc, #340]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a932:	e010      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a934:	4b51      	ldr	r3, [pc, #324]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a93c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a940:	d106      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a948:	d102      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a94a:	4b4f      	ldr	r3, [pc, #316]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a94e:	e002      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a954:	e235      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a956:	e234      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a958:	4b4c      	ldr	r3, [pc, #304]	@ (800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a95c:	e231      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a962:	e22e      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a968:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a96c:	430b      	orrs	r3, r1
 800a96e:	f040 808f 	bne.w	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a972:	4b42      	ldr	r3, [pc, #264]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a976:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a97a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a982:	d06b      	beq.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a986:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a98a:	d874      	bhi.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a992:	d056      	beq.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a996:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a99a:	d86c      	bhi.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9a2:	d03b      	beq.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9aa:	d864      	bhi.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9b2:	d021      	beq.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ba:	d85c      	bhi.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d004      	beq.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9c8:	d004      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a9ca:	e054      	b.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a9cc:	f7fe fa4c 	bl	8008e68 <HAL_RCC_GetPCLK1Freq>
 800a9d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9d2:	e1f6      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9d4:	4b29      	ldr	r3, [pc, #164]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9e0:	d107      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9e2:	f107 0318 	add.w	r3, r7, #24
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fa0a 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f0:	e1e7      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f6:	e1e4      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9f8:	4b20      	ldr	r3, [pc, #128]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa04:	d107      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fb4c 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa14:	e1d5      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa1a:	e1d2      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa1c:	4b17      	ldr	r3, [pc, #92]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d109      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa28:	4b14      	ldr	r3, [pc, #80]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	08db      	lsrs	r3, r3, #3
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	4a13      	ldr	r2, [pc, #76]	@ (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa34:	fa22 f303 	lsr.w	r3, r2, r3
 800aa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3a:	e1c2      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa40:	e1bf      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa42:	4b0e      	ldr	r3, [pc, #56]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa4e:	d102      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aa50:	4b0c      	ldr	r3, [pc, #48]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa54:	e1b5      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5a:	e1b2      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa5c:	4b07      	ldr	r3, [pc, #28]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa68:	d102      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aa6a:	4b07      	ldr	r3, [pc, #28]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa6e:	e1a8      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa74:	e1a5      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa7a:	e1a2      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa7c:	58024400 	.word	0x58024400
 800aa80:	03d09000 	.word	0x03d09000
 800aa84:	003d0900 	.word	0x003d0900
 800aa88:	007a1200 	.word	0x007a1200
 800aa8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa94:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	d173      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa9c:	4b9c      	ldr	r3, [pc, #624]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aaa4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaac:	d02f      	beq.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aab4:	d863      	bhi.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aac2:	d012      	beq.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aac4:	e05b      	b.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac6:	4b92      	ldr	r3, [pc, #584]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aace:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aad2:	d107      	bne.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aad4:	f107 0318 	add.w	r3, r7, #24
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f991 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae2:	e16e      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae8:	e16b      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaea:	4b89      	ldr	r3, [pc, #548]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf6:	d107      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaf8:	f107 030c 	add.w	r3, r7, #12
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 fad3 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab06:	e15c      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab0c:	e159      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab0e:	4b80      	ldr	r3, [pc, #512]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab18:	4b7d      	ldr	r3, [pc, #500]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d10c      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d109      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab2a:	4b79      	ldr	r3, [pc, #484]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	08db      	lsrs	r3, r3, #3
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	4a77      	ldr	r2, [pc, #476]	@ (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ab36:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab3c:	e01e      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab3e:	4b74      	ldr	r3, [pc, #464]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab4a:	d106      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab52:	d102      	bne.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab54:	4b70      	ldr	r3, [pc, #448]	@ (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab58:	e010      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab5a:	4b6d      	ldr	r3, [pc, #436]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab66:	d106      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ab68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab6e:	d102      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab70:	4b6a      	ldr	r3, [pc, #424]	@ (800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab74:	e002      	b.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab7a:	e122      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab7c:	e121      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab82:	e11e      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab88:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	d133      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab90:	4b5f      	ldr	r3, [pc, #380]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba6:	d012      	beq.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aba8:	e023      	b.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abaa:	4b59      	ldr	r3, [pc, #356]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abb6:	d107      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 fbc7 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc6:	e0fc      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abcc:	e0f9      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abce:	4b50      	ldr	r3, [pc, #320]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abda:	d107      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abdc:	f107 0318 	add.w	r3, r7, #24
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 f90d 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abea:	e0ea      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf0:	e0e7      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf6:	e0e4      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abfc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ac00:	430b      	orrs	r3, r1
 800ac02:	f040 808d 	bne.w	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ac06:	4b42      	ldr	r3, [pc, #264]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ac0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac16:	d06b      	beq.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac1e:	d874      	bhi.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac26:	d056      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ac28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2e:	d86c      	bhi.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac36:	d03b      	beq.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ac38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac3e:	d864      	bhi.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac46:	d021      	beq.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac4e:	d85c      	bhi.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d004      	beq.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ac56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac5c:	d004      	beq.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ac5e:	e054      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac60:	f000 f8b8 	bl	800add4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac66:	e0ac      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac68:	4b29      	ldr	r3, [pc, #164]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac74:	d107      	bne.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac76:	f107 0318 	add.w	r3, r7, #24
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f8c0 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac84:	e09d      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac8a:	e09a      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac8c:	4b20      	ldr	r3, [pc, #128]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac98:	d107      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac9a:	f107 030c 	add.w	r3, r7, #12
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fa02 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca8:	e08b      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acae:	e088      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acb0:	4b17      	ldr	r3, [pc, #92]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d109      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acbc:	4b14      	ldr	r3, [pc, #80]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	08db      	lsrs	r3, r3, #3
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	4a13      	ldr	r2, [pc, #76]	@ (800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acc8:	fa22 f303 	lsr.w	r3, r2, r3
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acce:	e078      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd4:	e075      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acd6:	4b0e      	ldr	r3, [pc, #56]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ace2:	d102      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ace4:	4b0c      	ldr	r3, [pc, #48]	@ (800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ace6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace8:	e06b      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acee:	e068      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acf0:	4b07      	ldr	r3, [pc, #28]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acfc:	d102      	bne.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800acfe:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad02:	e05e      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad08:	e05b      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad0e:	e058      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad10:	58024400 	.word	0x58024400
 800ad14:	03d09000 	.word	0x03d09000
 800ad18:	003d0900 	.word	0x003d0900
 800ad1c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad24:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	d148      	bne.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ad2c:	4b27      	ldr	r3, [pc, #156]	@ (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad3c:	d02a      	beq.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad44:	d838      	bhi.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad52:	d00d      	beq.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ad54:	e030      	b.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad56:	4b1d      	ldr	r3, [pc, #116]	@ (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad62:	d102      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ad64:	4b1a      	ldr	r3, [pc, #104]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad68:	e02b      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad6e:	e028      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad70:	4b16      	ldr	r3, [pc, #88]	@ (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad7c:	d107      	bne.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fae4 	bl	800b350 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad8c:	e019      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad92:	e016      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad94:	4b0d      	ldr	r3, [pc, #52]	@ (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ada0:	d107      	bne.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada2:	f107 0318 	add.w	r3, r7, #24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 f82a 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb0:	e007      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb6:	e004      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adbc:	e001      	b.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800adc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3740      	adds	r7, #64	@ 0x40
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	58024400 	.word	0x58024400
 800add0:	007a1200 	.word	0x007a1200

0800add4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800add8:	f7fe f816 	bl	8008e08 <HAL_RCC_GetHCLKFreq>
 800addc:	4602      	mov	r2, r0
 800adde:	4b06      	ldr	r3, [pc, #24]	@ (800adf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	091b      	lsrs	r3, r3, #4
 800ade4:	f003 0307 	and.w	r3, r3, #7
 800ade8:	4904      	ldr	r1, [pc, #16]	@ (800adfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800adea:	5ccb      	ldrb	r3, [r1, r3]
 800adec:	f003 031f 	and.w	r3, r3, #31
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	58024400 	.word	0x58024400
 800adfc:	08011104 	.word	0x08011104

0800ae00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b089      	sub	sp, #36	@ 0x24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae08:	4ba1      	ldr	r3, [pc, #644]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0c:	f003 0303 	and.w	r3, r3, #3
 800ae10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ae12:	4b9f      	ldr	r3, [pc, #636]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae16:	0b1b      	lsrs	r3, r3, #12
 800ae18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae1e:	4b9c      	ldr	r3, [pc, #624]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae22:	091b      	lsrs	r3, r3, #4
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae2a:	4b99      	ldr	r3, [pc, #612]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae2e:	08db      	lsrs	r3, r3, #3
 800ae30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	fb02 f303 	mul.w	r3, r2, r3
 800ae3a:	ee07 3a90 	vmov	s15, r3
 800ae3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 8111 	beq.w	800b070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	f000 8083 	beq.w	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	f200 80a1 	bhi.w	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d056      	beq.n	800af18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae6a:	e099      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae6c:	4b88      	ldr	r3, [pc, #544]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0320 	and.w	r3, r3, #32
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d02d      	beq.n	800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae78:	4b85      	ldr	r3, [pc, #532]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	08db      	lsrs	r3, r3, #3
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	4a84      	ldr	r2, [pc, #528]	@ (800b094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae84:	fa22 f303 	lsr.w	r3, r2, r3
 800ae88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	ee07 3a90 	vmov	s15, r3
 800ae90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea2:	4b7b      	ldr	r3, [pc, #492]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aed2:	e087      	b.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b09c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee6:	4b6a      	ldr	r3, [pc, #424]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af16:	e065      	b.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4b59      	ldr	r3, [pc, #356]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af5a:	e043      	b.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b48      	ldr	r3, [pc, #288]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af9e:	e021      	b.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b37      	ldr	r3, [pc, #220]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afe4:	4b2a      	ldr	r3, [pc, #168]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe8:	0a5b      	lsrs	r3, r3, #9
 800afea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afee:	ee07 3a90 	vmov	s15, r3
 800aff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800affa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800affe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b00a:	ee17 2a90 	vmov	r2, s15
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b012:	4b1f      	ldr	r3, [pc, #124]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b016:	0c1b      	lsrs	r3, r3, #16
 800b018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b02c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b038:	ee17 2a90 	vmov	r2, s15
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b040:	4b13      	ldr	r3, [pc, #76]	@ (800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b044:	0e1b      	lsrs	r3, r3, #24
 800b046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b05a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b066:	ee17 2a90 	vmov	r2, s15
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b06e:	e008      	b.n	800b082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	609a      	str	r2, [r3, #8]
}
 800b082:	bf00      	nop
 800b084:	3724      	adds	r7, #36	@ 0x24
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	58024400 	.word	0x58024400
 800b094:	03d09000 	.word	0x03d09000
 800b098:	46000000 	.word	0x46000000
 800b09c:	4c742400 	.word	0x4c742400
 800b0a0:	4a742400 	.word	0x4a742400
 800b0a4:	4af42400 	.word	0x4af42400

0800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b089      	sub	sp, #36	@ 0x24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0b0:	4ba1      	ldr	r3, [pc, #644]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0ba:	4b9f      	ldr	r3, [pc, #636]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0be:	0d1b      	lsrs	r3, r3, #20
 800b0c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0c6:	4b9c      	ldr	r3, [pc, #624]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ca:	0a1b      	lsrs	r3, r3, #8
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0d2:	4b99      	ldr	r3, [pc, #612]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d6:	08db      	lsrs	r3, r3, #3
 800b0d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	fb02 f303 	mul.w	r3, r2, r3
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 8111 	beq.w	800b318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	f000 8083 	beq.w	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	2b02      	cmp	r3, #2
 800b102:	f200 80a1 	bhi.w	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d056      	beq.n	800b1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b112:	e099      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b114:	4b88      	ldr	r3, [pc, #544]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0320 	and.w	r3, r3, #32
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d02d      	beq.n	800b17c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b120:	4b85      	ldr	r3, [pc, #532]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	08db      	lsrs	r3, r3, #3
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	4a84      	ldr	r2, [pc, #528]	@ (800b33c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b12c:	fa22 f303 	lsr.w	r3, r2, r3
 800b130:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	ee07 3a90 	vmov	s15, r3
 800b138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14a:	4b7b      	ldr	r3, [pc, #492]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b15e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b176:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b17a:	e087      	b.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b6a      	ldr	r3, [pc, #424]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1be:	e065      	b.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b59      	ldr	r3, [pc, #356]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b202:	e043      	b.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b34c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b48      	ldr	r3, [pc, #288]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b246:	e021      	b.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b252:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25a:	4b37      	ldr	r3, [pc, #220]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b26e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b28a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b28c:	4b2a      	ldr	r3, [pc, #168]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b290:	0a5b      	lsrs	r3, r3, #9
 800b292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b296:	ee07 3a90 	vmov	s15, r3
 800b29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b29e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b2:	ee17 2a90 	vmov	r2, s15
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2c4:	ee07 3a90 	vmov	s15, r3
 800b2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2e0:	ee17 2a90 	vmov	r2, s15
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2e8:	4b13      	ldr	r3, [pc, #76]	@ (800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ec:	0e1b      	lsrs	r3, r3, #24
 800b2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b302:	edd7 6a07 	vldr	s13, [r7, #28]
 800b306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b30a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b30e:	ee17 2a90 	vmov	r2, s15
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b316:	e008      	b.n	800b32a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	609a      	str	r2, [r3, #8]
}
 800b32a:	bf00      	nop
 800b32c:	3724      	adds	r7, #36	@ 0x24
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	58024400 	.word	0x58024400
 800b33c:	03d09000 	.word	0x03d09000
 800b340:	46000000 	.word	0x46000000
 800b344:	4c742400 	.word	0x4c742400
 800b348:	4a742400 	.word	0x4a742400
 800b34c:	4af42400 	.word	0x4af42400

0800b350 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b350:	b480      	push	{r7}
 800b352:	b089      	sub	sp, #36	@ 0x24
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b358:	4ba0      	ldr	r3, [pc, #640]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35c:	f003 0303 	and.w	r3, r3, #3
 800b360:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b362:	4b9e      	ldr	r3, [pc, #632]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b366:	091b      	lsrs	r3, r3, #4
 800b368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b36c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b36e:	4b9b      	ldr	r3, [pc, #620]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b378:	4b98      	ldr	r3, [pc, #608]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b37a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b37c:	08db      	lsrs	r3, r3, #3
 800b37e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	ee07 3a90 	vmov	s15, r3
 800b38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b390:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 8111 	beq.w	800b5be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	f000 8083 	beq.w	800b4aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	f200 80a1 	bhi.w	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d056      	beq.n	800b466 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3b8:	e099      	b.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ba:	4b88      	ldr	r3, [pc, #544]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d02d      	beq.n	800b422 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3c6:	4b85      	ldr	r3, [pc, #532]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	08db      	lsrs	r3, r3, #3
 800b3cc:	f003 0303 	and.w	r3, r3, #3
 800b3d0:	4a83      	ldr	r2, [pc, #524]	@ (800b5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	ee07 3a90 	vmov	s15, r3
 800b3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f0:	4b7a      	ldr	r3, [pc, #488]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f8:	ee07 3a90 	vmov	s15, r3
 800b3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b400:	ed97 6a03 	vldr	s12, [r7, #12]
 800b404:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b420:	e087      	b.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b434:	4b69      	ldr	r3, [pc, #420]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b444:	ed97 6a03 	vldr	s12, [r7, #12]
 800b448:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b460:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b464:	e065      	b.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	ee07 3a90 	vmov	s15, r3
 800b46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b470:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b5ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b478:	4b58      	ldr	r3, [pc, #352]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b488:	ed97 6a03 	vldr	s12, [r7, #12]
 800b48c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b498:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4a8:	e043      	b.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	ee07 3a90 	vmov	s15, r3
 800b4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4bc:	4b47      	ldr	r3, [pc, #284]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c4:	ee07 3a90 	vmov	s15, r3
 800b4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ec:	e021      	b.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	ee07 3a90 	vmov	s15, r3
 800b4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b500:	4b36      	ldr	r3, [pc, #216]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	ed97 6a03 	vldr	s12, [r7, #12]
 800b514:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b520:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b530:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b532:	4b2a      	ldr	r3, [pc, #168]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b536:	0a5b      	lsrs	r3, r3, #9
 800b538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b54c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b558:	ee17 2a90 	vmov	r2, s15
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b560:	4b1e      	ldr	r3, [pc, #120]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b564:	0c1b      	lsrs	r3, r3, #16
 800b566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b586:	ee17 2a90 	vmov	r2, s15
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b58e:	4b13      	ldr	r3, [pc, #76]	@ (800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b592:	0e1b      	lsrs	r3, r3, #24
 800b594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5b4:	ee17 2a90 	vmov	r2, s15
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5bc:	e008      	b.n	800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	609a      	str	r2, [r3, #8]
}
 800b5d0:	bf00      	nop
 800b5d2:	3724      	adds	r7, #36	@ 0x24
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	03d09000 	.word	0x03d09000
 800b5e4:	46000000 	.word	0x46000000
 800b5e8:	4c742400 	.word	0x4c742400
 800b5ec:	4a742400 	.word	0x4a742400
 800b5f0:	4af42400 	.word	0x4af42400

0800b5f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b602:	4b53      	ldr	r3, [pc, #332]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d101      	bne.n	800b612 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e099      	b.n	800b746 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b612:	4b4f      	ldr	r3, [pc, #316]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a4e      	ldr	r2, [pc, #312]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b618:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b61c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b61e:	f7f6 fcbf 	bl	8001fa0 <HAL_GetTick>
 800b622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b624:	e008      	b.n	800b638 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b626:	f7f6 fcbb 	bl	8001fa0 <HAL_GetTick>
 800b62a:	4602      	mov	r2, r0
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	2b02      	cmp	r3, #2
 800b632:	d901      	bls.n	800b638 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e086      	b.n	800b746 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b638:	4b45      	ldr	r3, [pc, #276]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1f0      	bne.n	800b626 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b644:	4b42      	ldr	r3, [pc, #264]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	031b      	lsls	r3, r3, #12
 800b652:	493f      	ldr	r1, [pc, #252]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b654:	4313      	orrs	r3, r2
 800b656:	628b      	str	r3, [r1, #40]	@ 0x28
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	3b01      	subs	r3, #1
 800b668:	025b      	lsls	r3, r3, #9
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	431a      	orrs	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	3b01      	subs	r3, #1
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b67a:	431a      	orrs	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	3b01      	subs	r3, #1
 800b682:	061b      	lsls	r3, r3, #24
 800b684:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b688:	4931      	ldr	r1, [pc, #196]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b68e:	4b30      	ldr	r3, [pc, #192]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b692:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	492d      	ldr	r1, [pc, #180]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b69c:	4313      	orrs	r3, r2
 800b69e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b6a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a4:	f023 0220 	bic.w	r2, r3, #32
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	4928      	ldr	r1, [pc, #160]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b6b2:	4b27      	ldr	r3, [pc, #156]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b6:	4a26      	ldr	r2, [pc, #152]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6b8:	f023 0310 	bic.w	r3, r3, #16
 800b6bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6be:	4b24      	ldr	r3, [pc, #144]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6c2:	4b24      	ldr	r3, [pc, #144]	@ (800b754 <RCCEx_PLL2_Config+0x160>)
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	69d2      	ldr	r2, [r2, #28]
 800b6ca:	00d2      	lsls	r2, r2, #3
 800b6cc:	4920      	ldr	r1, [pc, #128]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6d8:	f043 0310 	orr.w	r3, r3, #16
 800b6dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d106      	bne.n	800b6f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e8:	4a19      	ldr	r2, [pc, #100]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6f0:	e00f      	b.n	800b712 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d106      	bne.n	800b706 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6f8:	4b15      	ldr	r3, [pc, #84]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fc:	4a14      	ldr	r2, [pc, #80]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b6fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b702:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b704:	e005      	b.n	800b712 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b706:	4b12      	ldr	r3, [pc, #72]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70a:	4a11      	ldr	r2, [pc, #68]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b70c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b710:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b712:	4b0f      	ldr	r3, [pc, #60]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a0e      	ldr	r2, [pc, #56]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b718:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b71c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b71e:	f7f6 fc3f 	bl	8001fa0 <HAL_GetTick>
 800b722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b724:	e008      	b.n	800b738 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b726:	f7f6 fc3b 	bl	8001fa0 <HAL_GetTick>
 800b72a:	4602      	mov	r2, r0
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	2b02      	cmp	r3, #2
 800b732:	d901      	bls.n	800b738 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e006      	b.n	800b746 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b738:	4b05      	ldr	r3, [pc, #20]	@ (800b750 <RCCEx_PLL2_Config+0x15c>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0f0      	beq.n	800b726 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b744:	7bfb      	ldrb	r3, [r7, #15]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	58024400 	.word	0x58024400
 800b754:	ffff0007 	.word	0xffff0007

0800b758 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b766:	4b53      	ldr	r3, [pc, #332]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d101      	bne.n	800b776 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e099      	b.n	800b8aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b776:	4b4f      	ldr	r3, [pc, #316]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a4e      	ldr	r2, [pc, #312]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b77c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b782:	f7f6 fc0d 	bl	8001fa0 <HAL_GetTick>
 800b786:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b788:	e008      	b.n	800b79c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b78a:	f7f6 fc09 	bl	8001fa0 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	d901      	bls.n	800b79c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e086      	b.n	800b8aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b79c:	4b45      	ldr	r3, [pc, #276]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1f0      	bne.n	800b78a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b7a8:	4b42      	ldr	r3, [pc, #264]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	051b      	lsls	r3, r3, #20
 800b7b6:	493f      	ldr	r1, [pc, #252]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	025b      	lsls	r3, r3, #9
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	041b      	lsls	r3, r3, #16
 800b7da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	061b      	lsls	r3, r3, #24
 800b7e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7ec:	4931      	ldr	r1, [pc, #196]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7f2:	4b30      	ldr	r3, [pc, #192]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	492d      	ldr	r1, [pc, #180]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b800:	4313      	orrs	r3, r2
 800b802:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b804:	4b2b      	ldr	r3, [pc, #172]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b808:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	4928      	ldr	r1, [pc, #160]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b812:	4313      	orrs	r3, r2
 800b814:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b816:	4b27      	ldr	r3, [pc, #156]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	4a26      	ldr	r2, [pc, #152]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b81c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b820:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b822:	4b24      	ldr	r3, [pc, #144]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b826:	4b24      	ldr	r3, [pc, #144]	@ (800b8b8 <RCCEx_PLL3_Config+0x160>)
 800b828:	4013      	ands	r3, r2
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	69d2      	ldr	r2, [r2, #28]
 800b82e:	00d2      	lsls	r2, r2, #3
 800b830:	4920      	ldr	r1, [pc, #128]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b832:	4313      	orrs	r3, r2
 800b834:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b836:	4b1f      	ldr	r3, [pc, #124]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83a:	4a1e      	ldr	r2, [pc, #120]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b83c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b840:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d106      	bne.n	800b856 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b848:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84c:	4a19      	ldr	r2, [pc, #100]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b84e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b852:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b854:	e00f      	b.n	800b876 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d106      	bne.n	800b86a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b85c:	4b15      	ldr	r3, [pc, #84]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b860:	4a14      	ldr	r2, [pc, #80]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b862:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b866:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b868:	e005      	b.n	800b876 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b86a:	4b12      	ldr	r3, [pc, #72]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	4a11      	ldr	r2, [pc, #68]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b870:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b874:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b876:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a0e      	ldr	r2, [pc, #56]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b87c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b882:	f7f6 fb8d 	bl	8001fa0 <HAL_GetTick>
 800b886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b888:	e008      	b.n	800b89c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b88a:	f7f6 fb89 	bl	8001fa0 <HAL_GetTick>
 800b88e:	4602      	mov	r2, r0
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	2b02      	cmp	r3, #2
 800b896:	d901      	bls.n	800b89c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b898:	2303      	movs	r3, #3
 800b89a:	e006      	b.n	800b8aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b89c:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <RCCEx_PLL3_Config+0x15c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d0f0      	beq.n	800b88a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	58024400 	.word	0x58024400
 800b8b8:	ffff0007 	.word	0xffff0007

0800b8bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e049      	b.n	800b962 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7f5 ff6c 	bl	80017c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f000 fa58 	bl	800bdb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
	...

0800b96c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <HAL_TIM_PWM_Start+0x24>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	bf14      	ite	ne
 800b988:	2301      	movne	r3, #1
 800b98a:	2300      	moveq	r3, #0
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	e03c      	b.n	800ba0a <HAL_TIM_PWM_Start+0x9e>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b04      	cmp	r3, #4
 800b994:	d109      	bne.n	800b9aa <HAL_TIM_PWM_Start+0x3e>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	bf14      	ite	ne
 800b9a2:	2301      	movne	r3, #1
 800b9a4:	2300      	moveq	r3, #0
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	e02f      	b.n	800ba0a <HAL_TIM_PWM_Start+0x9e>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b08      	cmp	r3, #8
 800b9ae:	d109      	bne.n	800b9c4 <HAL_TIM_PWM_Start+0x58>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	bf14      	ite	ne
 800b9bc:	2301      	movne	r3, #1
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	e022      	b.n	800ba0a <HAL_TIM_PWM_Start+0x9e>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2b0c      	cmp	r3, #12
 800b9c8:	d109      	bne.n	800b9de <HAL_TIM_PWM_Start+0x72>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	bf14      	ite	ne
 800b9d6:	2301      	movne	r3, #1
 800b9d8:	2300      	moveq	r3, #0
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	e015      	b.n	800ba0a <HAL_TIM_PWM_Start+0x9e>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b10      	cmp	r3, #16
 800b9e2:	d109      	bne.n	800b9f8 <HAL_TIM_PWM_Start+0x8c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	bf14      	ite	ne
 800b9f0:	2301      	movne	r3, #1
 800b9f2:	2300      	moveq	r3, #0
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	e008      	b.n	800ba0a <HAL_TIM_PWM_Start+0x9e>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	bf14      	ite	ne
 800ba04:	2301      	movne	r3, #1
 800ba06:	2300      	moveq	r3, #0
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e0a1      	b.n	800bb56 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d104      	bne.n	800ba22 <HAL_TIM_PWM_Start+0xb6>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba20:	e023      	b.n	800ba6a <HAL_TIM_PWM_Start+0xfe>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b04      	cmp	r3, #4
 800ba26:	d104      	bne.n	800ba32 <HAL_TIM_PWM_Start+0xc6>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba30:	e01b      	b.n	800ba6a <HAL_TIM_PWM_Start+0xfe>
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d104      	bne.n	800ba42 <HAL_TIM_PWM_Start+0xd6>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba40:	e013      	b.n	800ba6a <HAL_TIM_PWM_Start+0xfe>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b0c      	cmp	r3, #12
 800ba46:	d104      	bne.n	800ba52 <HAL_TIM_PWM_Start+0xe6>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba50:	e00b      	b.n	800ba6a <HAL_TIM_PWM_Start+0xfe>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b10      	cmp	r3, #16
 800ba56:	d104      	bne.n	800ba62 <HAL_TIM_PWM_Start+0xf6>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba60:	e003      	b.n	800ba6a <HAL_TIM_PWM_Start+0xfe>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2202      	movs	r2, #2
 800ba66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fd18 	bl	800c4a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a38      	ldr	r2, [pc, #224]	@ (800bb60 <HAL_TIM_PWM_Start+0x1f4>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d013      	beq.n	800baaa <HAL_TIM_PWM_Start+0x13e>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a37      	ldr	r2, [pc, #220]	@ (800bb64 <HAL_TIM_PWM_Start+0x1f8>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00e      	beq.n	800baaa <HAL_TIM_PWM_Start+0x13e>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a35      	ldr	r2, [pc, #212]	@ (800bb68 <HAL_TIM_PWM_Start+0x1fc>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d009      	beq.n	800baaa <HAL_TIM_PWM_Start+0x13e>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a34      	ldr	r2, [pc, #208]	@ (800bb6c <HAL_TIM_PWM_Start+0x200>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d004      	beq.n	800baaa <HAL_TIM_PWM_Start+0x13e>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a32      	ldr	r2, [pc, #200]	@ (800bb70 <HAL_TIM_PWM_Start+0x204>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d101      	bne.n	800baae <HAL_TIM_PWM_Start+0x142>
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <HAL_TIM_PWM_Start+0x144>
 800baae:	2300      	movs	r3, #0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a25      	ldr	r2, [pc, #148]	@ (800bb60 <HAL_TIM_PWM_Start+0x1f4>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d022      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad6:	d01d      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a25      	ldr	r2, [pc, #148]	@ (800bb74 <HAL_TIM_PWM_Start+0x208>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d018      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a24      	ldr	r2, [pc, #144]	@ (800bb78 <HAL_TIM_PWM_Start+0x20c>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d013      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a22      	ldr	r2, [pc, #136]	@ (800bb7c <HAL_TIM_PWM_Start+0x210>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d00e      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a1a      	ldr	r2, [pc, #104]	@ (800bb64 <HAL_TIM_PWM_Start+0x1f8>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d009      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a1e      	ldr	r2, [pc, #120]	@ (800bb80 <HAL_TIM_PWM_Start+0x214>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d004      	beq.n	800bb14 <HAL_TIM_PWM_Start+0x1a8>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a16      	ldr	r2, [pc, #88]	@ (800bb68 <HAL_TIM_PWM_Start+0x1fc>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d115      	bne.n	800bb40 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689a      	ldr	r2, [r3, #8]
 800bb1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bb84 <HAL_TIM_PWM_Start+0x218>)
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b06      	cmp	r3, #6
 800bb24:	d015      	beq.n	800bb52 <HAL_TIM_PWM_Start+0x1e6>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb2c:	d011      	beq.n	800bb52 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f042 0201 	orr.w	r2, r2, #1
 800bb3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb3e:	e008      	b.n	800bb52 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f042 0201 	orr.w	r2, r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	e000      	b.n	800bb54 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	40010000 	.word	0x40010000
 800bb64:	40010400 	.word	0x40010400
 800bb68:	40014000 	.word	0x40014000
 800bb6c:	40014400 	.word	0x40014400
 800bb70:	40014800 	.word	0x40014800
 800bb74:	40000400 	.word	0x40000400
 800bb78:	40000800 	.word	0x40000800
 800bb7c:	40000c00 	.word	0x40000c00
 800bb80:	40001800 	.word	0x40001800
 800bb84:	00010007 	.word	0x00010007

0800bb88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d101      	bne.n	800bba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bba2:	2302      	movs	r3, #2
 800bba4:	e0ff      	b.n	800bda6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b14      	cmp	r3, #20
 800bbb2:	f200 80f0 	bhi.w	800bd96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bbb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbc:	0800bc11 	.word	0x0800bc11
 800bbc0:	0800bd97 	.word	0x0800bd97
 800bbc4:	0800bd97 	.word	0x0800bd97
 800bbc8:	0800bd97 	.word	0x0800bd97
 800bbcc:	0800bc51 	.word	0x0800bc51
 800bbd0:	0800bd97 	.word	0x0800bd97
 800bbd4:	0800bd97 	.word	0x0800bd97
 800bbd8:	0800bd97 	.word	0x0800bd97
 800bbdc:	0800bc93 	.word	0x0800bc93
 800bbe0:	0800bd97 	.word	0x0800bd97
 800bbe4:	0800bd97 	.word	0x0800bd97
 800bbe8:	0800bd97 	.word	0x0800bd97
 800bbec:	0800bcd3 	.word	0x0800bcd3
 800bbf0:	0800bd97 	.word	0x0800bd97
 800bbf4:	0800bd97 	.word	0x0800bd97
 800bbf8:	0800bd97 	.word	0x0800bd97
 800bbfc:	0800bd15 	.word	0x0800bd15
 800bc00:	0800bd97 	.word	0x0800bd97
 800bc04:	0800bd97 	.word	0x0800bd97
 800bc08:	0800bd97 	.word	0x0800bd97
 800bc0c:	0800bd55 	.word	0x0800bd55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68b9      	ldr	r1, [r7, #8]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f970 	bl	800befc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	699a      	ldr	r2, [r3, #24]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f042 0208 	orr.w	r2, r2, #8
 800bc2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	699a      	ldr	r2, [r3, #24]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0204 	bic.w	r2, r2, #4
 800bc3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6999      	ldr	r1, [r3, #24]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	691a      	ldr	r2, [r3, #16]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	619a      	str	r2, [r3, #24]
      break;
 800bc4e:	e0a5      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 f9e0 	bl	800c01c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	699a      	ldr	r2, [r3, #24]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699a      	ldr	r2, [r3, #24]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6999      	ldr	r1, [r3, #24]
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	021a      	lsls	r2, r3, #8
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	619a      	str	r2, [r3, #24]
      break;
 800bc90:	e084      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68b9      	ldr	r1, [r7, #8]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fa49 	bl	800c130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	69da      	ldr	r2, [r3, #28]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f042 0208 	orr.w	r2, r2, #8
 800bcac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	69da      	ldr	r2, [r3, #28]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f022 0204 	bic.w	r2, r2, #4
 800bcbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69d9      	ldr	r1, [r3, #28]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	691a      	ldr	r2, [r3, #16]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	61da      	str	r2, [r3, #28]
      break;
 800bcd0:	e064      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fab1 	bl	800c240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69da      	ldr	r2, [r3, #28]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69da      	ldr	r2, [r3, #28]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69d9      	ldr	r1, [r3, #28]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	021a      	lsls	r2, r3, #8
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	61da      	str	r2, [r3, #28]
      break;
 800bd12:	e043      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68b9      	ldr	r1, [r7, #8]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fafa 	bl	800c314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0208 	orr.w	r2, r2, #8
 800bd2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f022 0204 	bic.w	r2, r2, #4
 800bd3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	691a      	ldr	r2, [r3, #16]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bd52:	e023      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68b9      	ldr	r1, [r7, #8]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fb3e 	bl	800c3dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	021a      	lsls	r2, r3, #8
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bd94:	e002      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	75fb      	strb	r3, [r7, #23]
      break;
 800bd9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop

0800bdb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a46      	ldr	r2, [pc, #280]	@ (800bedc <TIM_Base_SetConfig+0x12c>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d013      	beq.n	800bdf0 <TIM_Base_SetConfig+0x40>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdce:	d00f      	beq.n	800bdf0 <TIM_Base_SetConfig+0x40>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a43      	ldr	r2, [pc, #268]	@ (800bee0 <TIM_Base_SetConfig+0x130>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d00b      	beq.n	800bdf0 <TIM_Base_SetConfig+0x40>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a42      	ldr	r2, [pc, #264]	@ (800bee4 <TIM_Base_SetConfig+0x134>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d007      	beq.n	800bdf0 <TIM_Base_SetConfig+0x40>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a41      	ldr	r2, [pc, #260]	@ (800bee8 <TIM_Base_SetConfig+0x138>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d003      	beq.n	800bdf0 <TIM_Base_SetConfig+0x40>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a40      	ldr	r2, [pc, #256]	@ (800beec <TIM_Base_SetConfig+0x13c>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d108      	bne.n	800be02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4a35      	ldr	r2, [pc, #212]	@ (800bedc <TIM_Base_SetConfig+0x12c>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d01f      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be10:	d01b      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a32      	ldr	r2, [pc, #200]	@ (800bee0 <TIM_Base_SetConfig+0x130>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d017      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a31      	ldr	r2, [pc, #196]	@ (800bee4 <TIM_Base_SetConfig+0x134>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d013      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a30      	ldr	r2, [pc, #192]	@ (800bee8 <TIM_Base_SetConfig+0x138>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d00f      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a2f      	ldr	r2, [pc, #188]	@ (800beec <TIM_Base_SetConfig+0x13c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d00b      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a2e      	ldr	r2, [pc, #184]	@ (800bef0 <TIM_Base_SetConfig+0x140>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d007      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a2d      	ldr	r2, [pc, #180]	@ (800bef4 <TIM_Base_SetConfig+0x144>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d003      	beq.n	800be4a <TIM_Base_SetConfig+0x9a>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a2c      	ldr	r2, [pc, #176]	@ (800bef8 <TIM_Base_SetConfig+0x148>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d108      	bne.n	800be5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	4313      	orrs	r3, r2
 800be68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a16      	ldr	r2, [pc, #88]	@ (800bedc <TIM_Base_SetConfig+0x12c>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d00f      	beq.n	800bea8 <TIM_Base_SetConfig+0xf8>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a18      	ldr	r2, [pc, #96]	@ (800beec <TIM_Base_SetConfig+0x13c>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d00b      	beq.n	800bea8 <TIM_Base_SetConfig+0xf8>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a17      	ldr	r2, [pc, #92]	@ (800bef0 <TIM_Base_SetConfig+0x140>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d007      	beq.n	800bea8 <TIM_Base_SetConfig+0xf8>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a16      	ldr	r2, [pc, #88]	@ (800bef4 <TIM_Base_SetConfig+0x144>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d003      	beq.n	800bea8 <TIM_Base_SetConfig+0xf8>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a15      	ldr	r2, [pc, #84]	@ (800bef8 <TIM_Base_SetConfig+0x148>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d103      	bne.n	800beb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	691a      	ldr	r2, [r3, #16]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d105      	bne.n	800bece <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	f023 0201 	bic.w	r2, r3, #1
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	611a      	str	r2, [r3, #16]
  }
}
 800bece:	bf00      	nop
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40010000 	.word	0x40010000
 800bee0:	40000400 	.word	0x40000400
 800bee4:	40000800 	.word	0x40000800
 800bee8:	40000c00 	.word	0x40000c00
 800beec:	40010400 	.word	0x40010400
 800bef0:	40014000 	.word	0x40014000
 800bef4:	40014400 	.word	0x40014400
 800bef8:	40014800 	.word	0x40014800

0800befc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800befc:	b480      	push	{r7}
 800befe:	b087      	sub	sp, #28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	f023 0201 	bic.w	r2, r3, #1
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	4b37      	ldr	r3, [pc, #220]	@ (800c004 <TIM_OC1_SetConfig+0x108>)
 800bf28:	4013      	ands	r3, r2
 800bf2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f023 0303 	bic.w	r3, r3, #3
 800bf32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f023 0302 	bic.w	r3, r3, #2
 800bf44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a2d      	ldr	r2, [pc, #180]	@ (800c008 <TIM_OC1_SetConfig+0x10c>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00f      	beq.n	800bf78 <TIM_OC1_SetConfig+0x7c>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a2c      	ldr	r2, [pc, #176]	@ (800c00c <TIM_OC1_SetConfig+0x110>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00b      	beq.n	800bf78 <TIM_OC1_SetConfig+0x7c>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a2b      	ldr	r2, [pc, #172]	@ (800c010 <TIM_OC1_SetConfig+0x114>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d007      	beq.n	800bf78 <TIM_OC1_SetConfig+0x7c>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a2a      	ldr	r2, [pc, #168]	@ (800c014 <TIM_OC1_SetConfig+0x118>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d003      	beq.n	800bf78 <TIM_OC1_SetConfig+0x7c>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a29      	ldr	r2, [pc, #164]	@ (800c018 <TIM_OC1_SetConfig+0x11c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d10c      	bne.n	800bf92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f023 0308 	bic.w	r3, r3, #8
 800bf7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f023 0304 	bic.w	r3, r3, #4
 800bf90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a1c      	ldr	r2, [pc, #112]	@ (800c008 <TIM_OC1_SetConfig+0x10c>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d00f      	beq.n	800bfba <TIM_OC1_SetConfig+0xbe>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a1b      	ldr	r2, [pc, #108]	@ (800c00c <TIM_OC1_SetConfig+0x110>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d00b      	beq.n	800bfba <TIM_OC1_SetConfig+0xbe>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a1a      	ldr	r2, [pc, #104]	@ (800c010 <TIM_OC1_SetConfig+0x114>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d007      	beq.n	800bfba <TIM_OC1_SetConfig+0xbe>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a19      	ldr	r2, [pc, #100]	@ (800c014 <TIM_OC1_SetConfig+0x118>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d003      	beq.n	800bfba <TIM_OC1_SetConfig+0xbe>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a18      	ldr	r2, [pc, #96]	@ (800c018 <TIM_OC1_SetConfig+0x11c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d111      	bne.n	800bfde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bfc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	621a      	str	r2, [r3, #32]
}
 800bff8:	bf00      	nop
 800bffa:	371c      	adds	r7, #28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	fffeff8f 	.word	0xfffeff8f
 800c008:	40010000 	.word	0x40010000
 800c00c:	40010400 	.word	0x40010400
 800c010:	40014000 	.word	0x40014000
 800c014:	40014400 	.word	0x40014400
 800c018:	40014800 	.word	0x40014800

0800c01c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b087      	sub	sp, #28
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	f023 0210 	bic.w	r2, r3, #16
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	4b34      	ldr	r3, [pc, #208]	@ (800c118 <TIM_OC2_SetConfig+0xfc>)
 800c048:	4013      	ands	r3, r2
 800c04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	021b      	lsls	r3, r3, #8
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f023 0320 	bic.w	r3, r3, #32
 800c066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	011b      	lsls	r3, r3, #4
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	4313      	orrs	r3, r2
 800c072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a29      	ldr	r2, [pc, #164]	@ (800c11c <TIM_OC2_SetConfig+0x100>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d003      	beq.n	800c084 <TIM_OC2_SetConfig+0x68>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a28      	ldr	r2, [pc, #160]	@ (800c120 <TIM_OC2_SetConfig+0x104>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d10d      	bne.n	800c0a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c08a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c09e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a1e      	ldr	r2, [pc, #120]	@ (800c11c <TIM_OC2_SetConfig+0x100>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d00f      	beq.n	800c0c8 <TIM_OC2_SetConfig+0xac>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a1d      	ldr	r2, [pc, #116]	@ (800c120 <TIM_OC2_SetConfig+0x104>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d00b      	beq.n	800c0c8 <TIM_OC2_SetConfig+0xac>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c124 <TIM_OC2_SetConfig+0x108>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d007      	beq.n	800c0c8 <TIM_OC2_SetConfig+0xac>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c128 <TIM_OC2_SetConfig+0x10c>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d003      	beq.n	800c0c8 <TIM_OC2_SetConfig+0xac>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a1a      	ldr	r2, [pc, #104]	@ (800c12c <TIM_OC2_SetConfig+0x110>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d113      	bne.n	800c0f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	685a      	ldr	r2, [r3, #4]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	621a      	str	r2, [r3, #32]
}
 800c10a:	bf00      	nop
 800c10c:	371c      	adds	r7, #28
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	feff8fff 	.word	0xfeff8fff
 800c11c:	40010000 	.word	0x40010000
 800c120:	40010400 	.word	0x40010400
 800c124:	40014000 	.word	0x40014000
 800c128:	40014400 	.word	0x40014400
 800c12c:	40014800 	.word	0x40014800

0800c130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a1b      	ldr	r3, [r3, #32]
 800c144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4b33      	ldr	r3, [pc, #204]	@ (800c228 <TIM_OC3_SetConfig+0xf8>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0303 	bic.w	r3, r3, #3
 800c166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	021b      	lsls	r3, r3, #8
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a28      	ldr	r2, [pc, #160]	@ (800c22c <TIM_OC3_SetConfig+0xfc>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d003      	beq.n	800c196 <TIM_OC3_SetConfig+0x66>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a27      	ldr	r2, [pc, #156]	@ (800c230 <TIM_OC3_SetConfig+0x100>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d10d      	bne.n	800c1b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c19c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c22c <TIM_OC3_SetConfig+0xfc>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d00f      	beq.n	800c1da <TIM_OC3_SetConfig+0xaa>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c230 <TIM_OC3_SetConfig+0x100>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d00b      	beq.n	800c1da <TIM_OC3_SetConfig+0xaa>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c234 <TIM_OC3_SetConfig+0x104>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d007      	beq.n	800c1da <TIM_OC3_SetConfig+0xaa>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c238 <TIM_OC3_SetConfig+0x108>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d003      	beq.n	800c1da <TIM_OC3_SetConfig+0xaa>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a19      	ldr	r2, [pc, #100]	@ (800c23c <TIM_OC3_SetConfig+0x10c>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d113      	bne.n	800c202 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	621a      	str	r2, [r3, #32]
}
 800c21c:	bf00      	nop
 800c21e:	371c      	adds	r7, #28
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	fffeff8f 	.word	0xfffeff8f
 800c22c:	40010000 	.word	0x40010000
 800c230:	40010400 	.word	0x40010400
 800c234:	40014000 	.word	0x40014000
 800c238:	40014400 	.word	0x40014400
 800c23c:	40014800 	.word	0x40014800

0800c240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a1b      	ldr	r3, [r3, #32]
 800c254:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4b24      	ldr	r3, [pc, #144]	@ (800c2fc <TIM_OC4_SetConfig+0xbc>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	021b      	lsls	r3, r3, #8
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	4313      	orrs	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c28a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	031b      	lsls	r3, r3, #12
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	4313      	orrs	r3, r2
 800c296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a19      	ldr	r2, [pc, #100]	@ (800c300 <TIM_OC4_SetConfig+0xc0>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d00f      	beq.n	800c2c0 <TIM_OC4_SetConfig+0x80>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a18      	ldr	r2, [pc, #96]	@ (800c304 <TIM_OC4_SetConfig+0xc4>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d00b      	beq.n	800c2c0 <TIM_OC4_SetConfig+0x80>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a17      	ldr	r2, [pc, #92]	@ (800c308 <TIM_OC4_SetConfig+0xc8>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d007      	beq.n	800c2c0 <TIM_OC4_SetConfig+0x80>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a16      	ldr	r2, [pc, #88]	@ (800c30c <TIM_OC4_SetConfig+0xcc>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d003      	beq.n	800c2c0 <TIM_OC4_SetConfig+0x80>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a15      	ldr	r2, [pc, #84]	@ (800c310 <TIM_OC4_SetConfig+0xd0>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d109      	bne.n	800c2d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	019b      	lsls	r3, r3, #6
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	621a      	str	r2, [r3, #32]
}
 800c2ee:	bf00      	nop
 800c2f0:	371c      	adds	r7, #28
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	feff8fff 	.word	0xfeff8fff
 800c300:	40010000 	.word	0x40010000
 800c304:	40010400 	.word	0x40010400
 800c308:	40014000 	.word	0x40014000
 800c30c:	40014400 	.word	0x40014400
 800c310:	40014800 	.word	0x40014800

0800c314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c314:	b480      	push	{r7}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1b      	ldr	r3, [r3, #32]
 800c322:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a1b      	ldr	r3, [r3, #32]
 800c328:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4b21      	ldr	r3, [pc, #132]	@ (800c3c4 <TIM_OC5_SetConfig+0xb0>)
 800c340:	4013      	ands	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	041b      	lsls	r3, r3, #16
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4313      	orrs	r3, r2
 800c360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a18      	ldr	r2, [pc, #96]	@ (800c3c8 <TIM_OC5_SetConfig+0xb4>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d00f      	beq.n	800c38a <TIM_OC5_SetConfig+0x76>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a17      	ldr	r2, [pc, #92]	@ (800c3cc <TIM_OC5_SetConfig+0xb8>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d00b      	beq.n	800c38a <TIM_OC5_SetConfig+0x76>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a16      	ldr	r2, [pc, #88]	@ (800c3d0 <TIM_OC5_SetConfig+0xbc>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d007      	beq.n	800c38a <TIM_OC5_SetConfig+0x76>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a15      	ldr	r2, [pc, #84]	@ (800c3d4 <TIM_OC5_SetConfig+0xc0>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d003      	beq.n	800c38a <TIM_OC5_SetConfig+0x76>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a14      	ldr	r2, [pc, #80]	@ (800c3d8 <TIM_OC5_SetConfig+0xc4>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d109      	bne.n	800c39e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	021b      	lsls	r3, r3, #8
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	621a      	str	r2, [r3, #32]
}
 800c3b8:	bf00      	nop
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	fffeff8f 	.word	0xfffeff8f
 800c3c8:	40010000 	.word	0x40010000
 800c3cc:	40010400 	.word	0x40010400
 800c3d0:	40014000 	.word	0x40014000
 800c3d4:	40014400 	.word	0x40014400
 800c3d8:	40014800 	.word	0x40014800

0800c3dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b087      	sub	sp, #28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a1b      	ldr	r3, [r3, #32]
 800c3f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	4b22      	ldr	r3, [pc, #136]	@ (800c490 <TIM_OC6_SetConfig+0xb4>)
 800c408:	4013      	ands	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	021b      	lsls	r3, r3, #8
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	4313      	orrs	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	051b      	lsls	r3, r3, #20
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	4313      	orrs	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a19      	ldr	r2, [pc, #100]	@ (800c494 <TIM_OC6_SetConfig+0xb8>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00f      	beq.n	800c454 <TIM_OC6_SetConfig+0x78>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a18      	ldr	r2, [pc, #96]	@ (800c498 <TIM_OC6_SetConfig+0xbc>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00b      	beq.n	800c454 <TIM_OC6_SetConfig+0x78>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a17      	ldr	r2, [pc, #92]	@ (800c49c <TIM_OC6_SetConfig+0xc0>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d007      	beq.n	800c454 <TIM_OC6_SetConfig+0x78>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a16      	ldr	r2, [pc, #88]	@ (800c4a0 <TIM_OC6_SetConfig+0xc4>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_OC6_SetConfig+0x78>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a15      	ldr	r2, [pc, #84]	@ (800c4a4 <TIM_OC6_SetConfig+0xc8>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d109      	bne.n	800c468 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c45a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	029b      	lsls	r3, r3, #10
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	4313      	orrs	r3, r2
 800c466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	621a      	str	r2, [r3, #32]
}
 800c482:	bf00      	nop
 800c484:	371c      	adds	r7, #28
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	feff8fff 	.word	0xfeff8fff
 800c494:	40010000 	.word	0x40010000
 800c498:	40010400 	.word	0x40010400
 800c49c:	40014000 	.word	0x40014000
 800c4a0:	40014400 	.word	0x40014400
 800c4a4:	40014800 	.word	0x40014800

0800c4a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b087      	sub	sp, #28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f003 031f 	and.w	r3, r3, #31
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6a1a      	ldr	r2, [r3, #32]
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	43db      	mvns	r3, r3
 800c4ca:	401a      	ands	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6a1a      	ldr	r2, [r3, #32]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f003 031f 	and.w	r3, r3, #31
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	621a      	str	r2, [r3, #32]
}
 800c4e6:	bf00      	nop
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
	...

0800c4f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c504:	2b01      	cmp	r3, #1
 800c506:	d101      	bne.n	800c50c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c508:	2302      	movs	r3, #2
 800c50a:	e06d      	b.n	800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2202      	movs	r2, #2
 800c518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a30      	ldr	r2, [pc, #192]	@ (800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d004      	beq.n	800c540 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a2f      	ldr	r2, [pc, #188]	@ (800c5f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d108      	bne.n	800c552 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4313      	orrs	r3, r2
 800c550:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c558:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	4313      	orrs	r3, r2
 800c562:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a20      	ldr	r2, [pc, #128]	@ (800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d022      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c57e:	d01d      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a1d      	ldr	r2, [pc, #116]	@ (800c5fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d018      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a1c      	ldr	r2, [pc, #112]	@ (800c600 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d013      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a1a      	ldr	r2, [pc, #104]	@ (800c604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d00e      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a15      	ldr	r2, [pc, #84]	@ (800c5f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d009      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a16      	ldr	r2, [pc, #88]	@ (800c608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d004      	beq.n	800c5bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a15      	ldr	r2, [pc, #84]	@ (800c60c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d10c      	bne.n	800c5d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	40010000 	.word	0x40010000
 800c5f8:	40010400 	.word	0x40010400
 800c5fc:	40000400 	.word	0x40000400
 800c600:	40000800 	.word	0x40000800
 800c604:	40000c00 	.word	0x40000c00
 800c608:	40001800 	.word	0x40001800
 800c60c:	40014000 	.word	0x40014000

0800c610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c624:	2b01      	cmp	r3, #1
 800c626:	d101      	bne.n	800c62c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c628:	2302      	movs	r3, #2
 800c62a:	e065      	b.n	800c6f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4313      	orrs	r3, r2
 800c66a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	4313      	orrs	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	4313      	orrs	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c692:	4313      	orrs	r3, r2
 800c694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	041b      	lsls	r3, r3, #16
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a16      	ldr	r2, [pc, #88]	@ (800c704 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d004      	beq.n	800c6ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a14      	ldr	r2, [pc, #80]	@ (800c708 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d115      	bne.n	800c6e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c4:	051b      	lsls	r3, r3, #20
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	69db      	ldr	r3, [r3, #28]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	40010000 	.word	0x40010000
 800c708:	40010400 	.word	0x40010400

0800c70c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e042      	b.n	800c7a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7f5 f8a3 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2224      	movs	r2, #36	@ 0x24
 800c73a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f022 0201 	bic.w	r2, r2, #1
 800c74c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c752:	2b00      	cmp	r3, #0
 800c754:	d002      	beq.n	800c75c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f001 f96a 	bl	800da30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fbff 	bl	800cf60 <UART_SetConfig>
 800c762:	4603      	mov	r3, r0
 800c764:	2b01      	cmp	r3, #1
 800c766:	d101      	bne.n	800c76c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c768:	2301      	movs	r3, #1
 800c76a:	e01b      	b.n	800c7a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c77a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689a      	ldr	r2, [r3, #8]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c78a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f042 0201 	orr.w	r2, r2, #1
 800c79a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f001 f9e9 	bl	800db74 <UART_CheckIdleState>
 800c7a2:	4603      	mov	r3, r0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b0ba      	sub	sp, #232	@ 0xe8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c7d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c7d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c7da:	4013      	ands	r3, r2
 800c7dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c7e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d11b      	bne.n	800c820 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ec:	f003 0320 	and.w	r3, r3, #32
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d015      	beq.n	800c820 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f8:	f003 0320 	and.w	r3, r3, #32
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d105      	bne.n	800c80c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d009      	beq.n	800c820 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 8377 	beq.w	800cf04 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	4798      	blx	r3
      }
      return;
 800c81e:	e371      	b.n	800cf04 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 8123 	beq.w	800ca70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c82a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c82e:	4b8d      	ldr	r3, [pc, #564]	@ (800ca64 <HAL_UART_IRQHandler+0x2b8>)
 800c830:	4013      	ands	r3, r2
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c836:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c83a:	4b8b      	ldr	r3, [pc, #556]	@ (800ca68 <HAL_UART_IRQHandler+0x2bc>)
 800c83c:	4013      	ands	r3, r2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 8116 	beq.w	800ca70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d011      	beq.n	800c874 <HAL_UART_IRQHandler+0xc8>
 800c850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2201      	movs	r2, #1
 800c862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c86a:	f043 0201 	orr.w	r2, r3, #1
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c878:	f003 0302 	and.w	r3, r3, #2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d011      	beq.n	800c8a4 <HAL_UART_IRQHandler+0xf8>
 800c880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00b      	beq.n	800c8a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2202      	movs	r2, #2
 800c892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c89a:	f043 0204 	orr.w	r2, r3, #4
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d011      	beq.n	800c8d4 <HAL_UART_IRQHandler+0x128>
 800c8b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00b      	beq.n	800c8d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2204      	movs	r2, #4
 800c8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8ca:	f043 0202 	orr.w	r2, r3, #2
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8d8:	f003 0308 	and.w	r3, r3, #8
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d017      	beq.n	800c910 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8e4:	f003 0320 	and.w	r3, r3, #32
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d105      	bne.n	800c8f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c8ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c8f0:	4b5c      	ldr	r3, [pc, #368]	@ (800ca64 <HAL_UART_IRQHandler+0x2b8>)
 800c8f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00b      	beq.n	800c910 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2208      	movs	r2, #8
 800c8fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c906:	f043 0208 	orr.w	r2, r3, #8
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d012      	beq.n	800c942 <HAL_UART_IRQHandler+0x196>
 800c91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00c      	beq.n	800c942 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c938:	f043 0220 	orr.w	r2, r3, #32
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 82dd 	beq.w	800cf08 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c94e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b00      	cmp	r3, #0
 800c958:	d013      	beq.n	800c982 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c95a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c95e:	f003 0320 	and.w	r3, r3, #32
 800c962:	2b00      	cmp	r3, #0
 800c964:	d105      	bne.n	800c972 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c96a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c976:	2b00      	cmp	r3, #0
 800c978:	d003      	beq.n	800c982 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c988:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c996:	2b40      	cmp	r3, #64	@ 0x40
 800c998:	d005      	beq.n	800c9a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c99a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c99e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d054      	beq.n	800ca50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f001 f9fc 	bl	800dda4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b6:	2b40      	cmp	r3, #64	@ 0x40
 800c9b8:	d146      	bne.n	800ca48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3308      	adds	r3, #8
 800c9c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c9d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c9e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c9ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c9f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c9f6:	e841 2300 	strex	r3, r2, [r1]
 800c9fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c9fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1d9      	bne.n	800c9ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d017      	beq.n	800ca40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca16:	4a15      	ldr	r2, [pc, #84]	@ (800ca6c <HAL_UART_IRQHandler+0x2c0>)
 800ca18:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7f8 fd97 	bl	8005554 <HAL_DMA_Abort_IT>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d019      	beq.n	800ca60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca3e:	e00f      	b.n	800ca60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fa77 	bl	800cf34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca46:	e00b      	b.n	800ca60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fa73 	bl	800cf34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca4e:	e007      	b.n	800ca60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fa6f 	bl	800cf34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ca5e:	e253      	b.n	800cf08 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca60:	bf00      	nop
    return;
 800ca62:	e251      	b.n	800cf08 <HAL_UART_IRQHandler+0x75c>
 800ca64:	10000001 	.word	0x10000001
 800ca68:	04000120 	.word	0x04000120
 800ca6c:	0800de71 	.word	0x0800de71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	f040 81e7 	bne.w	800ce48 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca7e:	f003 0310 	and.w	r3, r3, #16
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 81e0 	beq.w	800ce48 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca8c:	f003 0310 	and.w	r3, r3, #16
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f000 81d9 	beq.w	800ce48 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2210      	movs	r2, #16
 800ca9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caa8:	2b40      	cmp	r3, #64	@ 0x40
 800caaa:	f040 8151 	bne.w	800cd50 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a96      	ldr	r2, [pc, #600]	@ (800cd10 <HAL_UART_IRQHandler+0x564>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d068      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a93      	ldr	r2, [pc, #588]	@ (800cd14 <HAL_UART_IRQHandler+0x568>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d061      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a91      	ldr	r2, [pc, #580]	@ (800cd18 <HAL_UART_IRQHandler+0x56c>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d05a      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a8e      	ldr	r2, [pc, #568]	@ (800cd1c <HAL_UART_IRQHandler+0x570>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d053      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a8c      	ldr	r2, [pc, #560]	@ (800cd20 <HAL_UART_IRQHandler+0x574>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d04c      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a89      	ldr	r2, [pc, #548]	@ (800cd24 <HAL_UART_IRQHandler+0x578>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d045      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a87      	ldr	r2, [pc, #540]	@ (800cd28 <HAL_UART_IRQHandler+0x57c>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d03e      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a84      	ldr	r2, [pc, #528]	@ (800cd2c <HAL_UART_IRQHandler+0x580>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d037      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a82      	ldr	r2, [pc, #520]	@ (800cd30 <HAL_UART_IRQHandler+0x584>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d030      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a7f      	ldr	r2, [pc, #508]	@ (800cd34 <HAL_UART_IRQHandler+0x588>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d029      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a7d      	ldr	r2, [pc, #500]	@ (800cd38 <HAL_UART_IRQHandler+0x58c>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d022      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a7a      	ldr	r2, [pc, #488]	@ (800cd3c <HAL_UART_IRQHandler+0x590>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d01b      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a78      	ldr	r2, [pc, #480]	@ (800cd40 <HAL_UART_IRQHandler+0x594>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d014      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a75      	ldr	r2, [pc, #468]	@ (800cd44 <HAL_UART_IRQHandler+0x598>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d00d      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a73      	ldr	r2, [pc, #460]	@ (800cd48 <HAL_UART_IRQHandler+0x59c>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d006      	beq.n	800cb8e <HAL_UART_IRQHandler+0x3e2>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a70      	ldr	r2, [pc, #448]	@ (800cd4c <HAL_UART_IRQHandler+0x5a0>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d106      	bne.n	800cb9c <HAL_UART_IRQHandler+0x3f0>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	e005      	b.n	800cba8 <HAL_UART_IRQHandler+0x3fc>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 81ab 	beq.w	800cf0c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	f080 81a3 	bcs.w	800cf0c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbdc:	f000 8087 	beq.w	800ccee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cbec:	e853 3f00 	ldrex	r3, [r3]
 800cbf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cbf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cbf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cc16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cc1a:	e841 2300 	strex	r3, r2, [r1]
 800cc1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cc22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1da      	bne.n	800cbe0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3308      	adds	r3, #8
 800cc30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc34:	e853 3f00 	ldrex	r3, [r3]
 800cc38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cc3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc3c:	f023 0301 	bic.w	r3, r3, #1
 800cc40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	3308      	adds	r3, #8
 800cc4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cc52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc5a:	e841 2300 	strex	r3, r2, [r1]
 800cc5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1e1      	bne.n	800cc2a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc70:	e853 3f00 	ldrex	r3, [r3]
 800cc74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3308      	adds	r3, #8
 800cc86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cc8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cc90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc92:	e841 2300 	strex	r3, r2, [r1]
 800cc96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cc98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e3      	bne.n	800cc66 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2220      	movs	r2, #32
 800cca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb4:	e853 3f00 	ldrex	r3, [r3]
 800ccb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccbc:	f023 0310 	bic.w	r3, r3, #16
 800ccc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	461a      	mov	r2, r3
 800ccca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ccd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccd6:	e841 2300 	strex	r3, r2, [r1]
 800ccda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ccdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e4      	bne.n	800ccac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7f8 f915 	bl	8004f18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f91d 	bl	800cf48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd0e:	e0fd      	b.n	800cf0c <HAL_UART_IRQHandler+0x760>
 800cd10:	40020010 	.word	0x40020010
 800cd14:	40020028 	.word	0x40020028
 800cd18:	40020040 	.word	0x40020040
 800cd1c:	40020058 	.word	0x40020058
 800cd20:	40020070 	.word	0x40020070
 800cd24:	40020088 	.word	0x40020088
 800cd28:	400200a0 	.word	0x400200a0
 800cd2c:	400200b8 	.word	0x400200b8
 800cd30:	40020410 	.word	0x40020410
 800cd34:	40020428 	.word	0x40020428
 800cd38:	40020440 	.word	0x40020440
 800cd3c:	40020458 	.word	0x40020458
 800cd40:	40020470 	.word	0x40020470
 800cd44:	40020488 	.word	0x40020488
 800cd48:	400204a0 	.word	0x400204a0
 800cd4c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 80cf 	beq.w	800cf10 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cd72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 80ca 	beq.w	800cf10 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	e853 3f00 	ldrex	r3, [r3]
 800cd88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cda0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cda4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cda6:	e841 2300 	strex	r3, r2, [r1]
 800cdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1e4      	bne.n	800cd7c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	e853 3f00 	ldrex	r3, [r3]
 800cdc0:	623b      	str	r3, [r7, #32]
   return(result);
 800cdc2:	6a3a      	ldr	r2, [r7, #32]
 800cdc4:	4b55      	ldr	r3, [pc, #340]	@ (800cf1c <HAL_UART_IRQHandler+0x770>)
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cdd6:	633a      	str	r2, [r7, #48]	@ 0x30
 800cdd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdde:	e841 2300 	strex	r3, r2, [r1]
 800cde2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e3      	bne.n	800cdb2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2220      	movs	r2, #32
 800cdee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	e853 3f00 	ldrex	r3, [r3]
 800ce0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f023 0310 	bic.w	r3, r3, #16
 800ce12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ce20:	61fb      	str	r3, [r7, #28]
 800ce22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce24:	69b9      	ldr	r1, [r7, #24]
 800ce26:	69fa      	ldr	r2, [r7, #28]
 800ce28:	e841 2300 	strex	r3, r2, [r1]
 800ce2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e4      	bne.n	800cdfe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2202      	movs	r2, #2
 800ce38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f881 	bl	800cf48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce46:	e063      	b.n	800cf10 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00e      	beq.n	800ce72 <HAL_UART_IRQHandler+0x6c6>
 800ce54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d008      	beq.n	800ce72 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ce68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 f841 	bl	800def2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce70:	e051      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d014      	beq.n	800cea8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d105      	bne.n	800ce96 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d008      	beq.n	800cea8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d03a      	beq.n	800cf14 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	4798      	blx	r3
    }
    return;
 800cea6:	e035      	b.n	800cf14 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d009      	beq.n	800cec8 <HAL_UART_IRQHandler+0x71c>
 800ceb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d003      	beq.n	800cec8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 ffeb 	bl	800de9c <UART_EndTransmit_IT>
    return;
 800cec6:	e026      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d009      	beq.n	800cee8 <HAL_UART_IRQHandler+0x73c>
 800ced4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ced8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d003      	beq.n	800cee8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f001 f81a 	bl	800df1a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cee6:	e016      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d010      	beq.n	800cf16 <HAL_UART_IRQHandler+0x76a>
 800cef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	da0c      	bge.n	800cf16 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 f802 	bl	800df06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf02:	e008      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
      return;
 800cf04:	bf00      	nop
 800cf06:	e006      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
    return;
 800cf08:	bf00      	nop
 800cf0a:	e004      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
      return;
 800cf0c:	bf00      	nop
 800cf0e:	e002      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
      return;
 800cf10:	bf00      	nop
 800cf12:	e000      	b.n	800cf16 <HAL_UART_IRQHandler+0x76a>
    return;
 800cf14:	bf00      	nop
  }
}
 800cf16:	37e8      	adds	r7, #232	@ 0xe8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	effffffe 	.word	0xeffffffe

0800cf20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf28:	bf00      	nop
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	460b      	mov	r3, r1
 800cf52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf64:	b092      	sub	sp, #72	@ 0x48
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	689a      	ldr	r2, [r3, #8]
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	695b      	ldr	r3, [r3, #20]
 800cf7e:	431a      	orrs	r2, r3
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	69db      	ldr	r3, [r3, #28]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4bbe      	ldr	r3, [pc, #760]	@ (800d288 <UART_SetConfig+0x328>)
 800cf90:	4013      	ands	r3, r2
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	6812      	ldr	r2, [r2, #0]
 800cf96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf98:	430b      	orrs	r3, r1
 800cf9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	430a      	orrs	r2, r1
 800cfb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4ab3      	ldr	r2, [pc, #716]	@ (800d28c <UART_SetConfig+0x32c>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d004      	beq.n	800cfcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	689a      	ldr	r2, [r3, #8]
 800cfd2:	4baf      	ldr	r3, [pc, #700]	@ (800d290 <UART_SetConfig+0x330>)
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	6812      	ldr	r2, [r2, #0]
 800cfda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cfdc:	430b      	orrs	r3, r1
 800cfde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe6:	f023 010f 	bic.w	r1, r3, #15
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	430a      	orrs	r2, r1
 800cff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4aa6      	ldr	r2, [pc, #664]	@ (800d294 <UART_SetConfig+0x334>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d177      	bne.n	800d0f0 <UART_SetConfig+0x190>
 800d000:	4ba5      	ldr	r3, [pc, #660]	@ (800d298 <UART_SetConfig+0x338>)
 800d002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d008:	2b28      	cmp	r3, #40	@ 0x28
 800d00a:	d86d      	bhi.n	800d0e8 <UART_SetConfig+0x188>
 800d00c:	a201      	add	r2, pc, #4	@ (adr r2, 800d014 <UART_SetConfig+0xb4>)
 800d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d012:	bf00      	nop
 800d014:	0800d0b9 	.word	0x0800d0b9
 800d018:	0800d0e9 	.word	0x0800d0e9
 800d01c:	0800d0e9 	.word	0x0800d0e9
 800d020:	0800d0e9 	.word	0x0800d0e9
 800d024:	0800d0e9 	.word	0x0800d0e9
 800d028:	0800d0e9 	.word	0x0800d0e9
 800d02c:	0800d0e9 	.word	0x0800d0e9
 800d030:	0800d0e9 	.word	0x0800d0e9
 800d034:	0800d0c1 	.word	0x0800d0c1
 800d038:	0800d0e9 	.word	0x0800d0e9
 800d03c:	0800d0e9 	.word	0x0800d0e9
 800d040:	0800d0e9 	.word	0x0800d0e9
 800d044:	0800d0e9 	.word	0x0800d0e9
 800d048:	0800d0e9 	.word	0x0800d0e9
 800d04c:	0800d0e9 	.word	0x0800d0e9
 800d050:	0800d0e9 	.word	0x0800d0e9
 800d054:	0800d0c9 	.word	0x0800d0c9
 800d058:	0800d0e9 	.word	0x0800d0e9
 800d05c:	0800d0e9 	.word	0x0800d0e9
 800d060:	0800d0e9 	.word	0x0800d0e9
 800d064:	0800d0e9 	.word	0x0800d0e9
 800d068:	0800d0e9 	.word	0x0800d0e9
 800d06c:	0800d0e9 	.word	0x0800d0e9
 800d070:	0800d0e9 	.word	0x0800d0e9
 800d074:	0800d0d1 	.word	0x0800d0d1
 800d078:	0800d0e9 	.word	0x0800d0e9
 800d07c:	0800d0e9 	.word	0x0800d0e9
 800d080:	0800d0e9 	.word	0x0800d0e9
 800d084:	0800d0e9 	.word	0x0800d0e9
 800d088:	0800d0e9 	.word	0x0800d0e9
 800d08c:	0800d0e9 	.word	0x0800d0e9
 800d090:	0800d0e9 	.word	0x0800d0e9
 800d094:	0800d0d9 	.word	0x0800d0d9
 800d098:	0800d0e9 	.word	0x0800d0e9
 800d09c:	0800d0e9 	.word	0x0800d0e9
 800d0a0:	0800d0e9 	.word	0x0800d0e9
 800d0a4:	0800d0e9 	.word	0x0800d0e9
 800d0a8:	0800d0e9 	.word	0x0800d0e9
 800d0ac:	0800d0e9 	.word	0x0800d0e9
 800d0b0:	0800d0e9 	.word	0x0800d0e9
 800d0b4:	0800d0e1 	.word	0x0800d0e1
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0be:	e222      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c6:	e21e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0c8:	2308      	movs	r3, #8
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ce:	e21a      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0d0:	2310      	movs	r3, #16
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d6:	e216      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0d8:	2320      	movs	r3, #32
 800d0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0de:	e212      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0e0:	2340      	movs	r3, #64	@ 0x40
 800d0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e6:	e20e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0e8:	2380      	movs	r3, #128	@ 0x80
 800d0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ee:	e20a      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a69      	ldr	r2, [pc, #420]	@ (800d29c <UART_SetConfig+0x33c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d130      	bne.n	800d15c <UART_SetConfig+0x1fc>
 800d0fa:	4b67      	ldr	r3, [pc, #412]	@ (800d298 <UART_SetConfig+0x338>)
 800d0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0fe:	f003 0307 	and.w	r3, r3, #7
 800d102:	2b05      	cmp	r3, #5
 800d104:	d826      	bhi.n	800d154 <UART_SetConfig+0x1f4>
 800d106:	a201      	add	r2, pc, #4	@ (adr r2, 800d10c <UART_SetConfig+0x1ac>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d125 	.word	0x0800d125
 800d110:	0800d12d 	.word	0x0800d12d
 800d114:	0800d135 	.word	0x0800d135
 800d118:	0800d13d 	.word	0x0800d13d
 800d11c:	0800d145 	.word	0x0800d145
 800d120:	0800d14d 	.word	0x0800d14d
 800d124:	2300      	movs	r3, #0
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12a:	e1ec      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d12c:	2304      	movs	r3, #4
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d132:	e1e8      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d134:	2308      	movs	r3, #8
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13a:	e1e4      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d13c:	2310      	movs	r3, #16
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d142:	e1e0      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d144:	2320      	movs	r3, #32
 800d146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14a:	e1dc      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d14c:	2340      	movs	r3, #64	@ 0x40
 800d14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d152:	e1d8      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d154:	2380      	movs	r3, #128	@ 0x80
 800d156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15a:	e1d4      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a4f      	ldr	r2, [pc, #316]	@ (800d2a0 <UART_SetConfig+0x340>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d130      	bne.n	800d1c8 <UART_SetConfig+0x268>
 800d166:	4b4c      	ldr	r3, [pc, #304]	@ (800d298 <UART_SetConfig+0x338>)
 800d168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	2b05      	cmp	r3, #5
 800d170:	d826      	bhi.n	800d1c0 <UART_SetConfig+0x260>
 800d172:	a201      	add	r2, pc, #4	@ (adr r2, 800d178 <UART_SetConfig+0x218>)
 800d174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d178:	0800d191 	.word	0x0800d191
 800d17c:	0800d199 	.word	0x0800d199
 800d180:	0800d1a1 	.word	0x0800d1a1
 800d184:	0800d1a9 	.word	0x0800d1a9
 800d188:	0800d1b1 	.word	0x0800d1b1
 800d18c:	0800d1b9 	.word	0x0800d1b9
 800d190:	2300      	movs	r3, #0
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d196:	e1b6      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d198:	2304      	movs	r3, #4
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19e:	e1b2      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a6:	e1ae      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d1a8:	2310      	movs	r3, #16
 800d1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ae:	e1aa      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d1b0:	2320      	movs	r3, #32
 800d1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b6:	e1a6      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d1b8:	2340      	movs	r3, #64	@ 0x40
 800d1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1be:	e1a2      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d1c0:	2380      	movs	r3, #128	@ 0x80
 800d1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c6:	e19e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a35      	ldr	r2, [pc, #212]	@ (800d2a4 <UART_SetConfig+0x344>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d130      	bne.n	800d234 <UART_SetConfig+0x2d4>
 800d1d2:	4b31      	ldr	r3, [pc, #196]	@ (800d298 <UART_SetConfig+0x338>)
 800d1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1d6:	f003 0307 	and.w	r3, r3, #7
 800d1da:	2b05      	cmp	r3, #5
 800d1dc:	d826      	bhi.n	800d22c <UART_SetConfig+0x2cc>
 800d1de:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e4 <UART_SetConfig+0x284>)
 800d1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e4:	0800d1fd 	.word	0x0800d1fd
 800d1e8:	0800d205 	.word	0x0800d205
 800d1ec:	0800d20d 	.word	0x0800d20d
 800d1f0:	0800d215 	.word	0x0800d215
 800d1f4:	0800d21d 	.word	0x0800d21d
 800d1f8:	0800d225 	.word	0x0800d225
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d202:	e180      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d204:	2304      	movs	r3, #4
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20a:	e17c      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d20c:	2308      	movs	r3, #8
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d212:	e178      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d214:	2310      	movs	r3, #16
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21a:	e174      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d21c:	2320      	movs	r3, #32
 800d21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d222:	e170      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d224:	2340      	movs	r3, #64	@ 0x40
 800d226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22a:	e16c      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d22c:	2380      	movs	r3, #128	@ 0x80
 800d22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d232:	e168      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a1b      	ldr	r2, [pc, #108]	@ (800d2a8 <UART_SetConfig+0x348>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d142      	bne.n	800d2c4 <UART_SetConfig+0x364>
 800d23e:	4b16      	ldr	r3, [pc, #88]	@ (800d298 <UART_SetConfig+0x338>)
 800d240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d242:	f003 0307 	and.w	r3, r3, #7
 800d246:	2b05      	cmp	r3, #5
 800d248:	d838      	bhi.n	800d2bc <UART_SetConfig+0x35c>
 800d24a:	a201      	add	r2, pc, #4	@ (adr r2, 800d250 <UART_SetConfig+0x2f0>)
 800d24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d250:	0800d269 	.word	0x0800d269
 800d254:	0800d271 	.word	0x0800d271
 800d258:	0800d279 	.word	0x0800d279
 800d25c:	0800d281 	.word	0x0800d281
 800d260:	0800d2ad 	.word	0x0800d2ad
 800d264:	0800d2b5 	.word	0x0800d2b5
 800d268:	2300      	movs	r3, #0
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e14a      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d270:	2304      	movs	r3, #4
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e146      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d278:	2308      	movs	r3, #8
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e142      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d280:	2310      	movs	r3, #16
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d286:	e13e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d288:	cfff69f3 	.word	0xcfff69f3
 800d28c:	58000c00 	.word	0x58000c00
 800d290:	11fff4ff 	.word	0x11fff4ff
 800d294:	40011000 	.word	0x40011000
 800d298:	58024400 	.word	0x58024400
 800d29c:	40004400 	.word	0x40004400
 800d2a0:	40004800 	.word	0x40004800
 800d2a4:	40004c00 	.word	0x40004c00
 800d2a8:	40005000 	.word	0x40005000
 800d2ac:	2320      	movs	r3, #32
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2b2:	e128      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d2b4:	2340      	movs	r3, #64	@ 0x40
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ba:	e124      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d2bc:	2380      	movs	r3, #128	@ 0x80
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e120      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4acb      	ldr	r2, [pc, #812]	@ (800d5f8 <UART_SetConfig+0x698>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d176      	bne.n	800d3bc <UART_SetConfig+0x45c>
 800d2ce:	4bcb      	ldr	r3, [pc, #812]	@ (800d5fc <UART_SetConfig+0x69c>)
 800d2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2d6:	2b28      	cmp	r3, #40	@ 0x28
 800d2d8:	d86c      	bhi.n	800d3b4 <UART_SetConfig+0x454>
 800d2da:	a201      	add	r2, pc, #4	@ (adr r2, 800d2e0 <UART_SetConfig+0x380>)
 800d2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e0:	0800d385 	.word	0x0800d385
 800d2e4:	0800d3b5 	.word	0x0800d3b5
 800d2e8:	0800d3b5 	.word	0x0800d3b5
 800d2ec:	0800d3b5 	.word	0x0800d3b5
 800d2f0:	0800d3b5 	.word	0x0800d3b5
 800d2f4:	0800d3b5 	.word	0x0800d3b5
 800d2f8:	0800d3b5 	.word	0x0800d3b5
 800d2fc:	0800d3b5 	.word	0x0800d3b5
 800d300:	0800d38d 	.word	0x0800d38d
 800d304:	0800d3b5 	.word	0x0800d3b5
 800d308:	0800d3b5 	.word	0x0800d3b5
 800d30c:	0800d3b5 	.word	0x0800d3b5
 800d310:	0800d3b5 	.word	0x0800d3b5
 800d314:	0800d3b5 	.word	0x0800d3b5
 800d318:	0800d3b5 	.word	0x0800d3b5
 800d31c:	0800d3b5 	.word	0x0800d3b5
 800d320:	0800d395 	.word	0x0800d395
 800d324:	0800d3b5 	.word	0x0800d3b5
 800d328:	0800d3b5 	.word	0x0800d3b5
 800d32c:	0800d3b5 	.word	0x0800d3b5
 800d330:	0800d3b5 	.word	0x0800d3b5
 800d334:	0800d3b5 	.word	0x0800d3b5
 800d338:	0800d3b5 	.word	0x0800d3b5
 800d33c:	0800d3b5 	.word	0x0800d3b5
 800d340:	0800d39d 	.word	0x0800d39d
 800d344:	0800d3b5 	.word	0x0800d3b5
 800d348:	0800d3b5 	.word	0x0800d3b5
 800d34c:	0800d3b5 	.word	0x0800d3b5
 800d350:	0800d3b5 	.word	0x0800d3b5
 800d354:	0800d3b5 	.word	0x0800d3b5
 800d358:	0800d3b5 	.word	0x0800d3b5
 800d35c:	0800d3b5 	.word	0x0800d3b5
 800d360:	0800d3a5 	.word	0x0800d3a5
 800d364:	0800d3b5 	.word	0x0800d3b5
 800d368:	0800d3b5 	.word	0x0800d3b5
 800d36c:	0800d3b5 	.word	0x0800d3b5
 800d370:	0800d3b5 	.word	0x0800d3b5
 800d374:	0800d3b5 	.word	0x0800d3b5
 800d378:	0800d3b5 	.word	0x0800d3b5
 800d37c:	0800d3b5 	.word	0x0800d3b5
 800d380:	0800d3ad 	.word	0x0800d3ad
 800d384:	2301      	movs	r3, #1
 800d386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d38a:	e0bc      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d38c:	2304      	movs	r3, #4
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d392:	e0b8      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d394:	2308      	movs	r3, #8
 800d396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39a:	e0b4      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d39c:	2310      	movs	r3, #16
 800d39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a2:	e0b0      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d3a4:	2320      	movs	r3, #32
 800d3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3aa:	e0ac      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d3ac:	2340      	movs	r3, #64	@ 0x40
 800d3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b2:	e0a8      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d3b4:	2380      	movs	r3, #128	@ 0x80
 800d3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ba:	e0a4      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a8f      	ldr	r2, [pc, #572]	@ (800d600 <UART_SetConfig+0x6a0>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d130      	bne.n	800d428 <UART_SetConfig+0x4c8>
 800d3c6:	4b8d      	ldr	r3, [pc, #564]	@ (800d5fc <UART_SetConfig+0x69c>)
 800d3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ca:	f003 0307 	and.w	r3, r3, #7
 800d3ce:	2b05      	cmp	r3, #5
 800d3d0:	d826      	bhi.n	800d420 <UART_SetConfig+0x4c0>
 800d3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d8 <UART_SetConfig+0x478>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d3f1 	.word	0x0800d3f1
 800d3dc:	0800d3f9 	.word	0x0800d3f9
 800d3e0:	0800d401 	.word	0x0800d401
 800d3e4:	0800d409 	.word	0x0800d409
 800d3e8:	0800d411 	.word	0x0800d411
 800d3ec:	0800d419 	.word	0x0800d419
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3f6:	e086      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d3f8:	2304      	movs	r3, #4
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3fe:	e082      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d400:	2308      	movs	r3, #8
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d406:	e07e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d408:	2310      	movs	r3, #16
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40e:	e07a      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d410:	2320      	movs	r3, #32
 800d412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d416:	e076      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d418:	2340      	movs	r3, #64	@ 0x40
 800d41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41e:	e072      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d420:	2380      	movs	r3, #128	@ 0x80
 800d422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d426:	e06e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a75      	ldr	r2, [pc, #468]	@ (800d604 <UART_SetConfig+0x6a4>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d130      	bne.n	800d494 <UART_SetConfig+0x534>
 800d432:	4b72      	ldr	r3, [pc, #456]	@ (800d5fc <UART_SetConfig+0x69c>)
 800d434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d436:	f003 0307 	and.w	r3, r3, #7
 800d43a:	2b05      	cmp	r3, #5
 800d43c:	d826      	bhi.n	800d48c <UART_SetConfig+0x52c>
 800d43e:	a201      	add	r2, pc, #4	@ (adr r2, 800d444 <UART_SetConfig+0x4e4>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d45d 	.word	0x0800d45d
 800d448:	0800d465 	.word	0x0800d465
 800d44c:	0800d46d 	.word	0x0800d46d
 800d450:	0800d475 	.word	0x0800d475
 800d454:	0800d47d 	.word	0x0800d47d
 800d458:	0800d485 	.word	0x0800d485
 800d45c:	2300      	movs	r3, #0
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d462:	e050      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d464:	2304      	movs	r3, #4
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d46a:	e04c      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d46c:	2308      	movs	r3, #8
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d472:	e048      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d474:	2310      	movs	r3, #16
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d47a:	e044      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d47c:	2320      	movs	r3, #32
 800d47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d482:	e040      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d484:	2340      	movs	r3, #64	@ 0x40
 800d486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48a:	e03c      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d48c:	2380      	movs	r3, #128	@ 0x80
 800d48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d492:	e038      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a5b      	ldr	r2, [pc, #364]	@ (800d608 <UART_SetConfig+0x6a8>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d130      	bne.n	800d500 <UART_SetConfig+0x5a0>
 800d49e:	4b57      	ldr	r3, [pc, #348]	@ (800d5fc <UART_SetConfig+0x69c>)
 800d4a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4a2:	f003 0307 	and.w	r3, r3, #7
 800d4a6:	2b05      	cmp	r3, #5
 800d4a8:	d826      	bhi.n	800d4f8 <UART_SetConfig+0x598>
 800d4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b0 <UART_SetConfig+0x550>)
 800d4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b0:	0800d4c9 	.word	0x0800d4c9
 800d4b4:	0800d4d1 	.word	0x0800d4d1
 800d4b8:	0800d4d9 	.word	0x0800d4d9
 800d4bc:	0800d4e1 	.word	0x0800d4e1
 800d4c0:	0800d4e9 	.word	0x0800d4e9
 800d4c4:	0800d4f1 	.word	0x0800d4f1
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ce:	e01a      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d4d0:	2304      	movs	r3, #4
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4d6:	e016      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d4d8:	2308      	movs	r3, #8
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4de:	e012      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d4e0:	2310      	movs	r3, #16
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4e6:	e00e      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d4e8:	2320      	movs	r3, #32
 800d4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ee:	e00a      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d4f0:	2340      	movs	r3, #64	@ 0x40
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f6:	e006      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d4f8:	2380      	movs	r3, #128	@ 0x80
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4fe:	e002      	b.n	800d506 <UART_SetConfig+0x5a6>
 800d500:	2380      	movs	r3, #128	@ 0x80
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a3f      	ldr	r2, [pc, #252]	@ (800d608 <UART_SetConfig+0x6a8>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	f040 80f8 	bne.w	800d702 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d512:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d516:	2b20      	cmp	r3, #32
 800d518:	dc46      	bgt.n	800d5a8 <UART_SetConfig+0x648>
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	f2c0 8082 	blt.w	800d624 <UART_SetConfig+0x6c4>
 800d520:	3b02      	subs	r3, #2
 800d522:	2b1e      	cmp	r3, #30
 800d524:	d87e      	bhi.n	800d624 <UART_SetConfig+0x6c4>
 800d526:	a201      	add	r2, pc, #4	@ (adr r2, 800d52c <UART_SetConfig+0x5cc>)
 800d528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d52c:	0800d5af 	.word	0x0800d5af
 800d530:	0800d625 	.word	0x0800d625
 800d534:	0800d5b7 	.word	0x0800d5b7
 800d538:	0800d625 	.word	0x0800d625
 800d53c:	0800d625 	.word	0x0800d625
 800d540:	0800d625 	.word	0x0800d625
 800d544:	0800d5c7 	.word	0x0800d5c7
 800d548:	0800d625 	.word	0x0800d625
 800d54c:	0800d625 	.word	0x0800d625
 800d550:	0800d625 	.word	0x0800d625
 800d554:	0800d625 	.word	0x0800d625
 800d558:	0800d625 	.word	0x0800d625
 800d55c:	0800d625 	.word	0x0800d625
 800d560:	0800d625 	.word	0x0800d625
 800d564:	0800d5d7 	.word	0x0800d5d7
 800d568:	0800d625 	.word	0x0800d625
 800d56c:	0800d625 	.word	0x0800d625
 800d570:	0800d625 	.word	0x0800d625
 800d574:	0800d625 	.word	0x0800d625
 800d578:	0800d625 	.word	0x0800d625
 800d57c:	0800d625 	.word	0x0800d625
 800d580:	0800d625 	.word	0x0800d625
 800d584:	0800d625 	.word	0x0800d625
 800d588:	0800d625 	.word	0x0800d625
 800d58c:	0800d625 	.word	0x0800d625
 800d590:	0800d625 	.word	0x0800d625
 800d594:	0800d625 	.word	0x0800d625
 800d598:	0800d625 	.word	0x0800d625
 800d59c:	0800d625 	.word	0x0800d625
 800d5a0:	0800d625 	.word	0x0800d625
 800d5a4:	0800d617 	.word	0x0800d617
 800d5a8:	2b40      	cmp	r3, #64	@ 0x40
 800d5aa:	d037      	beq.n	800d61c <UART_SetConfig+0x6bc>
 800d5ac:	e03a      	b.n	800d624 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d5ae:	f7fd fc11 	bl	800add4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d5b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5b4:	e03c      	b.n	800d630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fd fc20 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5c4:	e034      	b.n	800d630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5c6:	f107 0318 	add.w	r3, r7, #24
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fd fd6c 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5d4:	e02c      	b.n	800d630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5d6:	4b09      	ldr	r3, [pc, #36]	@ (800d5fc <UART_SetConfig+0x69c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f003 0320 	and.w	r3, r3, #32
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d016      	beq.n	800d610 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5e2:	4b06      	ldr	r3, [pc, #24]	@ (800d5fc <UART_SetConfig+0x69c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	08db      	lsrs	r3, r3, #3
 800d5e8:	f003 0303 	and.w	r3, r3, #3
 800d5ec:	4a07      	ldr	r2, [pc, #28]	@ (800d60c <UART_SetConfig+0x6ac>)
 800d5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5f4:	e01c      	b.n	800d630 <UART_SetConfig+0x6d0>
 800d5f6:	bf00      	nop
 800d5f8:	40011400 	.word	0x40011400
 800d5fc:	58024400 	.word	0x58024400
 800d600:	40007800 	.word	0x40007800
 800d604:	40007c00 	.word	0x40007c00
 800d608:	58000c00 	.word	0x58000c00
 800d60c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d610:	4b9d      	ldr	r3, [pc, #628]	@ (800d888 <UART_SetConfig+0x928>)
 800d612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d614:	e00c      	b.n	800d630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d616:	4b9d      	ldr	r3, [pc, #628]	@ (800d88c <UART_SetConfig+0x92c>)
 800d618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d61a:	e009      	b.n	800d630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d61c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d622:	e005      	b.n	800d630 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d624:	2300      	movs	r3, #0
 800d626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d62e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 81de 	beq.w	800d9f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d63c:	4a94      	ldr	r2, [pc, #592]	@ (800d890 <UART_SetConfig+0x930>)
 800d63e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d642:	461a      	mov	r2, r3
 800d644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d646:	fbb3 f3f2 	udiv	r3, r3, r2
 800d64a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	4613      	mov	r3, r2
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	4413      	add	r3, r2
 800d656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d658:	429a      	cmp	r2, r3
 800d65a:	d305      	bcc.n	800d668 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d664:	429a      	cmp	r2, r3
 800d666:	d903      	bls.n	800d670 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d66e:	e1c1      	b.n	800d9f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d672:	2200      	movs	r2, #0
 800d674:	60bb      	str	r3, [r7, #8]
 800d676:	60fa      	str	r2, [r7, #12]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d67c:	4a84      	ldr	r2, [pc, #528]	@ (800d890 <UART_SetConfig+0x930>)
 800d67e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d682:	b29b      	uxth	r3, r3
 800d684:	2200      	movs	r2, #0
 800d686:	603b      	str	r3, [r7, #0]
 800d688:	607a      	str	r2, [r7, #4]
 800d68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d68e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d692:	f7f2 fe7d 	bl	8000390 <__aeabi_uldivmod>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	4610      	mov	r0, r2
 800d69c:	4619      	mov	r1, r3
 800d69e:	f04f 0200 	mov.w	r2, #0
 800d6a2:	f04f 0300 	mov.w	r3, #0
 800d6a6:	020b      	lsls	r3, r1, #8
 800d6a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6ac:	0202      	lsls	r2, r0, #8
 800d6ae:	6979      	ldr	r1, [r7, #20]
 800d6b0:	6849      	ldr	r1, [r1, #4]
 800d6b2:	0849      	lsrs	r1, r1, #1
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	eb12 0804 	adds.w	r8, r2, r4
 800d6be:	eb43 0905 	adc.w	r9, r3, r5
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	469a      	mov	sl, r3
 800d6ca:	4693      	mov	fp, r2
 800d6cc:	4652      	mov	r2, sl
 800d6ce:	465b      	mov	r3, fp
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	4649      	mov	r1, r9
 800d6d4:	f7f2 fe5c 	bl	8000390 <__aeabi_uldivmod>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4613      	mov	r3, r2
 800d6de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d6e6:	d308      	bcc.n	800d6fa <UART_SetConfig+0x79a>
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6ee:	d204      	bcs.n	800d6fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6f6:	60da      	str	r2, [r3, #12]
 800d6f8:	e17c      	b.n	800d9f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d700:	e178      	b.n	800d9f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	69db      	ldr	r3, [r3, #28]
 800d706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d70a:	f040 80c5 	bne.w	800d898 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d70e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d712:	2b20      	cmp	r3, #32
 800d714:	dc48      	bgt.n	800d7a8 <UART_SetConfig+0x848>
 800d716:	2b00      	cmp	r3, #0
 800d718:	db7b      	blt.n	800d812 <UART_SetConfig+0x8b2>
 800d71a:	2b20      	cmp	r3, #32
 800d71c:	d879      	bhi.n	800d812 <UART_SetConfig+0x8b2>
 800d71e:	a201      	add	r2, pc, #4	@ (adr r2, 800d724 <UART_SetConfig+0x7c4>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d7af 	.word	0x0800d7af
 800d728:	0800d7b7 	.word	0x0800d7b7
 800d72c:	0800d813 	.word	0x0800d813
 800d730:	0800d813 	.word	0x0800d813
 800d734:	0800d7bf 	.word	0x0800d7bf
 800d738:	0800d813 	.word	0x0800d813
 800d73c:	0800d813 	.word	0x0800d813
 800d740:	0800d813 	.word	0x0800d813
 800d744:	0800d7cf 	.word	0x0800d7cf
 800d748:	0800d813 	.word	0x0800d813
 800d74c:	0800d813 	.word	0x0800d813
 800d750:	0800d813 	.word	0x0800d813
 800d754:	0800d813 	.word	0x0800d813
 800d758:	0800d813 	.word	0x0800d813
 800d75c:	0800d813 	.word	0x0800d813
 800d760:	0800d813 	.word	0x0800d813
 800d764:	0800d7df 	.word	0x0800d7df
 800d768:	0800d813 	.word	0x0800d813
 800d76c:	0800d813 	.word	0x0800d813
 800d770:	0800d813 	.word	0x0800d813
 800d774:	0800d813 	.word	0x0800d813
 800d778:	0800d813 	.word	0x0800d813
 800d77c:	0800d813 	.word	0x0800d813
 800d780:	0800d813 	.word	0x0800d813
 800d784:	0800d813 	.word	0x0800d813
 800d788:	0800d813 	.word	0x0800d813
 800d78c:	0800d813 	.word	0x0800d813
 800d790:	0800d813 	.word	0x0800d813
 800d794:	0800d813 	.word	0x0800d813
 800d798:	0800d813 	.word	0x0800d813
 800d79c:	0800d813 	.word	0x0800d813
 800d7a0:	0800d813 	.word	0x0800d813
 800d7a4:	0800d805 	.word	0x0800d805
 800d7a8:	2b40      	cmp	r3, #64	@ 0x40
 800d7aa:	d02e      	beq.n	800d80a <UART_SetConfig+0x8aa>
 800d7ac:	e031      	b.n	800d812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7ae:	f7fb fb5b 	bl	8008e68 <HAL_RCC_GetPCLK1Freq>
 800d7b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7b4:	e033      	b.n	800d81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7b6:	f7fb fb6d 	bl	8008e94 <HAL_RCC_GetPCLK2Freq>
 800d7ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7bc:	e02f      	b.n	800d81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fd fb1c 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7cc:	e027      	b.n	800d81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7ce:	f107 0318 	add.w	r3, r7, #24
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd fc68 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7dc:	e01f      	b.n	800d81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7de:	4b2d      	ldr	r3, [pc, #180]	@ (800d894 <UART_SetConfig+0x934>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f003 0320 	and.w	r3, r3, #32
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d009      	beq.n	800d7fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d894 <UART_SetConfig+0x934>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	08db      	lsrs	r3, r3, #3
 800d7f0:	f003 0303 	and.w	r3, r3, #3
 800d7f4:	4a24      	ldr	r2, [pc, #144]	@ (800d888 <UART_SetConfig+0x928>)
 800d7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7fc:	e00f      	b.n	800d81e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d7fe:	4b22      	ldr	r3, [pc, #136]	@ (800d888 <UART_SetConfig+0x928>)
 800d800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d802:	e00c      	b.n	800d81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d804:	4b21      	ldr	r3, [pc, #132]	@ (800d88c <UART_SetConfig+0x92c>)
 800d806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d808:	e009      	b.n	800d81e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d80a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d810:	e005      	b.n	800d81e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d81c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d81e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 80e7 	beq.w	800d9f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d82a:	4a19      	ldr	r2, [pc, #100]	@ (800d890 <UART_SetConfig+0x930>)
 800d82c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d830:	461a      	mov	r2, r3
 800d832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d834:	fbb3 f3f2 	udiv	r3, r3, r2
 800d838:	005a      	lsls	r2, r3, #1
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	085b      	lsrs	r3, r3, #1
 800d840:	441a      	add	r2, r3
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	fbb2 f3f3 	udiv	r3, r2, r3
 800d84a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84e:	2b0f      	cmp	r3, #15
 800d850:	d916      	bls.n	800d880 <UART_SetConfig+0x920>
 800d852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d858:	d212      	bcs.n	800d880 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	f023 030f 	bic.w	r3, r3, #15
 800d862:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d866:	085b      	lsrs	r3, r3, #1
 800d868:	b29b      	uxth	r3, r3
 800d86a:	f003 0307 	and.w	r3, r3, #7
 800d86e:	b29a      	uxth	r2, r3
 800d870:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d872:	4313      	orrs	r3, r2
 800d874:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d87c:	60da      	str	r2, [r3, #12]
 800d87e:	e0b9      	b.n	800d9f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d880:	2301      	movs	r3, #1
 800d882:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d886:	e0b5      	b.n	800d9f4 <UART_SetConfig+0xa94>
 800d888:	03d09000 	.word	0x03d09000
 800d88c:	003d0900 	.word	0x003d0900
 800d890:	0801111c 	.word	0x0801111c
 800d894:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d898:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d89c:	2b20      	cmp	r3, #32
 800d89e:	dc49      	bgt.n	800d934 <UART_SetConfig+0x9d4>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	db7c      	blt.n	800d99e <UART_SetConfig+0xa3e>
 800d8a4:	2b20      	cmp	r3, #32
 800d8a6:	d87a      	bhi.n	800d99e <UART_SetConfig+0xa3e>
 800d8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b0 <UART_SetConfig+0x950>)
 800d8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ae:	bf00      	nop
 800d8b0:	0800d93b 	.word	0x0800d93b
 800d8b4:	0800d943 	.word	0x0800d943
 800d8b8:	0800d99f 	.word	0x0800d99f
 800d8bc:	0800d99f 	.word	0x0800d99f
 800d8c0:	0800d94b 	.word	0x0800d94b
 800d8c4:	0800d99f 	.word	0x0800d99f
 800d8c8:	0800d99f 	.word	0x0800d99f
 800d8cc:	0800d99f 	.word	0x0800d99f
 800d8d0:	0800d95b 	.word	0x0800d95b
 800d8d4:	0800d99f 	.word	0x0800d99f
 800d8d8:	0800d99f 	.word	0x0800d99f
 800d8dc:	0800d99f 	.word	0x0800d99f
 800d8e0:	0800d99f 	.word	0x0800d99f
 800d8e4:	0800d99f 	.word	0x0800d99f
 800d8e8:	0800d99f 	.word	0x0800d99f
 800d8ec:	0800d99f 	.word	0x0800d99f
 800d8f0:	0800d96b 	.word	0x0800d96b
 800d8f4:	0800d99f 	.word	0x0800d99f
 800d8f8:	0800d99f 	.word	0x0800d99f
 800d8fc:	0800d99f 	.word	0x0800d99f
 800d900:	0800d99f 	.word	0x0800d99f
 800d904:	0800d99f 	.word	0x0800d99f
 800d908:	0800d99f 	.word	0x0800d99f
 800d90c:	0800d99f 	.word	0x0800d99f
 800d910:	0800d99f 	.word	0x0800d99f
 800d914:	0800d99f 	.word	0x0800d99f
 800d918:	0800d99f 	.word	0x0800d99f
 800d91c:	0800d99f 	.word	0x0800d99f
 800d920:	0800d99f 	.word	0x0800d99f
 800d924:	0800d99f 	.word	0x0800d99f
 800d928:	0800d99f 	.word	0x0800d99f
 800d92c:	0800d99f 	.word	0x0800d99f
 800d930:	0800d991 	.word	0x0800d991
 800d934:	2b40      	cmp	r3, #64	@ 0x40
 800d936:	d02e      	beq.n	800d996 <UART_SetConfig+0xa36>
 800d938:	e031      	b.n	800d99e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d93a:	f7fb fa95 	bl	8008e68 <HAL_RCC_GetPCLK1Freq>
 800d93e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d940:	e033      	b.n	800d9aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d942:	f7fb faa7 	bl	8008e94 <HAL_RCC_GetPCLK2Freq>
 800d946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d948:	e02f      	b.n	800d9aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d94a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fd fa56 	bl	800ae00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d958:	e027      	b.n	800d9aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d95a:	f107 0318 	add.w	r3, r7, #24
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fd fba2 	bl	800b0a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d968:	e01f      	b.n	800d9aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d96a:	4b2d      	ldr	r3, [pc, #180]	@ (800da20 <UART_SetConfig+0xac0>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f003 0320 	and.w	r3, r3, #32
 800d972:	2b00      	cmp	r3, #0
 800d974:	d009      	beq.n	800d98a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d976:	4b2a      	ldr	r3, [pc, #168]	@ (800da20 <UART_SetConfig+0xac0>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	08db      	lsrs	r3, r3, #3
 800d97c:	f003 0303 	and.w	r3, r3, #3
 800d980:	4a28      	ldr	r2, [pc, #160]	@ (800da24 <UART_SetConfig+0xac4>)
 800d982:	fa22 f303 	lsr.w	r3, r2, r3
 800d986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d988:	e00f      	b.n	800d9aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d98a:	4b26      	ldr	r3, [pc, #152]	@ (800da24 <UART_SetConfig+0xac4>)
 800d98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d98e:	e00c      	b.n	800d9aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d990:	4b25      	ldr	r3, [pc, #148]	@ (800da28 <UART_SetConfig+0xac8>)
 800d992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d994:	e009      	b.n	800d9aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d99c:	e005      	b.n	800d9aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d9a8:	bf00      	nop
    }

    if (pclk != 0U)
 800d9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d021      	beq.n	800d9f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9b4:	4a1d      	ldr	r2, [pc, #116]	@ (800da2c <UART_SetConfig+0xacc>)
 800d9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9be:	fbb3 f2f2 	udiv	r2, r3, r2
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	085b      	lsrs	r3, r3, #1
 800d9c8:	441a      	add	r2, r3
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d6:	2b0f      	cmp	r3, #15
 800d9d8:	d909      	bls.n	800d9ee <UART_SetConfig+0xa8e>
 800d9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9e0:	d205      	bcs.n	800d9ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	60da      	str	r2, [r3, #12]
 800d9ec:	e002      	b.n	800d9f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2200      	movs	r2, #0
 800da08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2200      	movs	r2, #0
 800da0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800da10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800da14:	4618      	mov	r0, r3
 800da16:	3748      	adds	r7, #72	@ 0x48
 800da18:	46bd      	mov	sp, r7
 800da1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da1e:	bf00      	nop
 800da20:	58024400 	.word	0x58024400
 800da24:	03d09000 	.word	0x03d09000
 800da28:	003d0900 	.word	0x003d0900
 800da2c:	0801111c 	.word	0x0801111c

0800da30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da3c:	f003 0308 	and.w	r3, r3, #8
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00a      	beq.n	800da7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	430a      	orrs	r2, r1
 800da7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da80:	f003 0302 	and.w	r3, r3, #2
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00a      	beq.n	800da9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	430a      	orrs	r2, r1
 800da9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daa2:	f003 0304 	and.w	r3, r3, #4
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00a      	beq.n	800dac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	430a      	orrs	r2, r1
 800dabe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dac4:	f003 0310 	and.w	r3, r3, #16
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00a      	beq.n	800dae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	430a      	orrs	r2, r1
 800dae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae6:	f003 0320 	and.w	r3, r3, #32
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	430a      	orrs	r2, r1
 800db02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01a      	beq.n	800db46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	430a      	orrs	r2, r1
 800db24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db2e:	d10a      	bne.n	800db46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	430a      	orrs	r2, r1
 800db44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00a      	beq.n	800db68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	430a      	orrs	r2, r1
 800db66:	605a      	str	r2, [r3, #4]
  }
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b098      	sub	sp, #96	@ 0x60
 800db78:	af02      	add	r7, sp, #8
 800db7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db84:	f7f4 fa0c 	bl	8001fa0 <HAL_GetTick>
 800db88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f003 0308 	and.w	r3, r3, #8
 800db94:	2b08      	cmp	r3, #8
 800db96:	d12f      	bne.n	800dbf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dba0:	2200      	movs	r2, #0
 800dba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f88e 	bl	800dcc8 <UART_WaitOnFlagUntilTimeout>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d022      	beq.n	800dbf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbba:	e853 3f00 	ldrex	r3, [r3]
 800dbbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dbc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	461a      	mov	r2, r3
 800dbce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dbd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbd8:	e841 2300 	strex	r3, r2, [r1]
 800dbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dbde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1e6      	bne.n	800dbb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	e063      	b.n	800dcc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f003 0304 	and.w	r3, r3, #4
 800dc02:	2b04      	cmp	r3, #4
 800dc04:	d149      	bne.n	800dc9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f857 	bl	800dcc8 <UART_WaitOnFlagUntilTimeout>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d03c      	beq.n	800dc9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc28:	e853 3f00 	ldrex	r3, [r3]
 800dc2c:	623b      	str	r3, [r7, #32]
   return(result);
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc46:	e841 2300 	strex	r3, r2, [r1]
 800dc4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1e6      	bne.n	800dc20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3308      	adds	r3, #8
 800dc58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	e853 3f00 	ldrex	r3, [r3]
 800dc60:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f023 0301 	bic.w	r3, r3, #1
 800dc68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	3308      	adds	r3, #8
 800dc70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc72:	61fa      	str	r2, [r7, #28]
 800dc74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	69b9      	ldr	r1, [r7, #24]
 800dc78:	69fa      	ldr	r2, [r7, #28]
 800dc7a:	e841 2300 	strex	r3, r2, [r1]
 800dc7e:	617b      	str	r3, [r7, #20]
   return(result);
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e5      	bne.n	800dc52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc96:	2303      	movs	r3, #3
 800dc98:	e012      	b.n	800dcc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2220      	movs	r2, #32
 800dc9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2220      	movs	r2, #32
 800dca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3758      	adds	r7, #88	@ 0x58
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcd8:	e04f      	b.n	800dd7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce0:	d04b      	beq.n	800dd7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dce2:	f7f4 f95d 	bl	8001fa0 <HAL_GetTick>
 800dce6:	4602      	mov	r2, r0
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d302      	bcc.n	800dcf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d101      	bne.n	800dcfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	e04e      	b.n	800dd9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0304 	and.w	r3, r3, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d037      	beq.n	800dd7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b80      	cmp	r3, #128	@ 0x80
 800dd0e:	d034      	beq.n	800dd7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b40      	cmp	r3, #64	@ 0x40
 800dd14:	d031      	beq.n	800dd7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	69db      	ldr	r3, [r3, #28]
 800dd1c:	f003 0308 	and.w	r3, r3, #8
 800dd20:	2b08      	cmp	r3, #8
 800dd22:	d110      	bne.n	800dd46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2208      	movs	r2, #8
 800dd2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f000 f839 	bl	800dda4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2208      	movs	r2, #8
 800dd36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dd42:	2301      	movs	r3, #1
 800dd44:	e029      	b.n	800dd9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	69db      	ldr	r3, [r3, #28]
 800dd4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd54:	d111      	bne.n	800dd7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 f81f 	bl	800dda4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2220      	movs	r2, #32
 800dd6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2200      	movs	r2, #0
 800dd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dd76:	2303      	movs	r3, #3
 800dd78:	e00f      	b.n	800dd9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	69da      	ldr	r2, [r3, #28]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	4013      	ands	r3, r2
 800dd84:	68ba      	ldr	r2, [r7, #8]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	bf0c      	ite	eq
 800dd8a:	2301      	moveq	r3, #1
 800dd8c:	2300      	movne	r3, #0
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	461a      	mov	r2, r3
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d0a0      	beq.n	800dcda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
	...

0800dda4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b095      	sub	sp, #84	@ 0x54
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb4:	e853 3f00 	ldrex	r3, [r3]
 800ddb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ddba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddca:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ddd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ddd2:	e841 2300 	strex	r3, r2, [r1]
 800ddd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1e6      	bne.n	800ddac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	3308      	adds	r3, #8
 800dde4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	e853 3f00 	ldrex	r3, [r3]
 800ddec:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddee:	69fa      	ldr	r2, [r7, #28]
 800ddf0:	4b1e      	ldr	r3, [pc, #120]	@ (800de6c <UART_EndRxTransfer+0xc8>)
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800de00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de06:	e841 2300 	strex	r3, r2, [r1]
 800de0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1e5      	bne.n	800ddde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de16:	2b01      	cmp	r3, #1
 800de18:	d118      	bne.n	800de4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	e853 3f00 	ldrex	r3, [r3]
 800de26:	60bb      	str	r3, [r7, #8]
   return(result);
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	f023 0310 	bic.w	r3, r3, #16
 800de2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	461a      	mov	r2, r3
 800de36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de38:	61bb      	str	r3, [r7, #24]
 800de3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3c:	6979      	ldr	r1, [r7, #20]
 800de3e:	69ba      	ldr	r2, [r7, #24]
 800de40:	e841 2300 	strex	r3, r2, [r1]
 800de44:	613b      	str	r3, [r7, #16]
   return(result);
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1e6      	bne.n	800de1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2220      	movs	r2, #32
 800de50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800de60:	bf00      	nop
 800de62:	3754      	adds	r7, #84	@ 0x54
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr
 800de6c:	effffffe 	.word	0xeffffffe

0800de70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff f850 	bl	800cf34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de94:	bf00      	nop
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b088      	sub	sp, #32
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	e853 3f00 	ldrex	r3, [r3]
 800deb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	461a      	mov	r2, r3
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec6:	6979      	ldr	r1, [r7, #20]
 800dec8:	69ba      	ldr	r2, [r7, #24]
 800deca:	e841 2300 	strex	r3, r2, [r1]
 800dece:	613b      	str	r3, [r7, #16]
   return(result);
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1e6      	bne.n	800dea4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2220      	movs	r2, #32
 800deda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7ff f81b 	bl	800cf20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800deea:	bf00      	nop
 800deec:	3720      	adds	r7, #32
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800def2:	b480      	push	{r7}
 800def4:	b083      	sub	sp, #12
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800df06:	b480      	push	{r7}
 800df08:	b083      	sub	sp, #12
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800df0e:	bf00      	nop
 800df10:	370c      	adds	r7, #12
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800df22:	bf00      	nop
 800df24:	370c      	adds	r7, #12
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df2e:	b480      	push	{r7}
 800df30:	b085      	sub	sp, #20
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d101      	bne.n	800df44 <HAL_UARTEx_DisableFifoMode+0x16>
 800df40:	2302      	movs	r3, #2
 800df42:	e027      	b.n	800df94 <HAL_UARTEx_DisableFifoMode+0x66>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2201      	movs	r2, #1
 800df48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2224      	movs	r2, #36	@ 0x24
 800df50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f022 0201 	bic.w	r2, r2, #1
 800df6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800df72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2220      	movs	r2, #32
 800df86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d101      	bne.n	800dfb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	e02d      	b.n	800e014 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2224      	movs	r2, #36	@ 0x24
 800dfc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f022 0201 	bic.w	r2, r2, #1
 800dfde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	430a      	orrs	r2, r1
 800dff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f84f 	bl	800e098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2220      	movs	r2, #32
 800e006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d101      	bne.n	800e034 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e030:	2302      	movs	r3, #2
 800e032:	e02d      	b.n	800e090 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2224      	movs	r2, #36	@ 0x24
 800e040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f022 0201 	bic.w	r2, r2, #1
 800e05a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	430a      	orrs	r2, r1
 800e06e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f811 	bl	800e098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2220      	movs	r2, #32
 800e082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d108      	bne.n	800e0ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e0b8:	e031      	b.n	800e11e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e0ba:	2310      	movs	r3, #16
 800e0bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e0be:	2310      	movs	r3, #16
 800e0c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	0e5b      	lsrs	r3, r3, #25
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	f003 0307 	and.w	r3, r3, #7
 800e0d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	0f5b      	lsrs	r3, r3, #29
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 0307 	and.w	r3, r3, #7
 800e0e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0e2:	7bbb      	ldrb	r3, [r7, #14]
 800e0e4:	7b3a      	ldrb	r2, [r7, #12]
 800e0e6:	4911      	ldr	r1, [pc, #68]	@ (800e12c <UARTEx_SetNbDataToProcess+0x94>)
 800e0e8:	5c8a      	ldrb	r2, [r1, r2]
 800e0ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e0ee:	7b3a      	ldrb	r2, [r7, #12]
 800e0f0:	490f      	ldr	r1, [pc, #60]	@ (800e130 <UARTEx_SetNbDataToProcess+0x98>)
 800e0f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e100:	7bfb      	ldrb	r3, [r7, #15]
 800e102:	7b7a      	ldrb	r2, [r7, #13]
 800e104:	4909      	ldr	r1, [pc, #36]	@ (800e12c <UARTEx_SetNbDataToProcess+0x94>)
 800e106:	5c8a      	ldrb	r2, [r1, r2]
 800e108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e10c:	7b7a      	ldrb	r2, [r7, #13]
 800e10e:	4908      	ldr	r1, [pc, #32]	@ (800e130 <UARTEx_SetNbDataToProcess+0x98>)
 800e110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e112:	fb93 f3f2 	sdiv	r3, r3, r2
 800e116:	b29a      	uxth	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e11e:	bf00      	nop
 800e120:	3714      	adds	r7, #20
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	08011134 	.word	0x08011134
 800e130:	0801113c 	.word	0x0801113c

0800e134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e134:	b084      	sub	sp, #16
 800e136:	b580      	push	{r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	f107 001c 	add.w	r0, r7, #28
 800e142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e146:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d121      	bne.n	800e192 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e152:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68da      	ldr	r2, [r3, #12]
 800e15e:	4b2c      	ldr	r3, [pc, #176]	@ (800e210 <USB_CoreInit+0xdc>)
 800e160:	4013      	ands	r3, r2
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e176:	2b01      	cmp	r3, #1
 800e178:	d105      	bne.n	800e186 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 faaa 	bl	800e6e0 <USB_CoreReset>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73fb      	strb	r3, [r7, #15]
 800e190:	e01b      	b.n	800e1ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fa9e 	bl	800e6e0 <USB_CoreReset>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e1a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d106      	bne.n	800e1be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	639a      	str	r2, [r3, #56]	@ 0x38
 800e1bc:	e005      	b.n	800e1ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e1ca:	7fbb      	ldrb	r3, [r7, #30]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d116      	bne.n	800e1fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e1de:	4b0d      	ldr	r3, [pc, #52]	@ (800e214 <USB_CoreInit+0xe0>)
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f043 0206 	orr.w	r2, r3, #6
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	f043 0220 	orr.w	r2, r3, #32
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e20a:	b004      	add	sp, #16
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	ffbdffbf 	.word	0xffbdffbf
 800e214:	03ee0000 	.word	0x03ee0000

0800e218 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	f023 0201 	bic.w	r2, r3, #1
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b084      	sub	sp, #16
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	460b      	mov	r3, r1
 800e244:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e246:	2300      	movs	r3, #0
 800e248:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e256:	78fb      	ldrb	r3, [r7, #3]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d115      	bne.n	800e288 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e268:	200a      	movs	r0, #10
 800e26a:	f7f3 fea5 	bl	8001fb8 <HAL_Delay>
      ms += 10U;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	330a      	adds	r3, #10
 800e272:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fa25 	bl	800e6c4 <USB_GetMode>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d01e      	beq.n	800e2be <USB_SetCurrentMode+0x84>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2bc7      	cmp	r3, #199	@ 0xc7
 800e284:	d9f0      	bls.n	800e268 <USB_SetCurrentMode+0x2e>
 800e286:	e01a      	b.n	800e2be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e288:	78fb      	ldrb	r3, [r7, #3]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d115      	bne.n	800e2ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e29a:	200a      	movs	r0, #10
 800e29c:	f7f3 fe8c 	bl	8001fb8 <HAL_Delay>
      ms += 10U;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	330a      	adds	r3, #10
 800e2a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fa0c 	bl	800e6c4 <USB_GetMode>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d005      	beq.n	800e2be <USB_SetCurrentMode+0x84>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2bc7      	cmp	r3, #199	@ 0xc7
 800e2b6:	d9f0      	bls.n	800e29a <USB_SetCurrentMode+0x60>
 800e2b8:	e001      	b.n	800e2be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e005      	b.n	800e2ca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2bc8      	cmp	r3, #200	@ 0xc8
 800e2c2:	d101      	bne.n	800e2c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e000      	b.n	800e2ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
	...

0800e2d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2d4:	b084      	sub	sp, #16
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b086      	sub	sp, #24
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	613b      	str	r3, [r7, #16]
 800e2f2:	e009      	b.n	800e308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	3340      	adds	r3, #64	@ 0x40
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	2200      	movs	r2, #0
 800e300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	3301      	adds	r3, #1
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	2b0e      	cmp	r3, #14
 800e30c:	d9f2      	bls.n	800e2f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e30e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e312:	2b00      	cmp	r3, #0
 800e314:	d11c      	bne.n	800e350 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e324:	f043 0302 	orr.w	r3, r3, #2
 800e328:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e32e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	e005      	b.n	800e35c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e354:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e362:	461a      	mov	r2, r3
 800e364:	2300      	movs	r3, #0
 800e366:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e368:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d10d      	bne.n	800e38c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e378:	2100      	movs	r1, #0
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f968 	bl	800e650 <USB_SetDevSpeed>
 800e380:	e008      	b.n	800e394 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e382:	2101      	movs	r1, #1
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 f963 	bl	800e650 <USB_SetDevSpeed>
 800e38a:	e003      	b.n	800e394 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e38c:	2103      	movs	r1, #3
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f95e 	bl	800e650 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e394:	2110      	movs	r1, #16
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f8fa 	bl	800e590 <USB_FlushTxFifo>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f924 	bl	800e5f4 <USB_FlushRxFifo>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3bc:	461a      	mov	r2, r3
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3da:	2300      	movs	r3, #0
 800e3dc:	613b      	str	r3, [r7, #16]
 800e3de:	e043      	b.n	800e468 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	015a      	lsls	r2, r3, #5
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e3f6:	d118      	bne.n	800e42a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10a      	bne.n	800e414 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	015a      	lsls	r2, r3, #5
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	4413      	add	r3, r2
 800e406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e40a:	461a      	mov	r2, r3
 800e40c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e410:	6013      	str	r3, [r2, #0]
 800e412:	e013      	b.n	800e43c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	015a      	lsls	r2, r3, #5
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	4413      	add	r3, r2
 800e41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e420:	461a      	mov	r2, r3
 800e422:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e426:	6013      	str	r3, [r2, #0]
 800e428:	e008      	b.n	800e43c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	015a      	lsls	r2, r3, #5
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	4413      	add	r3, r2
 800e432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e436:	461a      	mov	r2, r3
 800e438:	2300      	movs	r3, #0
 800e43a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	015a      	lsls	r2, r3, #5
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	4413      	add	r3, r2
 800e444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e448:	461a      	mov	r2, r3
 800e44a:	2300      	movs	r3, #0
 800e44c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	015a      	lsls	r2, r3, #5
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	4413      	add	r3, r2
 800e456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e45a:	461a      	mov	r2, r3
 800e45c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	3301      	adds	r3, #1
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e46c:	461a      	mov	r2, r3
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	4293      	cmp	r3, r2
 800e472:	d3b5      	bcc.n	800e3e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e474:	2300      	movs	r3, #0
 800e476:	613b      	str	r3, [r7, #16]
 800e478:	e043      	b.n	800e502 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4413      	add	r3, r2
 800e482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e48c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e490:	d118      	bne.n	800e4c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e4aa:	6013      	str	r3, [r2, #0]
 800e4ac:	e013      	b.n	800e4d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	015a      	lsls	r2, r3, #5
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	e008      	b.n	800e4d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	015a      	lsls	r2, r3, #5
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	015a      	lsls	r2, r3, #5
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	4413      	add	r3, r2
 800e4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e4fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	3301      	adds	r3, #1
 800e500:	613b      	str	r3, [r7, #16]
 800e502:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e506:	461a      	mov	r2, r3
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d3b5      	bcc.n	800e47a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e51c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e520:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e52e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e530:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e534:	2b00      	cmp	r3, #0
 800e536:	d105      	bne.n	800e544 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	f043 0210 	orr.w	r2, r3, #16
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	699a      	ldr	r2, [r3, #24]
 800e548:	4b0f      	ldr	r3, [pc, #60]	@ (800e588 <USB_DevInit+0x2b4>)
 800e54a:	4313      	orrs	r3, r2
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e550:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e554:	2b00      	cmp	r3, #0
 800e556:	d005      	beq.n	800e564 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	f043 0208 	orr.w	r2, r3, #8
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e564:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d105      	bne.n	800e578 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	699a      	ldr	r2, [r3, #24]
 800e570:	4b06      	ldr	r3, [pc, #24]	@ (800e58c <USB_DevInit+0x2b8>)
 800e572:	4313      	orrs	r3, r2
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e578:	7dfb      	ldrb	r3, [r7, #23]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e584:	b004      	add	sp, #16
 800e586:	4770      	bx	lr
 800e588:	803c3800 	.word	0x803c3800
 800e58c:	40000004 	.word	0x40000004

0800e590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e59a:	2300      	movs	r3, #0
 800e59c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e5aa:	d901      	bls.n	800e5b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e01b      	b.n	800e5e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	daf2      	bge.n	800e59e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	019b      	lsls	r3, r3, #6
 800e5c0:	f043 0220 	orr.w	r2, r3, #32
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e5d4:	d901      	bls.n	800e5da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	e006      	b.n	800e5e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	f003 0320 	and.w	r3, r3, #32
 800e5e2:	2b20      	cmp	r3, #32
 800e5e4:	d0f0      	beq.n	800e5c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3714      	adds	r7, #20
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e60c:	d901      	bls.n	800e612 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e60e:	2303      	movs	r3, #3
 800e610:	e018      	b.n	800e644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	2b00      	cmp	r3, #0
 800e618:	daf2      	bge.n	800e600 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2210      	movs	r2, #16
 800e622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	3301      	adds	r3, #1
 800e628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e630:	d901      	bls.n	800e636 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e632:	2303      	movs	r3, #3
 800e634:	e006      	b.n	800e644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	f003 0310 	and.w	r3, r3, #16
 800e63e:	2b10      	cmp	r3, #16
 800e640:	d0f0      	beq.n	800e624 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3714      	adds	r7, #20
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	78fb      	ldrb	r3, [r7, #3]
 800e66a:	68f9      	ldr	r1, [r7, #12]
 800e66c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e670:	4313      	orrs	r3, r2
 800e672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr

0800e682 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e682:	b480      	push	{r7}
 800e684:	b085      	sub	sp, #20
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e69c:	f023 0303 	bic.w	r3, r3, #3
 800e6a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e6b0:	f043 0302 	orr.w	r3, r3, #2
 800e6b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3714      	adds	r7, #20
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	f003 0301 	and.w	r3, r3, #1
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e6f8:	d901      	bls.n	800e6fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e6fa:	2303      	movs	r3, #3
 800e6fc:	e01b      	b.n	800e736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	daf2      	bge.n	800e6ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e706:	2300      	movs	r3, #0
 800e708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	f043 0201 	orr.w	r2, r3, #1
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3301      	adds	r3, #1
 800e71a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e722:	d901      	bls.n	800e728 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e724:	2303      	movs	r3, #3
 800e726:	e006      	b.n	800e736 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	2b01      	cmp	r3, #1
 800e732:	d0f0      	beq.n	800e716 <USB_CoreReset+0x36>

  return HAL_OK;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3714      	adds	r7, #20
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <__cvt>:
 800e742:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e744:	ed2d 8b02 	vpush	{d8}
 800e748:	eeb0 8b40 	vmov.f64	d8, d0
 800e74c:	b085      	sub	sp, #20
 800e74e:	4617      	mov	r7, r2
 800e750:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e754:	ee18 2a90 	vmov	r2, s17
 800e758:	f025 0520 	bic.w	r5, r5, #32
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	bfb6      	itet	lt
 800e760:	222d      	movlt	r2, #45	@ 0x2d
 800e762:	2200      	movge	r2, #0
 800e764:	eeb1 8b40 	vneglt.f64	d8, d0
 800e768:	2d46      	cmp	r5, #70	@ 0x46
 800e76a:	460c      	mov	r4, r1
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	d004      	beq.n	800e77a <__cvt+0x38>
 800e770:	2d45      	cmp	r5, #69	@ 0x45
 800e772:	d100      	bne.n	800e776 <__cvt+0x34>
 800e774:	3401      	adds	r4, #1
 800e776:	2102      	movs	r1, #2
 800e778:	e000      	b.n	800e77c <__cvt+0x3a>
 800e77a:	2103      	movs	r1, #3
 800e77c:	ab03      	add	r3, sp, #12
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	ab02      	add	r3, sp, #8
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	4622      	mov	r2, r4
 800e786:	4633      	mov	r3, r6
 800e788:	eeb0 0b48 	vmov.f64	d0, d8
 800e78c:	f000 ff24 	bl	800f5d8 <_dtoa_r>
 800e790:	2d47      	cmp	r5, #71	@ 0x47
 800e792:	d114      	bne.n	800e7be <__cvt+0x7c>
 800e794:	07fb      	lsls	r3, r7, #31
 800e796:	d50a      	bpl.n	800e7ae <__cvt+0x6c>
 800e798:	1902      	adds	r2, r0, r4
 800e79a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a2:	bf08      	it	eq
 800e7a4:	9203      	streq	r2, [sp, #12]
 800e7a6:	2130      	movs	r1, #48	@ 0x30
 800e7a8:	9b03      	ldr	r3, [sp, #12]
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d319      	bcc.n	800e7e2 <__cvt+0xa0>
 800e7ae:	9b03      	ldr	r3, [sp, #12]
 800e7b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7b2:	1a1b      	subs	r3, r3, r0
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	b005      	add	sp, #20
 800e7b8:	ecbd 8b02 	vpop	{d8}
 800e7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7be:	2d46      	cmp	r5, #70	@ 0x46
 800e7c0:	eb00 0204 	add.w	r2, r0, r4
 800e7c4:	d1e9      	bne.n	800e79a <__cvt+0x58>
 800e7c6:	7803      	ldrb	r3, [r0, #0]
 800e7c8:	2b30      	cmp	r3, #48	@ 0x30
 800e7ca:	d107      	bne.n	800e7dc <__cvt+0x9a>
 800e7cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d4:	bf1c      	itt	ne
 800e7d6:	f1c4 0401 	rsbne	r4, r4, #1
 800e7da:	6034      	strne	r4, [r6, #0]
 800e7dc:	6833      	ldr	r3, [r6, #0]
 800e7de:	441a      	add	r2, r3
 800e7e0:	e7db      	b.n	800e79a <__cvt+0x58>
 800e7e2:	1c5c      	adds	r4, r3, #1
 800e7e4:	9403      	str	r4, [sp, #12]
 800e7e6:	7019      	strb	r1, [r3, #0]
 800e7e8:	e7de      	b.n	800e7a8 <__cvt+0x66>

0800e7ea <__exponent>:
 800e7ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	bfba      	itte	lt
 800e7f0:	4249      	neglt	r1, r1
 800e7f2:	232d      	movlt	r3, #45	@ 0x2d
 800e7f4:	232b      	movge	r3, #43	@ 0x2b
 800e7f6:	2909      	cmp	r1, #9
 800e7f8:	7002      	strb	r2, [r0, #0]
 800e7fa:	7043      	strb	r3, [r0, #1]
 800e7fc:	dd29      	ble.n	800e852 <__exponent+0x68>
 800e7fe:	f10d 0307 	add.w	r3, sp, #7
 800e802:	461d      	mov	r5, r3
 800e804:	270a      	movs	r7, #10
 800e806:	461a      	mov	r2, r3
 800e808:	fbb1 f6f7 	udiv	r6, r1, r7
 800e80c:	fb07 1416 	mls	r4, r7, r6, r1
 800e810:	3430      	adds	r4, #48	@ 0x30
 800e812:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e816:	460c      	mov	r4, r1
 800e818:	2c63      	cmp	r4, #99	@ 0x63
 800e81a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e81e:	4631      	mov	r1, r6
 800e820:	dcf1      	bgt.n	800e806 <__exponent+0x1c>
 800e822:	3130      	adds	r1, #48	@ 0x30
 800e824:	1e94      	subs	r4, r2, #2
 800e826:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e82a:	1c41      	adds	r1, r0, #1
 800e82c:	4623      	mov	r3, r4
 800e82e:	42ab      	cmp	r3, r5
 800e830:	d30a      	bcc.n	800e848 <__exponent+0x5e>
 800e832:	f10d 0309 	add.w	r3, sp, #9
 800e836:	1a9b      	subs	r3, r3, r2
 800e838:	42ac      	cmp	r4, r5
 800e83a:	bf88      	it	hi
 800e83c:	2300      	movhi	r3, #0
 800e83e:	3302      	adds	r3, #2
 800e840:	4403      	add	r3, r0
 800e842:	1a18      	subs	r0, r3, r0
 800e844:	b003      	add	sp, #12
 800e846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e848:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e84c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e850:	e7ed      	b.n	800e82e <__exponent+0x44>
 800e852:	2330      	movs	r3, #48	@ 0x30
 800e854:	3130      	adds	r1, #48	@ 0x30
 800e856:	7083      	strb	r3, [r0, #2]
 800e858:	70c1      	strb	r1, [r0, #3]
 800e85a:	1d03      	adds	r3, r0, #4
 800e85c:	e7f1      	b.n	800e842 <__exponent+0x58>
	...

0800e860 <_printf_float>:
 800e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	b08d      	sub	sp, #52	@ 0x34
 800e866:	460c      	mov	r4, r1
 800e868:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e86c:	4616      	mov	r6, r2
 800e86e:	461f      	mov	r7, r3
 800e870:	4605      	mov	r5, r0
 800e872:	f000 fdaf 	bl	800f3d4 <_localeconv_r>
 800e876:	f8d0 b000 	ldr.w	fp, [r0]
 800e87a:	4658      	mov	r0, fp
 800e87c:	f7f1 fd80 	bl	8000380 <strlen>
 800e880:	2300      	movs	r3, #0
 800e882:	930a      	str	r3, [sp, #40]	@ 0x28
 800e884:	f8d8 3000 	ldr.w	r3, [r8]
 800e888:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e88c:	6822      	ldr	r2, [r4, #0]
 800e88e:	9005      	str	r0, [sp, #20]
 800e890:	3307      	adds	r3, #7
 800e892:	f023 0307 	bic.w	r3, r3, #7
 800e896:	f103 0108 	add.w	r1, r3, #8
 800e89a:	f8c8 1000 	str.w	r1, [r8]
 800e89e:	ed93 0b00 	vldr	d0, [r3]
 800e8a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800eb00 <_printf_float+0x2a0>
 800e8a6:	eeb0 7bc0 	vabs.f64	d7, d0
 800e8aa:	eeb4 7b46 	vcmp.f64	d7, d6
 800e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e8b6:	dd24      	ble.n	800e902 <_printf_float+0xa2>
 800e8b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c0:	d502      	bpl.n	800e8c8 <_printf_float+0x68>
 800e8c2:	232d      	movs	r3, #45	@ 0x2d
 800e8c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8c8:	498f      	ldr	r1, [pc, #572]	@ (800eb08 <_printf_float+0x2a8>)
 800e8ca:	4b90      	ldr	r3, [pc, #576]	@ (800eb0c <_printf_float+0x2ac>)
 800e8cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e8d0:	bf94      	ite	ls
 800e8d2:	4688      	movls	r8, r1
 800e8d4:	4698      	movhi	r8, r3
 800e8d6:	f022 0204 	bic.w	r2, r2, #4
 800e8da:	2303      	movs	r3, #3
 800e8dc:	6123      	str	r3, [r4, #16]
 800e8de:	6022      	str	r2, [r4, #0]
 800e8e0:	f04f 0a00 	mov.w	sl, #0
 800e8e4:	9700      	str	r7, [sp, #0]
 800e8e6:	4633      	mov	r3, r6
 800e8e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	f000 f9d1 	bl	800ec94 <_printf_common>
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	f040 8089 	bne.w	800ea0a <_printf_float+0x1aa>
 800e8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fc:	b00d      	add	sp, #52	@ 0x34
 800e8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e902:	eeb4 0b40 	vcmp.f64	d0, d0
 800e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90a:	d709      	bvc.n	800e920 <_printf_float+0xc0>
 800e90c:	ee10 3a90 	vmov	r3, s1
 800e910:	2b00      	cmp	r3, #0
 800e912:	bfbc      	itt	lt
 800e914:	232d      	movlt	r3, #45	@ 0x2d
 800e916:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e91a:	497d      	ldr	r1, [pc, #500]	@ (800eb10 <_printf_float+0x2b0>)
 800e91c:	4b7d      	ldr	r3, [pc, #500]	@ (800eb14 <_printf_float+0x2b4>)
 800e91e:	e7d5      	b.n	800e8cc <_printf_float+0x6c>
 800e920:	6863      	ldr	r3, [r4, #4]
 800e922:	1c59      	adds	r1, r3, #1
 800e924:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e928:	d139      	bne.n	800e99e <_printf_float+0x13e>
 800e92a:	2306      	movs	r3, #6
 800e92c:	6063      	str	r3, [r4, #4]
 800e92e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e932:	2300      	movs	r3, #0
 800e934:	6022      	str	r2, [r4, #0]
 800e936:	9303      	str	r3, [sp, #12]
 800e938:	ab0a      	add	r3, sp, #40	@ 0x28
 800e93a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e93e:	ab09      	add	r3, sp, #36	@ 0x24
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	6861      	ldr	r1, [r4, #4]
 800e944:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e948:	4628      	mov	r0, r5
 800e94a:	f7ff fefa 	bl	800e742 <__cvt>
 800e94e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e954:	4680      	mov	r8, r0
 800e956:	d129      	bne.n	800e9ac <_printf_float+0x14c>
 800e958:	1cc8      	adds	r0, r1, #3
 800e95a:	db02      	blt.n	800e962 <_printf_float+0x102>
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	4299      	cmp	r1, r3
 800e960:	dd41      	ble.n	800e9e6 <_printf_float+0x186>
 800e962:	f1a9 0902 	sub.w	r9, r9, #2
 800e966:	fa5f f989 	uxtb.w	r9, r9
 800e96a:	3901      	subs	r1, #1
 800e96c:	464a      	mov	r2, r9
 800e96e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e972:	9109      	str	r1, [sp, #36]	@ 0x24
 800e974:	f7ff ff39 	bl	800e7ea <__exponent>
 800e978:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e97a:	1813      	adds	r3, r2, r0
 800e97c:	2a01      	cmp	r2, #1
 800e97e:	4682      	mov	sl, r0
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	dc02      	bgt.n	800e98a <_printf_float+0x12a>
 800e984:	6822      	ldr	r2, [r4, #0]
 800e986:	07d2      	lsls	r2, r2, #31
 800e988:	d501      	bpl.n	800e98e <_printf_float+0x12e>
 800e98a:	3301      	adds	r3, #1
 800e98c:	6123      	str	r3, [r4, #16]
 800e98e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e992:	2b00      	cmp	r3, #0
 800e994:	d0a6      	beq.n	800e8e4 <_printf_float+0x84>
 800e996:	232d      	movs	r3, #45	@ 0x2d
 800e998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e99c:	e7a2      	b.n	800e8e4 <_printf_float+0x84>
 800e99e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e9a2:	d1c4      	bne.n	800e92e <_printf_float+0xce>
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1c2      	bne.n	800e92e <_printf_float+0xce>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e7bf      	b.n	800e92c <_printf_float+0xcc>
 800e9ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e9b0:	d9db      	bls.n	800e96a <_printf_float+0x10a>
 800e9b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e9b6:	d118      	bne.n	800e9ea <_printf_float+0x18a>
 800e9b8:	2900      	cmp	r1, #0
 800e9ba:	6863      	ldr	r3, [r4, #4]
 800e9bc:	dd0b      	ble.n	800e9d6 <_printf_float+0x176>
 800e9be:	6121      	str	r1, [r4, #16]
 800e9c0:	b913      	cbnz	r3, 800e9c8 <_printf_float+0x168>
 800e9c2:	6822      	ldr	r2, [r4, #0]
 800e9c4:	07d0      	lsls	r0, r2, #31
 800e9c6:	d502      	bpl.n	800e9ce <_printf_float+0x16e>
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	440b      	add	r3, r1
 800e9cc:	6123      	str	r3, [r4, #16]
 800e9ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e9d0:	f04f 0a00 	mov.w	sl, #0
 800e9d4:	e7db      	b.n	800e98e <_printf_float+0x12e>
 800e9d6:	b913      	cbnz	r3, 800e9de <_printf_float+0x17e>
 800e9d8:	6822      	ldr	r2, [r4, #0]
 800e9da:	07d2      	lsls	r2, r2, #31
 800e9dc:	d501      	bpl.n	800e9e2 <_printf_float+0x182>
 800e9de:	3302      	adds	r3, #2
 800e9e0:	e7f4      	b.n	800e9cc <_printf_float+0x16c>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	e7f2      	b.n	800e9cc <_printf_float+0x16c>
 800e9e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e9ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ec:	4299      	cmp	r1, r3
 800e9ee:	db05      	blt.n	800e9fc <_printf_float+0x19c>
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	6121      	str	r1, [r4, #16]
 800e9f4:	07d8      	lsls	r0, r3, #31
 800e9f6:	d5ea      	bpl.n	800e9ce <_printf_float+0x16e>
 800e9f8:	1c4b      	adds	r3, r1, #1
 800e9fa:	e7e7      	b.n	800e9cc <_printf_float+0x16c>
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	bfd4      	ite	le
 800ea00:	f1c1 0202 	rsble	r2, r1, #2
 800ea04:	2201      	movgt	r2, #1
 800ea06:	4413      	add	r3, r2
 800ea08:	e7e0      	b.n	800e9cc <_printf_float+0x16c>
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	055a      	lsls	r2, r3, #21
 800ea0e:	d407      	bmi.n	800ea20 <_printf_float+0x1c0>
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	4642      	mov	r2, r8
 800ea14:	4631      	mov	r1, r6
 800ea16:	4628      	mov	r0, r5
 800ea18:	47b8      	blx	r7
 800ea1a:	3001      	adds	r0, #1
 800ea1c:	d12a      	bne.n	800ea74 <_printf_float+0x214>
 800ea1e:	e76b      	b.n	800e8f8 <_printf_float+0x98>
 800ea20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ea24:	f240 80e0 	bls.w	800ebe8 <_printf_float+0x388>
 800ea28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ea2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea34:	d133      	bne.n	800ea9e <_printf_float+0x23e>
 800ea36:	4a38      	ldr	r2, [pc, #224]	@ (800eb18 <_printf_float+0x2b8>)
 800ea38:	2301      	movs	r3, #1
 800ea3a:	4631      	mov	r1, r6
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	47b8      	blx	r7
 800ea40:	3001      	adds	r0, #1
 800ea42:	f43f af59 	beq.w	800e8f8 <_printf_float+0x98>
 800ea46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea4a:	4543      	cmp	r3, r8
 800ea4c:	db02      	blt.n	800ea54 <_printf_float+0x1f4>
 800ea4e:	6823      	ldr	r3, [r4, #0]
 800ea50:	07d8      	lsls	r0, r3, #31
 800ea52:	d50f      	bpl.n	800ea74 <_printf_float+0x214>
 800ea54:	9b05      	ldr	r3, [sp, #20]
 800ea56:	465a      	mov	r2, fp
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	47b8      	blx	r7
 800ea5e:	3001      	adds	r0, #1
 800ea60:	f43f af4a 	beq.w	800e8f8 <_printf_float+0x98>
 800ea64:	f04f 0900 	mov.w	r9, #0
 800ea68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea6c:	f104 0a1a 	add.w	sl, r4, #26
 800ea70:	45c8      	cmp	r8, r9
 800ea72:	dc09      	bgt.n	800ea88 <_printf_float+0x228>
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	079b      	lsls	r3, r3, #30
 800ea78:	f100 8107 	bmi.w	800ec8a <_printf_float+0x42a>
 800ea7c:	68e0      	ldr	r0, [r4, #12]
 800ea7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea80:	4298      	cmp	r0, r3
 800ea82:	bfb8      	it	lt
 800ea84:	4618      	movlt	r0, r3
 800ea86:	e739      	b.n	800e8fc <_printf_float+0x9c>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	4652      	mov	r2, sl
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	4628      	mov	r0, r5
 800ea90:	47b8      	blx	r7
 800ea92:	3001      	adds	r0, #1
 800ea94:	f43f af30 	beq.w	800e8f8 <_printf_float+0x98>
 800ea98:	f109 0901 	add.w	r9, r9, #1
 800ea9c:	e7e8      	b.n	800ea70 <_printf_float+0x210>
 800ea9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dc3b      	bgt.n	800eb1c <_printf_float+0x2bc>
 800eaa4:	4a1c      	ldr	r2, [pc, #112]	@ (800eb18 <_printf_float+0x2b8>)
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	4631      	mov	r1, r6
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b8      	blx	r7
 800eaae:	3001      	adds	r0, #1
 800eab0:	f43f af22 	beq.w	800e8f8 <_printf_float+0x98>
 800eab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eab8:	ea59 0303 	orrs.w	r3, r9, r3
 800eabc:	d102      	bne.n	800eac4 <_printf_float+0x264>
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	07d9      	lsls	r1, r3, #31
 800eac2:	d5d7      	bpl.n	800ea74 <_printf_float+0x214>
 800eac4:	9b05      	ldr	r3, [sp, #20]
 800eac6:	465a      	mov	r2, fp
 800eac8:	4631      	mov	r1, r6
 800eaca:	4628      	mov	r0, r5
 800eacc:	47b8      	blx	r7
 800eace:	3001      	adds	r0, #1
 800ead0:	f43f af12 	beq.w	800e8f8 <_printf_float+0x98>
 800ead4:	f04f 0a00 	mov.w	sl, #0
 800ead8:	f104 0b1a 	add.w	fp, r4, #26
 800eadc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eade:	425b      	negs	r3, r3
 800eae0:	4553      	cmp	r3, sl
 800eae2:	dc01      	bgt.n	800eae8 <_printf_float+0x288>
 800eae4:	464b      	mov	r3, r9
 800eae6:	e794      	b.n	800ea12 <_printf_float+0x1b2>
 800eae8:	2301      	movs	r3, #1
 800eaea:	465a      	mov	r2, fp
 800eaec:	4631      	mov	r1, r6
 800eaee:	4628      	mov	r0, r5
 800eaf0:	47b8      	blx	r7
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	f43f af00 	beq.w	800e8f8 <_printf_float+0x98>
 800eaf8:	f10a 0a01 	add.w	sl, sl, #1
 800eafc:	e7ee      	b.n	800eadc <_printf_float+0x27c>
 800eafe:	bf00      	nop
 800eb00:	ffffffff 	.word	0xffffffff
 800eb04:	7fefffff 	.word	0x7fefffff
 800eb08:	08011144 	.word	0x08011144
 800eb0c:	08011148 	.word	0x08011148
 800eb10:	0801114c 	.word	0x0801114c
 800eb14:	08011150 	.word	0x08011150
 800eb18:	08011154 	.word	0x08011154
 800eb1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb22:	4553      	cmp	r3, sl
 800eb24:	bfa8      	it	ge
 800eb26:	4653      	movge	r3, sl
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	4699      	mov	r9, r3
 800eb2c:	dc37      	bgt.n	800eb9e <_printf_float+0x33e>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	9307      	str	r3, [sp, #28]
 800eb32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb36:	f104 021a 	add.w	r2, r4, #26
 800eb3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb3c:	9907      	ldr	r1, [sp, #28]
 800eb3e:	9306      	str	r3, [sp, #24]
 800eb40:	eba3 0309 	sub.w	r3, r3, r9
 800eb44:	428b      	cmp	r3, r1
 800eb46:	dc31      	bgt.n	800ebac <_printf_float+0x34c>
 800eb48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb4a:	459a      	cmp	sl, r3
 800eb4c:	dc3b      	bgt.n	800ebc6 <_printf_float+0x366>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	07da      	lsls	r2, r3, #31
 800eb52:	d438      	bmi.n	800ebc6 <_printf_float+0x366>
 800eb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb56:	ebaa 0903 	sub.w	r9, sl, r3
 800eb5a:	9b06      	ldr	r3, [sp, #24]
 800eb5c:	ebaa 0303 	sub.w	r3, sl, r3
 800eb60:	4599      	cmp	r9, r3
 800eb62:	bfa8      	it	ge
 800eb64:	4699      	movge	r9, r3
 800eb66:	f1b9 0f00 	cmp.w	r9, #0
 800eb6a:	dc34      	bgt.n	800ebd6 <_printf_float+0x376>
 800eb6c:	f04f 0800 	mov.w	r8, #0
 800eb70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb74:	f104 0b1a 	add.w	fp, r4, #26
 800eb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb7a:	ebaa 0303 	sub.w	r3, sl, r3
 800eb7e:	eba3 0309 	sub.w	r3, r3, r9
 800eb82:	4543      	cmp	r3, r8
 800eb84:	f77f af76 	ble.w	800ea74 <_printf_float+0x214>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	465a      	mov	r2, fp
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4628      	mov	r0, r5
 800eb90:	47b8      	blx	r7
 800eb92:	3001      	adds	r0, #1
 800eb94:	f43f aeb0 	beq.w	800e8f8 <_printf_float+0x98>
 800eb98:	f108 0801 	add.w	r8, r8, #1
 800eb9c:	e7ec      	b.n	800eb78 <_printf_float+0x318>
 800eb9e:	4642      	mov	r2, r8
 800eba0:	4631      	mov	r1, r6
 800eba2:	4628      	mov	r0, r5
 800eba4:	47b8      	blx	r7
 800eba6:	3001      	adds	r0, #1
 800eba8:	d1c1      	bne.n	800eb2e <_printf_float+0x2ce>
 800ebaa:	e6a5      	b.n	800e8f8 <_printf_float+0x98>
 800ebac:	2301      	movs	r3, #1
 800ebae:	4631      	mov	r1, r6
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	9206      	str	r2, [sp, #24]
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f ae9e 	beq.w	800e8f8 <_printf_float+0x98>
 800ebbc:	9b07      	ldr	r3, [sp, #28]
 800ebbe:	9a06      	ldr	r2, [sp, #24]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	9307      	str	r3, [sp, #28]
 800ebc4:	e7b9      	b.n	800eb3a <_printf_float+0x2da>
 800ebc6:	9b05      	ldr	r3, [sp, #20]
 800ebc8:	465a      	mov	r2, fp
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4628      	mov	r0, r5
 800ebce:	47b8      	blx	r7
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	d1bf      	bne.n	800eb54 <_printf_float+0x2f4>
 800ebd4:	e690      	b.n	800e8f8 <_printf_float+0x98>
 800ebd6:	9a06      	ldr	r2, [sp, #24]
 800ebd8:	464b      	mov	r3, r9
 800ebda:	4442      	add	r2, r8
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4628      	mov	r0, r5
 800ebe0:	47b8      	blx	r7
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	d1c2      	bne.n	800eb6c <_printf_float+0x30c>
 800ebe6:	e687      	b.n	800e8f8 <_printf_float+0x98>
 800ebe8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ebec:	f1b9 0f01 	cmp.w	r9, #1
 800ebf0:	dc01      	bgt.n	800ebf6 <_printf_float+0x396>
 800ebf2:	07db      	lsls	r3, r3, #31
 800ebf4:	d536      	bpl.n	800ec64 <_printf_float+0x404>
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	4642      	mov	r2, r8
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	47b8      	blx	r7
 800ec00:	3001      	adds	r0, #1
 800ec02:	f43f ae79 	beq.w	800e8f8 <_printf_float+0x98>
 800ec06:	9b05      	ldr	r3, [sp, #20]
 800ec08:	465a      	mov	r2, fp
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	47b8      	blx	r7
 800ec10:	3001      	adds	r0, #1
 800ec12:	f43f ae71 	beq.w	800e8f8 <_printf_float+0x98>
 800ec16:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ec1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec22:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec26:	d018      	beq.n	800ec5a <_printf_float+0x3fa>
 800ec28:	464b      	mov	r3, r9
 800ec2a:	f108 0201 	add.w	r2, r8, #1
 800ec2e:	4631      	mov	r1, r6
 800ec30:	4628      	mov	r0, r5
 800ec32:	47b8      	blx	r7
 800ec34:	3001      	adds	r0, #1
 800ec36:	d10c      	bne.n	800ec52 <_printf_float+0x3f2>
 800ec38:	e65e      	b.n	800e8f8 <_printf_float+0x98>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	465a      	mov	r2, fp
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4628      	mov	r0, r5
 800ec42:	47b8      	blx	r7
 800ec44:	3001      	adds	r0, #1
 800ec46:	f43f ae57 	beq.w	800e8f8 <_printf_float+0x98>
 800ec4a:	f108 0801 	add.w	r8, r8, #1
 800ec4e:	45c8      	cmp	r8, r9
 800ec50:	dbf3      	blt.n	800ec3a <_printf_float+0x3da>
 800ec52:	4653      	mov	r3, sl
 800ec54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec58:	e6dc      	b.n	800ea14 <_printf_float+0x1b4>
 800ec5a:	f04f 0800 	mov.w	r8, #0
 800ec5e:	f104 0b1a 	add.w	fp, r4, #26
 800ec62:	e7f4      	b.n	800ec4e <_printf_float+0x3ee>
 800ec64:	2301      	movs	r3, #1
 800ec66:	4642      	mov	r2, r8
 800ec68:	e7e1      	b.n	800ec2e <_printf_float+0x3ce>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	464a      	mov	r2, r9
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4628      	mov	r0, r5
 800ec72:	47b8      	blx	r7
 800ec74:	3001      	adds	r0, #1
 800ec76:	f43f ae3f 	beq.w	800e8f8 <_printf_float+0x98>
 800ec7a:	f108 0801 	add.w	r8, r8, #1
 800ec7e:	68e3      	ldr	r3, [r4, #12]
 800ec80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec82:	1a5b      	subs	r3, r3, r1
 800ec84:	4543      	cmp	r3, r8
 800ec86:	dcf0      	bgt.n	800ec6a <_printf_float+0x40a>
 800ec88:	e6f8      	b.n	800ea7c <_printf_float+0x21c>
 800ec8a:	f04f 0800 	mov.w	r8, #0
 800ec8e:	f104 0919 	add.w	r9, r4, #25
 800ec92:	e7f4      	b.n	800ec7e <_printf_float+0x41e>

0800ec94 <_printf_common>:
 800ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec98:	4616      	mov	r6, r2
 800ec9a:	4698      	mov	r8, r3
 800ec9c:	688a      	ldr	r2, [r1, #8]
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eca4:	4293      	cmp	r3, r2
 800eca6:	bfb8      	it	lt
 800eca8:	4613      	movlt	r3, r2
 800ecaa:	6033      	str	r3, [r6, #0]
 800ecac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecb0:	4607      	mov	r7, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b10a      	cbz	r2, 800ecba <_printf_common+0x26>
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	6033      	str	r3, [r6, #0]
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	0699      	lsls	r1, r3, #26
 800ecbe:	bf42      	ittt	mi
 800ecc0:	6833      	ldrmi	r3, [r6, #0]
 800ecc2:	3302      	addmi	r3, #2
 800ecc4:	6033      	strmi	r3, [r6, #0]
 800ecc6:	6825      	ldr	r5, [r4, #0]
 800ecc8:	f015 0506 	ands.w	r5, r5, #6
 800eccc:	d106      	bne.n	800ecdc <_printf_common+0x48>
 800ecce:	f104 0a19 	add.w	sl, r4, #25
 800ecd2:	68e3      	ldr	r3, [r4, #12]
 800ecd4:	6832      	ldr	r2, [r6, #0]
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	42ab      	cmp	r3, r5
 800ecda:	dc26      	bgt.n	800ed2a <_printf_common+0x96>
 800ecdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ece0:	6822      	ldr	r2, [r4, #0]
 800ece2:	3b00      	subs	r3, #0
 800ece4:	bf18      	it	ne
 800ece6:	2301      	movne	r3, #1
 800ece8:	0692      	lsls	r2, r2, #26
 800ecea:	d42b      	bmi.n	800ed44 <_printf_common+0xb0>
 800ecec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ecf0:	4641      	mov	r1, r8
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	47c8      	blx	r9
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	d01e      	beq.n	800ed38 <_printf_common+0xa4>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	6922      	ldr	r2, [r4, #16]
 800ecfe:	f003 0306 	and.w	r3, r3, #6
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	bf02      	ittt	eq
 800ed06:	68e5      	ldreq	r5, [r4, #12]
 800ed08:	6833      	ldreq	r3, [r6, #0]
 800ed0a:	1aed      	subeq	r5, r5, r3
 800ed0c:	68a3      	ldr	r3, [r4, #8]
 800ed0e:	bf0c      	ite	eq
 800ed10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed14:	2500      	movne	r5, #0
 800ed16:	4293      	cmp	r3, r2
 800ed18:	bfc4      	itt	gt
 800ed1a:	1a9b      	subgt	r3, r3, r2
 800ed1c:	18ed      	addgt	r5, r5, r3
 800ed1e:	2600      	movs	r6, #0
 800ed20:	341a      	adds	r4, #26
 800ed22:	42b5      	cmp	r5, r6
 800ed24:	d11a      	bne.n	800ed5c <_printf_common+0xc8>
 800ed26:	2000      	movs	r0, #0
 800ed28:	e008      	b.n	800ed3c <_printf_common+0xa8>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	4641      	mov	r1, r8
 800ed30:	4638      	mov	r0, r7
 800ed32:	47c8      	blx	r9
 800ed34:	3001      	adds	r0, #1
 800ed36:	d103      	bne.n	800ed40 <_printf_common+0xac>
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed40:	3501      	adds	r5, #1
 800ed42:	e7c6      	b.n	800ecd2 <_printf_common+0x3e>
 800ed44:	18e1      	adds	r1, r4, r3
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	2030      	movs	r0, #48	@ 0x30
 800ed4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed4e:	4422      	add	r2, r4
 800ed50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed58:	3302      	adds	r3, #2
 800ed5a:	e7c7      	b.n	800ecec <_printf_common+0x58>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4622      	mov	r2, r4
 800ed60:	4641      	mov	r1, r8
 800ed62:	4638      	mov	r0, r7
 800ed64:	47c8      	blx	r9
 800ed66:	3001      	adds	r0, #1
 800ed68:	d0e6      	beq.n	800ed38 <_printf_common+0xa4>
 800ed6a:	3601      	adds	r6, #1
 800ed6c:	e7d9      	b.n	800ed22 <_printf_common+0x8e>
	...

0800ed70 <_printf_i>:
 800ed70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed74:	7e0f      	ldrb	r7, [r1, #24]
 800ed76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed78:	2f78      	cmp	r7, #120	@ 0x78
 800ed7a:	4691      	mov	r9, r2
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	460c      	mov	r4, r1
 800ed80:	469a      	mov	sl, r3
 800ed82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed86:	d807      	bhi.n	800ed98 <_printf_i+0x28>
 800ed88:	2f62      	cmp	r7, #98	@ 0x62
 800ed8a:	d80a      	bhi.n	800eda2 <_printf_i+0x32>
 800ed8c:	2f00      	cmp	r7, #0
 800ed8e:	f000 80d2 	beq.w	800ef36 <_printf_i+0x1c6>
 800ed92:	2f58      	cmp	r7, #88	@ 0x58
 800ed94:	f000 80b9 	beq.w	800ef0a <_printf_i+0x19a>
 800ed98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eda0:	e03a      	b.n	800ee18 <_printf_i+0xa8>
 800eda2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eda6:	2b15      	cmp	r3, #21
 800eda8:	d8f6      	bhi.n	800ed98 <_printf_i+0x28>
 800edaa:	a101      	add	r1, pc, #4	@ (adr r1, 800edb0 <_printf_i+0x40>)
 800edac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edb0:	0800ee09 	.word	0x0800ee09
 800edb4:	0800ee1d 	.word	0x0800ee1d
 800edb8:	0800ed99 	.word	0x0800ed99
 800edbc:	0800ed99 	.word	0x0800ed99
 800edc0:	0800ed99 	.word	0x0800ed99
 800edc4:	0800ed99 	.word	0x0800ed99
 800edc8:	0800ee1d 	.word	0x0800ee1d
 800edcc:	0800ed99 	.word	0x0800ed99
 800edd0:	0800ed99 	.word	0x0800ed99
 800edd4:	0800ed99 	.word	0x0800ed99
 800edd8:	0800ed99 	.word	0x0800ed99
 800eddc:	0800ef1d 	.word	0x0800ef1d
 800ede0:	0800ee47 	.word	0x0800ee47
 800ede4:	0800eed7 	.word	0x0800eed7
 800ede8:	0800ed99 	.word	0x0800ed99
 800edec:	0800ed99 	.word	0x0800ed99
 800edf0:	0800ef3f 	.word	0x0800ef3f
 800edf4:	0800ed99 	.word	0x0800ed99
 800edf8:	0800ee47 	.word	0x0800ee47
 800edfc:	0800ed99 	.word	0x0800ed99
 800ee00:	0800ed99 	.word	0x0800ed99
 800ee04:	0800eedf 	.word	0x0800eedf
 800ee08:	6833      	ldr	r3, [r6, #0]
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	6032      	str	r2, [r6, #0]
 800ee10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e09d      	b.n	800ef58 <_printf_i+0x1e8>
 800ee1c:	6833      	ldr	r3, [r6, #0]
 800ee1e:	6820      	ldr	r0, [r4, #0]
 800ee20:	1d19      	adds	r1, r3, #4
 800ee22:	6031      	str	r1, [r6, #0]
 800ee24:	0606      	lsls	r6, r0, #24
 800ee26:	d501      	bpl.n	800ee2c <_printf_i+0xbc>
 800ee28:	681d      	ldr	r5, [r3, #0]
 800ee2a:	e003      	b.n	800ee34 <_printf_i+0xc4>
 800ee2c:	0645      	lsls	r5, r0, #25
 800ee2e:	d5fb      	bpl.n	800ee28 <_printf_i+0xb8>
 800ee30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee34:	2d00      	cmp	r5, #0
 800ee36:	da03      	bge.n	800ee40 <_printf_i+0xd0>
 800ee38:	232d      	movs	r3, #45	@ 0x2d
 800ee3a:	426d      	negs	r5, r5
 800ee3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee40:	4859      	ldr	r0, [pc, #356]	@ (800efa8 <_printf_i+0x238>)
 800ee42:	230a      	movs	r3, #10
 800ee44:	e011      	b.n	800ee6a <_printf_i+0xfa>
 800ee46:	6821      	ldr	r1, [r4, #0]
 800ee48:	6833      	ldr	r3, [r6, #0]
 800ee4a:	0608      	lsls	r0, r1, #24
 800ee4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee50:	d402      	bmi.n	800ee58 <_printf_i+0xe8>
 800ee52:	0649      	lsls	r1, r1, #25
 800ee54:	bf48      	it	mi
 800ee56:	b2ad      	uxthmi	r5, r5
 800ee58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee5a:	4853      	ldr	r0, [pc, #332]	@ (800efa8 <_printf_i+0x238>)
 800ee5c:	6033      	str	r3, [r6, #0]
 800ee5e:	bf14      	ite	ne
 800ee60:	230a      	movne	r3, #10
 800ee62:	2308      	moveq	r3, #8
 800ee64:	2100      	movs	r1, #0
 800ee66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee6a:	6866      	ldr	r6, [r4, #4]
 800ee6c:	60a6      	str	r6, [r4, #8]
 800ee6e:	2e00      	cmp	r6, #0
 800ee70:	bfa2      	ittt	ge
 800ee72:	6821      	ldrge	r1, [r4, #0]
 800ee74:	f021 0104 	bicge.w	r1, r1, #4
 800ee78:	6021      	strge	r1, [r4, #0]
 800ee7a:	b90d      	cbnz	r5, 800ee80 <_printf_i+0x110>
 800ee7c:	2e00      	cmp	r6, #0
 800ee7e:	d04b      	beq.n	800ef18 <_printf_i+0x1a8>
 800ee80:	4616      	mov	r6, r2
 800ee82:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee86:	fb03 5711 	mls	r7, r3, r1, r5
 800ee8a:	5dc7      	ldrb	r7, [r0, r7]
 800ee8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee90:	462f      	mov	r7, r5
 800ee92:	42bb      	cmp	r3, r7
 800ee94:	460d      	mov	r5, r1
 800ee96:	d9f4      	bls.n	800ee82 <_printf_i+0x112>
 800ee98:	2b08      	cmp	r3, #8
 800ee9a:	d10b      	bne.n	800eeb4 <_printf_i+0x144>
 800ee9c:	6823      	ldr	r3, [r4, #0]
 800ee9e:	07df      	lsls	r7, r3, #31
 800eea0:	d508      	bpl.n	800eeb4 <_printf_i+0x144>
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	6861      	ldr	r1, [r4, #4]
 800eea6:	4299      	cmp	r1, r3
 800eea8:	bfde      	ittt	le
 800eeaa:	2330      	movle	r3, #48	@ 0x30
 800eeac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eeb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eeb4:	1b92      	subs	r2, r2, r6
 800eeb6:	6122      	str	r2, [r4, #16]
 800eeb8:	f8cd a000 	str.w	sl, [sp]
 800eebc:	464b      	mov	r3, r9
 800eebe:	aa03      	add	r2, sp, #12
 800eec0:	4621      	mov	r1, r4
 800eec2:	4640      	mov	r0, r8
 800eec4:	f7ff fee6 	bl	800ec94 <_printf_common>
 800eec8:	3001      	adds	r0, #1
 800eeca:	d14a      	bne.n	800ef62 <_printf_i+0x1f2>
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	b004      	add	sp, #16
 800eed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	f043 0320 	orr.w	r3, r3, #32
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	4833      	ldr	r0, [pc, #204]	@ (800efac <_printf_i+0x23c>)
 800eee0:	2778      	movs	r7, #120	@ 0x78
 800eee2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	6831      	ldr	r1, [r6, #0]
 800eeea:	061f      	lsls	r7, r3, #24
 800eeec:	f851 5b04 	ldr.w	r5, [r1], #4
 800eef0:	d402      	bmi.n	800eef8 <_printf_i+0x188>
 800eef2:	065f      	lsls	r7, r3, #25
 800eef4:	bf48      	it	mi
 800eef6:	b2ad      	uxthmi	r5, r5
 800eef8:	6031      	str	r1, [r6, #0]
 800eefa:	07d9      	lsls	r1, r3, #31
 800eefc:	bf44      	itt	mi
 800eefe:	f043 0320 	orrmi.w	r3, r3, #32
 800ef02:	6023      	strmi	r3, [r4, #0]
 800ef04:	b11d      	cbz	r5, 800ef0e <_printf_i+0x19e>
 800ef06:	2310      	movs	r3, #16
 800ef08:	e7ac      	b.n	800ee64 <_printf_i+0xf4>
 800ef0a:	4827      	ldr	r0, [pc, #156]	@ (800efa8 <_printf_i+0x238>)
 800ef0c:	e7e9      	b.n	800eee2 <_printf_i+0x172>
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	f023 0320 	bic.w	r3, r3, #32
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	e7f6      	b.n	800ef06 <_printf_i+0x196>
 800ef18:	4616      	mov	r6, r2
 800ef1a:	e7bd      	b.n	800ee98 <_printf_i+0x128>
 800ef1c:	6833      	ldr	r3, [r6, #0]
 800ef1e:	6825      	ldr	r5, [r4, #0]
 800ef20:	6961      	ldr	r1, [r4, #20]
 800ef22:	1d18      	adds	r0, r3, #4
 800ef24:	6030      	str	r0, [r6, #0]
 800ef26:	062e      	lsls	r6, r5, #24
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	d501      	bpl.n	800ef30 <_printf_i+0x1c0>
 800ef2c:	6019      	str	r1, [r3, #0]
 800ef2e:	e002      	b.n	800ef36 <_printf_i+0x1c6>
 800ef30:	0668      	lsls	r0, r5, #25
 800ef32:	d5fb      	bpl.n	800ef2c <_printf_i+0x1bc>
 800ef34:	8019      	strh	r1, [r3, #0]
 800ef36:	2300      	movs	r3, #0
 800ef38:	6123      	str	r3, [r4, #16]
 800ef3a:	4616      	mov	r6, r2
 800ef3c:	e7bc      	b.n	800eeb8 <_printf_i+0x148>
 800ef3e:	6833      	ldr	r3, [r6, #0]
 800ef40:	1d1a      	adds	r2, r3, #4
 800ef42:	6032      	str	r2, [r6, #0]
 800ef44:	681e      	ldr	r6, [r3, #0]
 800ef46:	6862      	ldr	r2, [r4, #4]
 800ef48:	2100      	movs	r1, #0
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	f7f1 f9c8 	bl	80002e0 <memchr>
 800ef50:	b108      	cbz	r0, 800ef56 <_printf_i+0x1e6>
 800ef52:	1b80      	subs	r0, r0, r6
 800ef54:	6060      	str	r0, [r4, #4]
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	6123      	str	r3, [r4, #16]
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef60:	e7aa      	b.n	800eeb8 <_printf_i+0x148>
 800ef62:	6923      	ldr	r3, [r4, #16]
 800ef64:	4632      	mov	r2, r6
 800ef66:	4649      	mov	r1, r9
 800ef68:	4640      	mov	r0, r8
 800ef6a:	47d0      	blx	sl
 800ef6c:	3001      	adds	r0, #1
 800ef6e:	d0ad      	beq.n	800eecc <_printf_i+0x15c>
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	079b      	lsls	r3, r3, #30
 800ef74:	d413      	bmi.n	800ef9e <_printf_i+0x22e>
 800ef76:	68e0      	ldr	r0, [r4, #12]
 800ef78:	9b03      	ldr	r3, [sp, #12]
 800ef7a:	4298      	cmp	r0, r3
 800ef7c:	bfb8      	it	lt
 800ef7e:	4618      	movlt	r0, r3
 800ef80:	e7a6      	b.n	800eed0 <_printf_i+0x160>
 800ef82:	2301      	movs	r3, #1
 800ef84:	4632      	mov	r2, r6
 800ef86:	4649      	mov	r1, r9
 800ef88:	4640      	mov	r0, r8
 800ef8a:	47d0      	blx	sl
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d09d      	beq.n	800eecc <_printf_i+0x15c>
 800ef90:	3501      	adds	r5, #1
 800ef92:	68e3      	ldr	r3, [r4, #12]
 800ef94:	9903      	ldr	r1, [sp, #12]
 800ef96:	1a5b      	subs	r3, r3, r1
 800ef98:	42ab      	cmp	r3, r5
 800ef9a:	dcf2      	bgt.n	800ef82 <_printf_i+0x212>
 800ef9c:	e7eb      	b.n	800ef76 <_printf_i+0x206>
 800ef9e:	2500      	movs	r5, #0
 800efa0:	f104 0619 	add.w	r6, r4, #25
 800efa4:	e7f5      	b.n	800ef92 <_printf_i+0x222>
 800efa6:	bf00      	nop
 800efa8:	08011156 	.word	0x08011156
 800efac:	08011167 	.word	0x08011167

0800efb0 <std>:
 800efb0:	2300      	movs	r3, #0
 800efb2:	b510      	push	{r4, lr}
 800efb4:	4604      	mov	r4, r0
 800efb6:	e9c0 3300 	strd	r3, r3, [r0]
 800efba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efbe:	6083      	str	r3, [r0, #8]
 800efc0:	8181      	strh	r1, [r0, #12]
 800efc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800efc4:	81c2      	strh	r2, [r0, #14]
 800efc6:	6183      	str	r3, [r0, #24]
 800efc8:	4619      	mov	r1, r3
 800efca:	2208      	movs	r2, #8
 800efcc:	305c      	adds	r0, #92	@ 0x5c
 800efce:	f000 f9f9 	bl	800f3c4 <memset>
 800efd2:	4b0d      	ldr	r3, [pc, #52]	@ (800f008 <std+0x58>)
 800efd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800efd6:	4b0d      	ldr	r3, [pc, #52]	@ (800f00c <std+0x5c>)
 800efd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800efda:	4b0d      	ldr	r3, [pc, #52]	@ (800f010 <std+0x60>)
 800efdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800efde:	4b0d      	ldr	r3, [pc, #52]	@ (800f014 <std+0x64>)
 800efe0:	6323      	str	r3, [r4, #48]	@ 0x30
 800efe2:	4b0d      	ldr	r3, [pc, #52]	@ (800f018 <std+0x68>)
 800efe4:	6224      	str	r4, [r4, #32]
 800efe6:	429c      	cmp	r4, r3
 800efe8:	d006      	beq.n	800eff8 <std+0x48>
 800efea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800efee:	4294      	cmp	r4, r2
 800eff0:	d002      	beq.n	800eff8 <std+0x48>
 800eff2:	33d0      	adds	r3, #208	@ 0xd0
 800eff4:	429c      	cmp	r4, r3
 800eff6:	d105      	bne.n	800f004 <std+0x54>
 800eff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800effc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f000:	f000 ba5c 	b.w	800f4bc <__retarget_lock_init_recursive>
 800f004:	bd10      	pop	{r4, pc}
 800f006:	bf00      	nop
 800f008:	0800f215 	.word	0x0800f215
 800f00c:	0800f237 	.word	0x0800f237
 800f010:	0800f26f 	.word	0x0800f26f
 800f014:	0800f293 	.word	0x0800f293
 800f018:	24000bb0 	.word	0x24000bb0

0800f01c <stdio_exit_handler>:
 800f01c:	4a02      	ldr	r2, [pc, #8]	@ (800f028 <stdio_exit_handler+0xc>)
 800f01e:	4903      	ldr	r1, [pc, #12]	@ (800f02c <stdio_exit_handler+0x10>)
 800f020:	4803      	ldr	r0, [pc, #12]	@ (800f030 <stdio_exit_handler+0x14>)
 800f022:	f000 b869 	b.w	800f0f8 <_fwalk_sglue>
 800f026:	bf00      	nop
 800f028:	2400003c 	.word	0x2400003c
 800f02c:	08010d15 	.word	0x08010d15
 800f030:	2400004c 	.word	0x2400004c

0800f034 <cleanup_stdio>:
 800f034:	6841      	ldr	r1, [r0, #4]
 800f036:	4b0c      	ldr	r3, [pc, #48]	@ (800f068 <cleanup_stdio+0x34>)
 800f038:	4299      	cmp	r1, r3
 800f03a:	b510      	push	{r4, lr}
 800f03c:	4604      	mov	r4, r0
 800f03e:	d001      	beq.n	800f044 <cleanup_stdio+0x10>
 800f040:	f001 fe68 	bl	8010d14 <_fflush_r>
 800f044:	68a1      	ldr	r1, [r4, #8]
 800f046:	4b09      	ldr	r3, [pc, #36]	@ (800f06c <cleanup_stdio+0x38>)
 800f048:	4299      	cmp	r1, r3
 800f04a:	d002      	beq.n	800f052 <cleanup_stdio+0x1e>
 800f04c:	4620      	mov	r0, r4
 800f04e:	f001 fe61 	bl	8010d14 <_fflush_r>
 800f052:	68e1      	ldr	r1, [r4, #12]
 800f054:	4b06      	ldr	r3, [pc, #24]	@ (800f070 <cleanup_stdio+0x3c>)
 800f056:	4299      	cmp	r1, r3
 800f058:	d004      	beq.n	800f064 <cleanup_stdio+0x30>
 800f05a:	4620      	mov	r0, r4
 800f05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f060:	f001 be58 	b.w	8010d14 <_fflush_r>
 800f064:	bd10      	pop	{r4, pc}
 800f066:	bf00      	nop
 800f068:	24000bb0 	.word	0x24000bb0
 800f06c:	24000c18 	.word	0x24000c18
 800f070:	24000c80 	.word	0x24000c80

0800f074 <global_stdio_init.part.0>:
 800f074:	b510      	push	{r4, lr}
 800f076:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a4 <global_stdio_init.part.0+0x30>)
 800f078:	4c0b      	ldr	r4, [pc, #44]	@ (800f0a8 <global_stdio_init.part.0+0x34>)
 800f07a:	4a0c      	ldr	r2, [pc, #48]	@ (800f0ac <global_stdio_init.part.0+0x38>)
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	4620      	mov	r0, r4
 800f080:	2200      	movs	r2, #0
 800f082:	2104      	movs	r1, #4
 800f084:	f7ff ff94 	bl	800efb0 <std>
 800f088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f08c:	2201      	movs	r2, #1
 800f08e:	2109      	movs	r1, #9
 800f090:	f7ff ff8e 	bl	800efb0 <std>
 800f094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f098:	2202      	movs	r2, #2
 800f09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f09e:	2112      	movs	r1, #18
 800f0a0:	f7ff bf86 	b.w	800efb0 <std>
 800f0a4:	24000ce8 	.word	0x24000ce8
 800f0a8:	24000bb0 	.word	0x24000bb0
 800f0ac:	0800f01d 	.word	0x0800f01d

0800f0b0 <__sfp_lock_acquire>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	@ (800f0b8 <__sfp_lock_acquire+0x8>)
 800f0b2:	f000 ba04 	b.w	800f4be <__retarget_lock_acquire_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	24000cf1 	.word	0x24000cf1

0800f0bc <__sfp_lock_release>:
 800f0bc:	4801      	ldr	r0, [pc, #4]	@ (800f0c4 <__sfp_lock_release+0x8>)
 800f0be:	f000 b9ff 	b.w	800f4c0 <__retarget_lock_release_recursive>
 800f0c2:	bf00      	nop
 800f0c4:	24000cf1 	.word	0x24000cf1

0800f0c8 <__sinit>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	f7ff fff0 	bl	800f0b0 <__sfp_lock_acquire>
 800f0d0:	6a23      	ldr	r3, [r4, #32]
 800f0d2:	b11b      	cbz	r3, 800f0dc <__sinit+0x14>
 800f0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0d8:	f7ff bff0 	b.w	800f0bc <__sfp_lock_release>
 800f0dc:	4b04      	ldr	r3, [pc, #16]	@ (800f0f0 <__sinit+0x28>)
 800f0de:	6223      	str	r3, [r4, #32]
 800f0e0:	4b04      	ldr	r3, [pc, #16]	@ (800f0f4 <__sinit+0x2c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1f5      	bne.n	800f0d4 <__sinit+0xc>
 800f0e8:	f7ff ffc4 	bl	800f074 <global_stdio_init.part.0>
 800f0ec:	e7f2      	b.n	800f0d4 <__sinit+0xc>
 800f0ee:	bf00      	nop
 800f0f0:	0800f035 	.word	0x0800f035
 800f0f4:	24000ce8 	.word	0x24000ce8

0800f0f8 <_fwalk_sglue>:
 800f0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0fc:	4607      	mov	r7, r0
 800f0fe:	4688      	mov	r8, r1
 800f100:	4614      	mov	r4, r2
 800f102:	2600      	movs	r6, #0
 800f104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f108:	f1b9 0901 	subs.w	r9, r9, #1
 800f10c:	d505      	bpl.n	800f11a <_fwalk_sglue+0x22>
 800f10e:	6824      	ldr	r4, [r4, #0]
 800f110:	2c00      	cmp	r4, #0
 800f112:	d1f7      	bne.n	800f104 <_fwalk_sglue+0xc>
 800f114:	4630      	mov	r0, r6
 800f116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f11a:	89ab      	ldrh	r3, [r5, #12]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d907      	bls.n	800f130 <_fwalk_sglue+0x38>
 800f120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f124:	3301      	adds	r3, #1
 800f126:	d003      	beq.n	800f130 <_fwalk_sglue+0x38>
 800f128:	4629      	mov	r1, r5
 800f12a:	4638      	mov	r0, r7
 800f12c:	47c0      	blx	r8
 800f12e:	4306      	orrs	r6, r0
 800f130:	3568      	adds	r5, #104	@ 0x68
 800f132:	e7e9      	b.n	800f108 <_fwalk_sglue+0x10>

0800f134 <iprintf>:
 800f134:	b40f      	push	{r0, r1, r2, r3}
 800f136:	b507      	push	{r0, r1, r2, lr}
 800f138:	4906      	ldr	r1, [pc, #24]	@ (800f154 <iprintf+0x20>)
 800f13a:	ab04      	add	r3, sp, #16
 800f13c:	6808      	ldr	r0, [r1, #0]
 800f13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f142:	6881      	ldr	r1, [r0, #8]
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	f001 fc49 	bl	80109dc <_vfiprintf_r>
 800f14a:	b003      	add	sp, #12
 800f14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f150:	b004      	add	sp, #16
 800f152:	4770      	bx	lr
 800f154:	24000048 	.word	0x24000048

0800f158 <_puts_r>:
 800f158:	6a03      	ldr	r3, [r0, #32]
 800f15a:	b570      	push	{r4, r5, r6, lr}
 800f15c:	6884      	ldr	r4, [r0, #8]
 800f15e:	4605      	mov	r5, r0
 800f160:	460e      	mov	r6, r1
 800f162:	b90b      	cbnz	r3, 800f168 <_puts_r+0x10>
 800f164:	f7ff ffb0 	bl	800f0c8 <__sinit>
 800f168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f16a:	07db      	lsls	r3, r3, #31
 800f16c:	d405      	bmi.n	800f17a <_puts_r+0x22>
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	0598      	lsls	r0, r3, #22
 800f172:	d402      	bmi.n	800f17a <_puts_r+0x22>
 800f174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f176:	f000 f9a2 	bl	800f4be <__retarget_lock_acquire_recursive>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	0719      	lsls	r1, r3, #28
 800f17e:	d502      	bpl.n	800f186 <_puts_r+0x2e>
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d135      	bne.n	800f1f2 <_puts_r+0x9a>
 800f186:	4621      	mov	r1, r4
 800f188:	4628      	mov	r0, r5
 800f18a:	f000 f8c5 	bl	800f318 <__swsetup_r>
 800f18e:	b380      	cbz	r0, 800f1f2 <_puts_r+0x9a>
 800f190:	f04f 35ff 	mov.w	r5, #4294967295
 800f194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f196:	07da      	lsls	r2, r3, #31
 800f198:	d405      	bmi.n	800f1a6 <_puts_r+0x4e>
 800f19a:	89a3      	ldrh	r3, [r4, #12]
 800f19c:	059b      	lsls	r3, r3, #22
 800f19e:	d402      	bmi.n	800f1a6 <_puts_r+0x4e>
 800f1a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1a2:	f000 f98d 	bl	800f4c0 <__retarget_lock_release_recursive>
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	bd70      	pop	{r4, r5, r6, pc}
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	da04      	bge.n	800f1b8 <_puts_r+0x60>
 800f1ae:	69a2      	ldr	r2, [r4, #24]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	dc17      	bgt.n	800f1e4 <_puts_r+0x8c>
 800f1b4:	290a      	cmp	r1, #10
 800f1b6:	d015      	beq.n	800f1e4 <_puts_r+0x8c>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	6022      	str	r2, [r4, #0]
 800f1be:	7019      	strb	r1, [r3, #0]
 800f1c0:	68a3      	ldr	r3, [r4, #8]
 800f1c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	60a3      	str	r3, [r4, #8]
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d1ed      	bne.n	800f1aa <_puts_r+0x52>
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	da11      	bge.n	800f1f6 <_puts_r+0x9e>
 800f1d2:	4622      	mov	r2, r4
 800f1d4:	210a      	movs	r1, #10
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f000 f85f 	bl	800f29a <__swbuf_r>
 800f1dc:	3001      	adds	r0, #1
 800f1de:	d0d7      	beq.n	800f190 <_puts_r+0x38>
 800f1e0:	250a      	movs	r5, #10
 800f1e2:	e7d7      	b.n	800f194 <_puts_r+0x3c>
 800f1e4:	4622      	mov	r2, r4
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	f000 f857 	bl	800f29a <__swbuf_r>
 800f1ec:	3001      	adds	r0, #1
 800f1ee:	d1e7      	bne.n	800f1c0 <_puts_r+0x68>
 800f1f0:	e7ce      	b.n	800f190 <_puts_r+0x38>
 800f1f2:	3e01      	subs	r6, #1
 800f1f4:	e7e4      	b.n	800f1c0 <_puts_r+0x68>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	1c5a      	adds	r2, r3, #1
 800f1fa:	6022      	str	r2, [r4, #0]
 800f1fc:	220a      	movs	r2, #10
 800f1fe:	701a      	strb	r2, [r3, #0]
 800f200:	e7ee      	b.n	800f1e0 <_puts_r+0x88>
	...

0800f204 <puts>:
 800f204:	4b02      	ldr	r3, [pc, #8]	@ (800f210 <puts+0xc>)
 800f206:	4601      	mov	r1, r0
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	f7ff bfa5 	b.w	800f158 <_puts_r>
 800f20e:	bf00      	nop
 800f210:	24000048 	.word	0x24000048

0800f214 <__sread>:
 800f214:	b510      	push	{r4, lr}
 800f216:	460c      	mov	r4, r1
 800f218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f21c:	f000 f900 	bl	800f420 <_read_r>
 800f220:	2800      	cmp	r0, #0
 800f222:	bfab      	itete	ge
 800f224:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f226:	89a3      	ldrhlt	r3, [r4, #12]
 800f228:	181b      	addge	r3, r3, r0
 800f22a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f22e:	bfac      	ite	ge
 800f230:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f232:	81a3      	strhlt	r3, [r4, #12]
 800f234:	bd10      	pop	{r4, pc}

0800f236 <__swrite>:
 800f236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23a:	461f      	mov	r7, r3
 800f23c:	898b      	ldrh	r3, [r1, #12]
 800f23e:	05db      	lsls	r3, r3, #23
 800f240:	4605      	mov	r5, r0
 800f242:	460c      	mov	r4, r1
 800f244:	4616      	mov	r6, r2
 800f246:	d505      	bpl.n	800f254 <__swrite+0x1e>
 800f248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f24c:	2302      	movs	r3, #2
 800f24e:	2200      	movs	r2, #0
 800f250:	f000 f8d4 	bl	800f3fc <_lseek_r>
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f25a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f25e:	81a3      	strh	r3, [r4, #12]
 800f260:	4632      	mov	r2, r6
 800f262:	463b      	mov	r3, r7
 800f264:	4628      	mov	r0, r5
 800f266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f26a:	f000 b8eb 	b.w	800f444 <_write_r>

0800f26e <__sseek>:
 800f26e:	b510      	push	{r4, lr}
 800f270:	460c      	mov	r4, r1
 800f272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f276:	f000 f8c1 	bl	800f3fc <_lseek_r>
 800f27a:	1c43      	adds	r3, r0, #1
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	bf15      	itete	ne
 800f280:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f282:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f286:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f28a:	81a3      	strheq	r3, [r4, #12]
 800f28c:	bf18      	it	ne
 800f28e:	81a3      	strhne	r3, [r4, #12]
 800f290:	bd10      	pop	{r4, pc}

0800f292 <__sclose>:
 800f292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f296:	f000 b8a1 	b.w	800f3dc <_close_r>

0800f29a <__swbuf_r>:
 800f29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29c:	460e      	mov	r6, r1
 800f29e:	4614      	mov	r4, r2
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	b118      	cbz	r0, 800f2ac <__swbuf_r+0x12>
 800f2a4:	6a03      	ldr	r3, [r0, #32]
 800f2a6:	b90b      	cbnz	r3, 800f2ac <__swbuf_r+0x12>
 800f2a8:	f7ff ff0e 	bl	800f0c8 <__sinit>
 800f2ac:	69a3      	ldr	r3, [r4, #24]
 800f2ae:	60a3      	str	r3, [r4, #8]
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	071a      	lsls	r2, r3, #28
 800f2b4:	d501      	bpl.n	800f2ba <__swbuf_r+0x20>
 800f2b6:	6923      	ldr	r3, [r4, #16]
 800f2b8:	b943      	cbnz	r3, 800f2cc <__swbuf_r+0x32>
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	4628      	mov	r0, r5
 800f2be:	f000 f82b 	bl	800f318 <__swsetup_r>
 800f2c2:	b118      	cbz	r0, 800f2cc <__swbuf_r+0x32>
 800f2c4:	f04f 37ff 	mov.w	r7, #4294967295
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2cc:	6823      	ldr	r3, [r4, #0]
 800f2ce:	6922      	ldr	r2, [r4, #16]
 800f2d0:	1a98      	subs	r0, r3, r2
 800f2d2:	6963      	ldr	r3, [r4, #20]
 800f2d4:	b2f6      	uxtb	r6, r6
 800f2d6:	4283      	cmp	r3, r0
 800f2d8:	4637      	mov	r7, r6
 800f2da:	dc05      	bgt.n	800f2e8 <__swbuf_r+0x4e>
 800f2dc:	4621      	mov	r1, r4
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f001 fd18 	bl	8010d14 <_fflush_r>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d1ed      	bne.n	800f2c4 <__swbuf_r+0x2a>
 800f2e8:	68a3      	ldr	r3, [r4, #8]
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	60a3      	str	r3, [r4, #8]
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	1c5a      	adds	r2, r3, #1
 800f2f2:	6022      	str	r2, [r4, #0]
 800f2f4:	701e      	strb	r6, [r3, #0]
 800f2f6:	6962      	ldr	r2, [r4, #20]
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d004      	beq.n	800f308 <__swbuf_r+0x6e>
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	07db      	lsls	r3, r3, #31
 800f302:	d5e1      	bpl.n	800f2c8 <__swbuf_r+0x2e>
 800f304:	2e0a      	cmp	r6, #10
 800f306:	d1df      	bne.n	800f2c8 <__swbuf_r+0x2e>
 800f308:	4621      	mov	r1, r4
 800f30a:	4628      	mov	r0, r5
 800f30c:	f001 fd02 	bl	8010d14 <_fflush_r>
 800f310:	2800      	cmp	r0, #0
 800f312:	d0d9      	beq.n	800f2c8 <__swbuf_r+0x2e>
 800f314:	e7d6      	b.n	800f2c4 <__swbuf_r+0x2a>
	...

0800f318 <__swsetup_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4b29      	ldr	r3, [pc, #164]	@ (800f3c0 <__swsetup_r+0xa8>)
 800f31c:	4605      	mov	r5, r0
 800f31e:	6818      	ldr	r0, [r3, #0]
 800f320:	460c      	mov	r4, r1
 800f322:	b118      	cbz	r0, 800f32c <__swsetup_r+0x14>
 800f324:	6a03      	ldr	r3, [r0, #32]
 800f326:	b90b      	cbnz	r3, 800f32c <__swsetup_r+0x14>
 800f328:	f7ff fece 	bl	800f0c8 <__sinit>
 800f32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f330:	0719      	lsls	r1, r3, #28
 800f332:	d422      	bmi.n	800f37a <__swsetup_r+0x62>
 800f334:	06da      	lsls	r2, r3, #27
 800f336:	d407      	bmi.n	800f348 <__swsetup_r+0x30>
 800f338:	2209      	movs	r2, #9
 800f33a:	602a      	str	r2, [r5, #0]
 800f33c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	f04f 30ff 	mov.w	r0, #4294967295
 800f346:	e033      	b.n	800f3b0 <__swsetup_r+0x98>
 800f348:	0758      	lsls	r0, r3, #29
 800f34a:	d512      	bpl.n	800f372 <__swsetup_r+0x5a>
 800f34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f34e:	b141      	cbz	r1, 800f362 <__swsetup_r+0x4a>
 800f350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f354:	4299      	cmp	r1, r3
 800f356:	d002      	beq.n	800f35e <__swsetup_r+0x46>
 800f358:	4628      	mov	r0, r5
 800f35a:	f000 fe93 	bl	8010084 <_free_r>
 800f35e:	2300      	movs	r3, #0
 800f360:	6363      	str	r3, [r4, #52]	@ 0x34
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f368:	81a3      	strh	r3, [r4, #12]
 800f36a:	2300      	movs	r3, #0
 800f36c:	6063      	str	r3, [r4, #4]
 800f36e:	6923      	ldr	r3, [r4, #16]
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	89a3      	ldrh	r3, [r4, #12]
 800f374:	f043 0308 	orr.w	r3, r3, #8
 800f378:	81a3      	strh	r3, [r4, #12]
 800f37a:	6923      	ldr	r3, [r4, #16]
 800f37c:	b94b      	cbnz	r3, 800f392 <__swsetup_r+0x7a>
 800f37e:	89a3      	ldrh	r3, [r4, #12]
 800f380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f388:	d003      	beq.n	800f392 <__swsetup_r+0x7a>
 800f38a:	4621      	mov	r1, r4
 800f38c:	4628      	mov	r0, r5
 800f38e:	f001 fd0f 	bl	8010db0 <__smakebuf_r>
 800f392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f396:	f013 0201 	ands.w	r2, r3, #1
 800f39a:	d00a      	beq.n	800f3b2 <__swsetup_r+0x9a>
 800f39c:	2200      	movs	r2, #0
 800f39e:	60a2      	str	r2, [r4, #8]
 800f3a0:	6962      	ldr	r2, [r4, #20]
 800f3a2:	4252      	negs	r2, r2
 800f3a4:	61a2      	str	r2, [r4, #24]
 800f3a6:	6922      	ldr	r2, [r4, #16]
 800f3a8:	b942      	cbnz	r2, 800f3bc <__swsetup_r+0xa4>
 800f3aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f3ae:	d1c5      	bne.n	800f33c <__swsetup_r+0x24>
 800f3b0:	bd38      	pop	{r3, r4, r5, pc}
 800f3b2:	0799      	lsls	r1, r3, #30
 800f3b4:	bf58      	it	pl
 800f3b6:	6962      	ldrpl	r2, [r4, #20]
 800f3b8:	60a2      	str	r2, [r4, #8]
 800f3ba:	e7f4      	b.n	800f3a6 <__swsetup_r+0x8e>
 800f3bc:	2000      	movs	r0, #0
 800f3be:	e7f7      	b.n	800f3b0 <__swsetup_r+0x98>
 800f3c0:	24000048 	.word	0x24000048

0800f3c4 <memset>:
 800f3c4:	4402      	add	r2, r0
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d100      	bne.n	800f3ce <memset+0xa>
 800f3cc:	4770      	bx	lr
 800f3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800f3d2:	e7f9      	b.n	800f3c8 <memset+0x4>

0800f3d4 <_localeconv_r>:
 800f3d4:	4800      	ldr	r0, [pc, #0]	@ (800f3d8 <_localeconv_r+0x4>)
 800f3d6:	4770      	bx	lr
 800f3d8:	24000188 	.word	0x24000188

0800f3dc <_close_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	4d06      	ldr	r5, [pc, #24]	@ (800f3f8 <_close_r+0x1c>)
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4608      	mov	r0, r1
 800f3e6:	602b      	str	r3, [r5, #0]
 800f3e8:	f7f2 fc38 	bl	8001c5c <_close>
 800f3ec:	1c43      	adds	r3, r0, #1
 800f3ee:	d102      	bne.n	800f3f6 <_close_r+0x1a>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	b103      	cbz	r3, 800f3f6 <_close_r+0x1a>
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	bd38      	pop	{r3, r4, r5, pc}
 800f3f8:	24000cec 	.word	0x24000cec

0800f3fc <_lseek_r>:
 800f3fc:	b538      	push	{r3, r4, r5, lr}
 800f3fe:	4d07      	ldr	r5, [pc, #28]	@ (800f41c <_lseek_r+0x20>)
 800f400:	4604      	mov	r4, r0
 800f402:	4608      	mov	r0, r1
 800f404:	4611      	mov	r1, r2
 800f406:	2200      	movs	r2, #0
 800f408:	602a      	str	r2, [r5, #0]
 800f40a:	461a      	mov	r2, r3
 800f40c:	f7f2 fc4d 	bl	8001caa <_lseek>
 800f410:	1c43      	adds	r3, r0, #1
 800f412:	d102      	bne.n	800f41a <_lseek_r+0x1e>
 800f414:	682b      	ldr	r3, [r5, #0]
 800f416:	b103      	cbz	r3, 800f41a <_lseek_r+0x1e>
 800f418:	6023      	str	r3, [r4, #0]
 800f41a:	bd38      	pop	{r3, r4, r5, pc}
 800f41c:	24000cec 	.word	0x24000cec

0800f420 <_read_r>:
 800f420:	b538      	push	{r3, r4, r5, lr}
 800f422:	4d07      	ldr	r5, [pc, #28]	@ (800f440 <_read_r+0x20>)
 800f424:	4604      	mov	r4, r0
 800f426:	4608      	mov	r0, r1
 800f428:	4611      	mov	r1, r2
 800f42a:	2200      	movs	r2, #0
 800f42c:	602a      	str	r2, [r5, #0]
 800f42e:	461a      	mov	r2, r3
 800f430:	f7f2 fbf7 	bl	8001c22 <_read>
 800f434:	1c43      	adds	r3, r0, #1
 800f436:	d102      	bne.n	800f43e <_read_r+0x1e>
 800f438:	682b      	ldr	r3, [r5, #0]
 800f43a:	b103      	cbz	r3, 800f43e <_read_r+0x1e>
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	bd38      	pop	{r3, r4, r5, pc}
 800f440:	24000cec 	.word	0x24000cec

0800f444 <_write_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	4d07      	ldr	r5, [pc, #28]	@ (800f464 <_write_r+0x20>)
 800f448:	4604      	mov	r4, r0
 800f44a:	4608      	mov	r0, r1
 800f44c:	4611      	mov	r1, r2
 800f44e:	2200      	movs	r2, #0
 800f450:	602a      	str	r2, [r5, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	f7f1 f93b 	bl	80006ce <_write>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_write_r+0x1e>
 800f45c:	682b      	ldr	r3, [r5, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_write_r+0x1e>
 800f460:	6023      	str	r3, [r4, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	24000cec 	.word	0x24000cec

0800f468 <__errno>:
 800f468:	4b01      	ldr	r3, [pc, #4]	@ (800f470 <__errno+0x8>)
 800f46a:	6818      	ldr	r0, [r3, #0]
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop
 800f470:	24000048 	.word	0x24000048

0800f474 <__libc_init_array>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	4d0d      	ldr	r5, [pc, #52]	@ (800f4ac <__libc_init_array+0x38>)
 800f478:	4c0d      	ldr	r4, [pc, #52]	@ (800f4b0 <__libc_init_array+0x3c>)
 800f47a:	1b64      	subs	r4, r4, r5
 800f47c:	10a4      	asrs	r4, r4, #2
 800f47e:	2600      	movs	r6, #0
 800f480:	42a6      	cmp	r6, r4
 800f482:	d109      	bne.n	800f498 <__libc_init_array+0x24>
 800f484:	4d0b      	ldr	r5, [pc, #44]	@ (800f4b4 <__libc_init_array+0x40>)
 800f486:	4c0c      	ldr	r4, [pc, #48]	@ (800f4b8 <__libc_init_array+0x44>)
 800f488:	f001 fdbe 	bl	8011008 <_init>
 800f48c:	1b64      	subs	r4, r4, r5
 800f48e:	10a4      	asrs	r4, r4, #2
 800f490:	2600      	movs	r6, #0
 800f492:	42a6      	cmp	r6, r4
 800f494:	d105      	bne.n	800f4a2 <__libc_init_array+0x2e>
 800f496:	bd70      	pop	{r4, r5, r6, pc}
 800f498:	f855 3b04 	ldr.w	r3, [r5], #4
 800f49c:	4798      	blx	r3
 800f49e:	3601      	adds	r6, #1
 800f4a0:	e7ee      	b.n	800f480 <__libc_init_array+0xc>
 800f4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4a6:	4798      	blx	r3
 800f4a8:	3601      	adds	r6, #1
 800f4aa:	e7f2      	b.n	800f492 <__libc_init_array+0x1e>
 800f4ac:	080114c0 	.word	0x080114c0
 800f4b0:	080114c0 	.word	0x080114c0
 800f4b4:	080114c0 	.word	0x080114c0
 800f4b8:	080114c4 	.word	0x080114c4

0800f4bc <__retarget_lock_init_recursive>:
 800f4bc:	4770      	bx	lr

0800f4be <__retarget_lock_acquire_recursive>:
 800f4be:	4770      	bx	lr

0800f4c0 <__retarget_lock_release_recursive>:
 800f4c0:	4770      	bx	lr

0800f4c2 <quorem>:
 800f4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c6:	6903      	ldr	r3, [r0, #16]
 800f4c8:	690c      	ldr	r4, [r1, #16]
 800f4ca:	42a3      	cmp	r3, r4
 800f4cc:	4607      	mov	r7, r0
 800f4ce:	db7e      	blt.n	800f5ce <quorem+0x10c>
 800f4d0:	3c01      	subs	r4, #1
 800f4d2:	f101 0814 	add.w	r8, r1, #20
 800f4d6:	00a3      	lsls	r3, r4, #2
 800f4d8:	f100 0514 	add.w	r5, r0, #20
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4f8:	d32e      	bcc.n	800f558 <quorem+0x96>
 800f4fa:	f04f 0a00 	mov.w	sl, #0
 800f4fe:	46c4      	mov	ip, r8
 800f500:	46ae      	mov	lr, r5
 800f502:	46d3      	mov	fp, sl
 800f504:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f508:	b298      	uxth	r0, r3
 800f50a:	fb06 a000 	mla	r0, r6, r0, sl
 800f50e:	0c02      	lsrs	r2, r0, #16
 800f510:	0c1b      	lsrs	r3, r3, #16
 800f512:	fb06 2303 	mla	r3, r6, r3, r2
 800f516:	f8de 2000 	ldr.w	r2, [lr]
 800f51a:	b280      	uxth	r0, r0
 800f51c:	b292      	uxth	r2, r2
 800f51e:	1a12      	subs	r2, r2, r0
 800f520:	445a      	add	r2, fp
 800f522:	f8de 0000 	ldr.w	r0, [lr]
 800f526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f530:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f534:	b292      	uxth	r2, r2
 800f536:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f53a:	45e1      	cmp	r9, ip
 800f53c:	f84e 2b04 	str.w	r2, [lr], #4
 800f540:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f544:	d2de      	bcs.n	800f504 <quorem+0x42>
 800f546:	9b00      	ldr	r3, [sp, #0]
 800f548:	58eb      	ldr	r3, [r5, r3]
 800f54a:	b92b      	cbnz	r3, 800f558 <quorem+0x96>
 800f54c:	9b01      	ldr	r3, [sp, #4]
 800f54e:	3b04      	subs	r3, #4
 800f550:	429d      	cmp	r5, r3
 800f552:	461a      	mov	r2, r3
 800f554:	d32f      	bcc.n	800f5b6 <quorem+0xf4>
 800f556:	613c      	str	r4, [r7, #16]
 800f558:	4638      	mov	r0, r7
 800f55a:	f001 f90d 	bl	8010778 <__mcmp>
 800f55e:	2800      	cmp	r0, #0
 800f560:	db25      	blt.n	800f5ae <quorem+0xec>
 800f562:	4629      	mov	r1, r5
 800f564:	2000      	movs	r0, #0
 800f566:	f858 2b04 	ldr.w	r2, [r8], #4
 800f56a:	f8d1 c000 	ldr.w	ip, [r1]
 800f56e:	fa1f fe82 	uxth.w	lr, r2
 800f572:	fa1f f38c 	uxth.w	r3, ip
 800f576:	eba3 030e 	sub.w	r3, r3, lr
 800f57a:	4403      	add	r3, r0
 800f57c:	0c12      	lsrs	r2, r2, #16
 800f57e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f582:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f586:	b29b      	uxth	r3, r3
 800f588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f58c:	45c1      	cmp	r9, r8
 800f58e:	f841 3b04 	str.w	r3, [r1], #4
 800f592:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f596:	d2e6      	bcs.n	800f566 <quorem+0xa4>
 800f598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f59c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5a0:	b922      	cbnz	r2, 800f5ac <quorem+0xea>
 800f5a2:	3b04      	subs	r3, #4
 800f5a4:	429d      	cmp	r5, r3
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	d30b      	bcc.n	800f5c2 <quorem+0x100>
 800f5aa:	613c      	str	r4, [r7, #16]
 800f5ac:	3601      	adds	r6, #1
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	b003      	add	sp, #12
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	6812      	ldr	r2, [r2, #0]
 800f5b8:	3b04      	subs	r3, #4
 800f5ba:	2a00      	cmp	r2, #0
 800f5bc:	d1cb      	bne.n	800f556 <quorem+0x94>
 800f5be:	3c01      	subs	r4, #1
 800f5c0:	e7c6      	b.n	800f550 <quorem+0x8e>
 800f5c2:	6812      	ldr	r2, [r2, #0]
 800f5c4:	3b04      	subs	r3, #4
 800f5c6:	2a00      	cmp	r2, #0
 800f5c8:	d1ef      	bne.n	800f5aa <quorem+0xe8>
 800f5ca:	3c01      	subs	r4, #1
 800f5cc:	e7ea      	b.n	800f5a4 <quorem+0xe2>
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	e7ee      	b.n	800f5b0 <quorem+0xee>
 800f5d2:	0000      	movs	r0, r0
 800f5d4:	0000      	movs	r0, r0
	...

0800f5d8 <_dtoa_r>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	ed2d 8b02 	vpush	{d8}
 800f5e0:	69c7      	ldr	r7, [r0, #28]
 800f5e2:	b091      	sub	sp, #68	@ 0x44
 800f5e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5e8:	ec55 4b10 	vmov	r4, r5, d0
 800f5ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f5ee:	9107      	str	r1, [sp, #28]
 800f5f0:	4681      	mov	r9, r0
 800f5f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800f5f6:	b97f      	cbnz	r7, 800f618 <_dtoa_r+0x40>
 800f5f8:	2010      	movs	r0, #16
 800f5fa:	f000 fd8d 	bl	8010118 <malloc>
 800f5fe:	4602      	mov	r2, r0
 800f600:	f8c9 001c 	str.w	r0, [r9, #28]
 800f604:	b920      	cbnz	r0, 800f610 <_dtoa_r+0x38>
 800f606:	4ba0      	ldr	r3, [pc, #640]	@ (800f888 <_dtoa_r+0x2b0>)
 800f608:	21ef      	movs	r1, #239	@ 0xef
 800f60a:	48a0      	ldr	r0, [pc, #640]	@ (800f88c <_dtoa_r+0x2b4>)
 800f60c:	f001 fc4c 	bl	8010ea8 <__assert_func>
 800f610:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f614:	6007      	str	r7, [r0, #0]
 800f616:	60c7      	str	r7, [r0, #12]
 800f618:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f61c:	6819      	ldr	r1, [r3, #0]
 800f61e:	b159      	cbz	r1, 800f638 <_dtoa_r+0x60>
 800f620:	685a      	ldr	r2, [r3, #4]
 800f622:	604a      	str	r2, [r1, #4]
 800f624:	2301      	movs	r3, #1
 800f626:	4093      	lsls	r3, r2
 800f628:	608b      	str	r3, [r1, #8]
 800f62a:	4648      	mov	r0, r9
 800f62c:	f000 fe6a 	bl	8010304 <_Bfree>
 800f630:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f634:	2200      	movs	r2, #0
 800f636:	601a      	str	r2, [r3, #0]
 800f638:	1e2b      	subs	r3, r5, #0
 800f63a:	bfbb      	ittet	lt
 800f63c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f640:	9303      	strlt	r3, [sp, #12]
 800f642:	2300      	movge	r3, #0
 800f644:	2201      	movlt	r2, #1
 800f646:	bfac      	ite	ge
 800f648:	6033      	strge	r3, [r6, #0]
 800f64a:	6032      	strlt	r2, [r6, #0]
 800f64c:	4b90      	ldr	r3, [pc, #576]	@ (800f890 <_dtoa_r+0x2b8>)
 800f64e:	9e03      	ldr	r6, [sp, #12]
 800f650:	43b3      	bics	r3, r6
 800f652:	d110      	bne.n	800f676 <_dtoa_r+0x9e>
 800f654:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f656:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f65a:	6013      	str	r3, [r2, #0]
 800f65c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f660:	4323      	orrs	r3, r4
 800f662:	f000 84de 	beq.w	8010022 <_dtoa_r+0xa4a>
 800f666:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f668:	4f8a      	ldr	r7, [pc, #552]	@ (800f894 <_dtoa_r+0x2bc>)
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f000 84e0 	beq.w	8010030 <_dtoa_r+0xa58>
 800f670:	1cfb      	adds	r3, r7, #3
 800f672:	f000 bcdb 	b.w	801002c <_dtoa_r+0xa54>
 800f676:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f67a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f682:	d10a      	bne.n	800f69a <_dtoa_r+0xc2>
 800f684:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f686:	2301      	movs	r3, #1
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f68c:	b113      	cbz	r3, 800f694 <_dtoa_r+0xbc>
 800f68e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f690:	4b81      	ldr	r3, [pc, #516]	@ (800f898 <_dtoa_r+0x2c0>)
 800f692:	6013      	str	r3, [r2, #0]
 800f694:	4f81      	ldr	r7, [pc, #516]	@ (800f89c <_dtoa_r+0x2c4>)
 800f696:	f000 bccb 	b.w	8010030 <_dtoa_r+0xa58>
 800f69a:	aa0e      	add	r2, sp, #56	@ 0x38
 800f69c:	a90f      	add	r1, sp, #60	@ 0x3c
 800f69e:	4648      	mov	r0, r9
 800f6a0:	eeb0 0b48 	vmov.f64	d0, d8
 800f6a4:	f001 f918 	bl	80108d8 <__d2b>
 800f6a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f6ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6ae:	9001      	str	r0, [sp, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d045      	beq.n	800f740 <_dtoa_r+0x168>
 800f6b4:	eeb0 7b48 	vmov.f64	d7, d8
 800f6b8:	ee18 1a90 	vmov	r1, s17
 800f6bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f6c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f6c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f6c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f6cc:	2500      	movs	r5, #0
 800f6ce:	ee07 1a90 	vmov	s15, r1
 800f6d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f6d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f870 <_dtoa_r+0x298>
 800f6da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f6de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f878 <_dtoa_r+0x2a0>
 800f6e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f6e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f880 <_dtoa_r+0x2a8>
 800f6ea:	ee07 3a90 	vmov	s15, r3
 800f6ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f6f2:	eeb0 7b46 	vmov.f64	d7, d6
 800f6f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f6fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f6fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f706:	ee16 8a90 	vmov	r8, s13
 800f70a:	d508      	bpl.n	800f71e <_dtoa_r+0x146>
 800f70c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f710:	eeb4 6b47 	vcmp.f64	d6, d7
 800f714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f718:	bf18      	it	ne
 800f71a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f71e:	f1b8 0f16 	cmp.w	r8, #22
 800f722:	d82b      	bhi.n	800f77c <_dtoa_r+0x1a4>
 800f724:	495e      	ldr	r1, [pc, #376]	@ (800f8a0 <_dtoa_r+0x2c8>)
 800f726:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f72a:	ed91 7b00 	vldr	d7, [r1]
 800f72e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f736:	d501      	bpl.n	800f73c <_dtoa_r+0x164>
 800f738:	f108 38ff 	add.w	r8, r8, #4294967295
 800f73c:	2100      	movs	r1, #0
 800f73e:	e01e      	b.n	800f77e <_dtoa_r+0x1a6>
 800f740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f742:	4413      	add	r3, r2
 800f744:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f748:	2920      	cmp	r1, #32
 800f74a:	bfc1      	itttt	gt
 800f74c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f750:	408e      	lslgt	r6, r1
 800f752:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f756:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f75a:	bfd6      	itet	le
 800f75c:	f1c1 0120 	rsble	r1, r1, #32
 800f760:	4331      	orrgt	r1, r6
 800f762:	fa04 f101 	lslle.w	r1, r4, r1
 800f766:	ee07 1a90 	vmov	s15, r1
 800f76a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f76e:	3b01      	subs	r3, #1
 800f770:	ee17 1a90 	vmov	r1, s15
 800f774:	2501      	movs	r5, #1
 800f776:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f77a:	e7a8      	b.n	800f6ce <_dtoa_r+0xf6>
 800f77c:	2101      	movs	r1, #1
 800f77e:	1ad2      	subs	r2, r2, r3
 800f780:	1e53      	subs	r3, r2, #1
 800f782:	9306      	str	r3, [sp, #24]
 800f784:	bf45      	ittet	mi
 800f786:	f1c2 0301 	rsbmi	r3, r2, #1
 800f78a:	9305      	strmi	r3, [sp, #20]
 800f78c:	2300      	movpl	r3, #0
 800f78e:	2300      	movmi	r3, #0
 800f790:	bf4c      	ite	mi
 800f792:	9306      	strmi	r3, [sp, #24]
 800f794:	9305      	strpl	r3, [sp, #20]
 800f796:	f1b8 0f00 	cmp.w	r8, #0
 800f79a:	910c      	str	r1, [sp, #48]	@ 0x30
 800f79c:	db18      	blt.n	800f7d0 <_dtoa_r+0x1f8>
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f7a4:	4443      	add	r3, r8
 800f7a6:	9306      	str	r3, [sp, #24]
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9a07      	ldr	r2, [sp, #28]
 800f7ac:	2a09      	cmp	r2, #9
 800f7ae:	d849      	bhi.n	800f844 <_dtoa_r+0x26c>
 800f7b0:	2a05      	cmp	r2, #5
 800f7b2:	bfc4      	itt	gt
 800f7b4:	3a04      	subgt	r2, #4
 800f7b6:	9207      	strgt	r2, [sp, #28]
 800f7b8:	9a07      	ldr	r2, [sp, #28]
 800f7ba:	f1a2 0202 	sub.w	r2, r2, #2
 800f7be:	bfcc      	ite	gt
 800f7c0:	2400      	movgt	r4, #0
 800f7c2:	2401      	movle	r4, #1
 800f7c4:	2a03      	cmp	r2, #3
 800f7c6:	d848      	bhi.n	800f85a <_dtoa_r+0x282>
 800f7c8:	e8df f002 	tbb	[pc, r2]
 800f7cc:	3a2c2e0b 	.word	0x3a2c2e0b
 800f7d0:	9b05      	ldr	r3, [sp, #20]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	eba3 0308 	sub.w	r3, r3, r8
 800f7d8:	9305      	str	r3, [sp, #20]
 800f7da:	920a      	str	r2, [sp, #40]	@ 0x28
 800f7dc:	f1c8 0300 	rsb	r3, r8, #0
 800f7e0:	e7e3      	b.n	800f7aa <_dtoa_r+0x1d2>
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	9208      	str	r2, [sp, #32]
 800f7e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7e8:	2a00      	cmp	r2, #0
 800f7ea:	dc39      	bgt.n	800f860 <_dtoa_r+0x288>
 800f7ec:	f04f 0b01 	mov.w	fp, #1
 800f7f0:	46da      	mov	sl, fp
 800f7f2:	465a      	mov	r2, fp
 800f7f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f7f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	2004      	movs	r0, #4
 800f800:	f100 0614 	add.w	r6, r0, #20
 800f804:	4296      	cmp	r6, r2
 800f806:	d930      	bls.n	800f86a <_dtoa_r+0x292>
 800f808:	6079      	str	r1, [r7, #4]
 800f80a:	4648      	mov	r0, r9
 800f80c:	9304      	str	r3, [sp, #16]
 800f80e:	f000 fd39 	bl	8010284 <_Balloc>
 800f812:	9b04      	ldr	r3, [sp, #16]
 800f814:	4607      	mov	r7, r0
 800f816:	2800      	cmp	r0, #0
 800f818:	d146      	bne.n	800f8a8 <_dtoa_r+0x2d0>
 800f81a:	4b22      	ldr	r3, [pc, #136]	@ (800f8a4 <_dtoa_r+0x2cc>)
 800f81c:	4602      	mov	r2, r0
 800f81e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f822:	e6f2      	b.n	800f60a <_dtoa_r+0x32>
 800f824:	2201      	movs	r2, #1
 800f826:	e7dd      	b.n	800f7e4 <_dtoa_r+0x20c>
 800f828:	2200      	movs	r2, #0
 800f82a:	9208      	str	r2, [sp, #32]
 800f82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f82e:	eb08 0b02 	add.w	fp, r8, r2
 800f832:	f10b 0a01 	add.w	sl, fp, #1
 800f836:	4652      	mov	r2, sl
 800f838:	2a01      	cmp	r2, #1
 800f83a:	bfb8      	it	lt
 800f83c:	2201      	movlt	r2, #1
 800f83e:	e7db      	b.n	800f7f8 <_dtoa_r+0x220>
 800f840:	2201      	movs	r2, #1
 800f842:	e7f2      	b.n	800f82a <_dtoa_r+0x252>
 800f844:	2401      	movs	r4, #1
 800f846:	2200      	movs	r2, #0
 800f848:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f84c:	f04f 3bff 	mov.w	fp, #4294967295
 800f850:	2100      	movs	r1, #0
 800f852:	46da      	mov	sl, fp
 800f854:	2212      	movs	r2, #18
 800f856:	9109      	str	r1, [sp, #36]	@ 0x24
 800f858:	e7ce      	b.n	800f7f8 <_dtoa_r+0x220>
 800f85a:	2201      	movs	r2, #1
 800f85c:	9208      	str	r2, [sp, #32]
 800f85e:	e7f5      	b.n	800f84c <_dtoa_r+0x274>
 800f860:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f864:	46da      	mov	sl, fp
 800f866:	465a      	mov	r2, fp
 800f868:	e7c6      	b.n	800f7f8 <_dtoa_r+0x220>
 800f86a:	3101      	adds	r1, #1
 800f86c:	0040      	lsls	r0, r0, #1
 800f86e:	e7c7      	b.n	800f800 <_dtoa_r+0x228>
 800f870:	636f4361 	.word	0x636f4361
 800f874:	3fd287a7 	.word	0x3fd287a7
 800f878:	8b60c8b3 	.word	0x8b60c8b3
 800f87c:	3fc68a28 	.word	0x3fc68a28
 800f880:	509f79fb 	.word	0x509f79fb
 800f884:	3fd34413 	.word	0x3fd34413
 800f888:	08011185 	.word	0x08011185
 800f88c:	0801119c 	.word	0x0801119c
 800f890:	7ff00000 	.word	0x7ff00000
 800f894:	08011181 	.word	0x08011181
 800f898:	08011155 	.word	0x08011155
 800f89c:	08011154 	.word	0x08011154
 800f8a0:	08011298 	.word	0x08011298
 800f8a4:	080111f4 	.word	0x080111f4
 800f8a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f8ac:	f1ba 0f0e 	cmp.w	sl, #14
 800f8b0:	6010      	str	r0, [r2, #0]
 800f8b2:	d86f      	bhi.n	800f994 <_dtoa_r+0x3bc>
 800f8b4:	2c00      	cmp	r4, #0
 800f8b6:	d06d      	beq.n	800f994 <_dtoa_r+0x3bc>
 800f8b8:	f1b8 0f00 	cmp.w	r8, #0
 800f8bc:	f340 80c2 	ble.w	800fa44 <_dtoa_r+0x46c>
 800f8c0:	4aca      	ldr	r2, [pc, #808]	@ (800fbec <_dtoa_r+0x614>)
 800f8c2:	f008 010f 	and.w	r1, r8, #15
 800f8c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f8ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f8ce:	ed92 7b00 	vldr	d7, [r2]
 800f8d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f8d6:	f000 80a9 	beq.w	800fa2c <_dtoa_r+0x454>
 800f8da:	4ac5      	ldr	r2, [pc, #788]	@ (800fbf0 <_dtoa_r+0x618>)
 800f8dc:	ed92 6b08 	vldr	d6, [r2, #32]
 800f8e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f8e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f8e8:	f001 010f 	and.w	r1, r1, #15
 800f8ec:	2203      	movs	r2, #3
 800f8ee:	48c0      	ldr	r0, [pc, #768]	@ (800fbf0 <_dtoa_r+0x618>)
 800f8f0:	2900      	cmp	r1, #0
 800f8f2:	f040 809d 	bne.w	800fa30 <_dtoa_r+0x458>
 800f8f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f8fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f8fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f902:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f904:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f908:	2900      	cmp	r1, #0
 800f90a:	f000 80c1 	beq.w	800fa90 <_dtoa_r+0x4b8>
 800f90e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f912:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91a:	f140 80b9 	bpl.w	800fa90 <_dtoa_r+0x4b8>
 800f91e:	f1ba 0f00 	cmp.w	sl, #0
 800f922:	f000 80b5 	beq.w	800fa90 <_dtoa_r+0x4b8>
 800f926:	f1bb 0f00 	cmp.w	fp, #0
 800f92a:	dd31      	ble.n	800f990 <_dtoa_r+0x3b8>
 800f92c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f930:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f934:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f938:	f108 31ff 	add.w	r1, r8, #4294967295
 800f93c:	9104      	str	r1, [sp, #16]
 800f93e:	3201      	adds	r2, #1
 800f940:	465c      	mov	r4, fp
 800f942:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f946:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f94a:	ee07 2a90 	vmov	s15, r2
 800f94e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f952:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f956:	ee15 2a90 	vmov	r2, s11
 800f95a:	ec51 0b15 	vmov	r0, r1, d5
 800f95e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f962:	2c00      	cmp	r4, #0
 800f964:	f040 8098 	bne.w	800fa98 <_dtoa_r+0x4c0>
 800f968:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f96c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f970:	ec41 0b17 	vmov	d7, r0, r1
 800f974:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97c:	f300 8261 	bgt.w	800fe42 <_dtoa_r+0x86a>
 800f980:	eeb1 7b47 	vneg.f64	d7, d7
 800f984:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98c:	f100 80f5 	bmi.w	800fb7a <_dtoa_r+0x5a2>
 800f990:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f994:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f996:	2a00      	cmp	r2, #0
 800f998:	f2c0 812c 	blt.w	800fbf4 <_dtoa_r+0x61c>
 800f99c:	f1b8 0f0e 	cmp.w	r8, #14
 800f9a0:	f300 8128 	bgt.w	800fbf4 <_dtoa_r+0x61c>
 800f9a4:	4b91      	ldr	r3, [pc, #580]	@ (800fbec <_dtoa_r+0x614>)
 800f9a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f9aa:	ed93 6b00 	vldr	d6, [r3]
 800f9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	da03      	bge.n	800f9bc <_dtoa_r+0x3e4>
 800f9b4:	f1ba 0f00 	cmp.w	sl, #0
 800f9b8:	f340 80d2 	ble.w	800fb60 <_dtoa_r+0x588>
 800f9bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f9c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9c4:	463e      	mov	r6, r7
 800f9c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f9ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f9ce:	ee15 3a10 	vmov	r3, s10
 800f9d2:	3330      	adds	r3, #48	@ 0x30
 800f9d4:	f806 3b01 	strb.w	r3, [r6], #1
 800f9d8:	1bf3      	subs	r3, r6, r7
 800f9da:	459a      	cmp	sl, r3
 800f9dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f9e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f9e4:	f040 80f8 	bne.w	800fbd8 <_dtoa_r+0x600>
 800f9e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f9ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f4:	f300 80dd 	bgt.w	800fbb2 <_dtoa_r+0x5da>
 800f9f8:	eeb4 7b46 	vcmp.f64	d7, d6
 800f9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa00:	d104      	bne.n	800fa0c <_dtoa_r+0x434>
 800fa02:	ee15 3a10 	vmov	r3, s10
 800fa06:	07db      	lsls	r3, r3, #31
 800fa08:	f100 80d3 	bmi.w	800fbb2 <_dtoa_r+0x5da>
 800fa0c:	9901      	ldr	r1, [sp, #4]
 800fa0e:	4648      	mov	r0, r9
 800fa10:	f000 fc78 	bl	8010304 <_Bfree>
 800fa14:	2300      	movs	r3, #0
 800fa16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa18:	7033      	strb	r3, [r6, #0]
 800fa1a:	f108 0301 	add.w	r3, r8, #1
 800fa1e:	6013      	str	r3, [r2, #0]
 800fa20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f000 8304 	beq.w	8010030 <_dtoa_r+0xa58>
 800fa28:	601e      	str	r6, [r3, #0]
 800fa2a:	e301      	b.n	8010030 <_dtoa_r+0xa58>
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	e75e      	b.n	800f8ee <_dtoa_r+0x316>
 800fa30:	07cc      	lsls	r4, r1, #31
 800fa32:	d504      	bpl.n	800fa3e <_dtoa_r+0x466>
 800fa34:	ed90 6b00 	vldr	d6, [r0]
 800fa38:	3201      	adds	r2, #1
 800fa3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa3e:	1049      	asrs	r1, r1, #1
 800fa40:	3008      	adds	r0, #8
 800fa42:	e755      	b.n	800f8f0 <_dtoa_r+0x318>
 800fa44:	d022      	beq.n	800fa8c <_dtoa_r+0x4b4>
 800fa46:	f1c8 0100 	rsb	r1, r8, #0
 800fa4a:	4a68      	ldr	r2, [pc, #416]	@ (800fbec <_dtoa_r+0x614>)
 800fa4c:	f001 000f 	and.w	r0, r1, #15
 800fa50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fa54:	ed92 7b00 	vldr	d7, [r2]
 800fa58:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fa5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa60:	4863      	ldr	r0, [pc, #396]	@ (800fbf0 <_dtoa_r+0x618>)
 800fa62:	1109      	asrs	r1, r1, #4
 800fa64:	2400      	movs	r4, #0
 800fa66:	2202      	movs	r2, #2
 800fa68:	b929      	cbnz	r1, 800fa76 <_dtoa_r+0x49e>
 800fa6a:	2c00      	cmp	r4, #0
 800fa6c:	f43f af49 	beq.w	800f902 <_dtoa_r+0x32a>
 800fa70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa74:	e745      	b.n	800f902 <_dtoa_r+0x32a>
 800fa76:	07ce      	lsls	r6, r1, #31
 800fa78:	d505      	bpl.n	800fa86 <_dtoa_r+0x4ae>
 800fa7a:	ed90 6b00 	vldr	d6, [r0]
 800fa7e:	3201      	adds	r2, #1
 800fa80:	2401      	movs	r4, #1
 800fa82:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa86:	1049      	asrs	r1, r1, #1
 800fa88:	3008      	adds	r0, #8
 800fa8a:	e7ed      	b.n	800fa68 <_dtoa_r+0x490>
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	e738      	b.n	800f902 <_dtoa_r+0x32a>
 800fa90:	f8cd 8010 	str.w	r8, [sp, #16]
 800fa94:	4654      	mov	r4, sl
 800fa96:	e754      	b.n	800f942 <_dtoa_r+0x36a>
 800fa98:	4a54      	ldr	r2, [pc, #336]	@ (800fbec <_dtoa_r+0x614>)
 800fa9a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800fa9e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800faa2:	9a08      	ldr	r2, [sp, #32]
 800faa4:	ec41 0b17 	vmov	d7, r0, r1
 800faa8:	443c      	add	r4, r7
 800faaa:	b34a      	cbz	r2, 800fb00 <_dtoa_r+0x528>
 800faac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800fab0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800fab4:	463e      	mov	r6, r7
 800fab6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800faba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fabe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fac2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fac6:	ee14 2a90 	vmov	r2, s9
 800faca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800face:	3230      	adds	r2, #48	@ 0x30
 800fad0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fad4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fadc:	f806 2b01 	strb.w	r2, [r6], #1
 800fae0:	d438      	bmi.n	800fb54 <_dtoa_r+0x57c>
 800fae2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fae6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800faea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faee:	d462      	bmi.n	800fbb6 <_dtoa_r+0x5de>
 800faf0:	42a6      	cmp	r6, r4
 800faf2:	f43f af4d 	beq.w	800f990 <_dtoa_r+0x3b8>
 800faf6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fafa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fafe:	e7e0      	b.n	800fac2 <_dtoa_r+0x4ea>
 800fb00:	4621      	mov	r1, r4
 800fb02:	463e      	mov	r6, r7
 800fb04:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fb08:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800fb0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fb10:	ee14 2a90 	vmov	r2, s9
 800fb14:	3230      	adds	r2, #48	@ 0x30
 800fb16:	f806 2b01 	strb.w	r2, [r6], #1
 800fb1a:	42a6      	cmp	r6, r4
 800fb1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fb20:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fb24:	d119      	bne.n	800fb5a <_dtoa_r+0x582>
 800fb26:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800fb2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fb2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb36:	dc3e      	bgt.n	800fbb6 <_dtoa_r+0x5de>
 800fb38:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fb3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800fb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb44:	f57f af24 	bpl.w	800f990 <_dtoa_r+0x3b8>
 800fb48:	460e      	mov	r6, r1
 800fb4a:	3901      	subs	r1, #1
 800fb4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb50:	2b30      	cmp	r3, #48	@ 0x30
 800fb52:	d0f9      	beq.n	800fb48 <_dtoa_r+0x570>
 800fb54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fb58:	e758      	b.n	800fa0c <_dtoa_r+0x434>
 800fb5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fb5e:	e7d5      	b.n	800fb0c <_dtoa_r+0x534>
 800fb60:	d10b      	bne.n	800fb7a <_dtoa_r+0x5a2>
 800fb62:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fb66:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fb6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb76:	f2c0 8161 	blt.w	800fe3c <_dtoa_r+0x864>
 800fb7a:	2400      	movs	r4, #0
 800fb7c:	4625      	mov	r5, r4
 800fb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb80:	43db      	mvns	r3, r3
 800fb82:	9304      	str	r3, [sp, #16]
 800fb84:	463e      	mov	r6, r7
 800fb86:	f04f 0800 	mov.w	r8, #0
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	f000 fbb9 	bl	8010304 <_Bfree>
 800fb92:	2d00      	cmp	r5, #0
 800fb94:	d0de      	beq.n	800fb54 <_dtoa_r+0x57c>
 800fb96:	f1b8 0f00 	cmp.w	r8, #0
 800fb9a:	d005      	beq.n	800fba8 <_dtoa_r+0x5d0>
 800fb9c:	45a8      	cmp	r8, r5
 800fb9e:	d003      	beq.n	800fba8 <_dtoa_r+0x5d0>
 800fba0:	4641      	mov	r1, r8
 800fba2:	4648      	mov	r0, r9
 800fba4:	f000 fbae 	bl	8010304 <_Bfree>
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4648      	mov	r0, r9
 800fbac:	f000 fbaa 	bl	8010304 <_Bfree>
 800fbb0:	e7d0      	b.n	800fb54 <_dtoa_r+0x57c>
 800fbb2:	f8cd 8010 	str.w	r8, [sp, #16]
 800fbb6:	4633      	mov	r3, r6
 800fbb8:	461e      	mov	r6, r3
 800fbba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbbe:	2a39      	cmp	r2, #57	@ 0x39
 800fbc0:	d106      	bne.n	800fbd0 <_dtoa_r+0x5f8>
 800fbc2:	429f      	cmp	r7, r3
 800fbc4:	d1f8      	bne.n	800fbb8 <_dtoa_r+0x5e0>
 800fbc6:	9a04      	ldr	r2, [sp, #16]
 800fbc8:	3201      	adds	r2, #1
 800fbca:	9204      	str	r2, [sp, #16]
 800fbcc:	2230      	movs	r2, #48	@ 0x30
 800fbce:	703a      	strb	r2, [r7, #0]
 800fbd0:	781a      	ldrb	r2, [r3, #0]
 800fbd2:	3201      	adds	r2, #1
 800fbd4:	701a      	strb	r2, [r3, #0]
 800fbd6:	e7bd      	b.n	800fb54 <_dtoa_r+0x57c>
 800fbd8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fbdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe4:	f47f aeef 	bne.w	800f9c6 <_dtoa_r+0x3ee>
 800fbe8:	e710      	b.n	800fa0c <_dtoa_r+0x434>
 800fbea:	bf00      	nop
 800fbec:	08011298 	.word	0x08011298
 800fbf0:	08011270 	.word	0x08011270
 800fbf4:	9908      	ldr	r1, [sp, #32]
 800fbf6:	2900      	cmp	r1, #0
 800fbf8:	f000 80e3 	beq.w	800fdc2 <_dtoa_r+0x7ea>
 800fbfc:	9907      	ldr	r1, [sp, #28]
 800fbfe:	2901      	cmp	r1, #1
 800fc00:	f300 80c8 	bgt.w	800fd94 <_dtoa_r+0x7bc>
 800fc04:	2d00      	cmp	r5, #0
 800fc06:	f000 80c1 	beq.w	800fd8c <_dtoa_r+0x7b4>
 800fc0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fc0e:	9e05      	ldr	r6, [sp, #20]
 800fc10:	461c      	mov	r4, r3
 800fc12:	9304      	str	r3, [sp, #16]
 800fc14:	9b05      	ldr	r3, [sp, #20]
 800fc16:	4413      	add	r3, r2
 800fc18:	9305      	str	r3, [sp, #20]
 800fc1a:	9b06      	ldr	r3, [sp, #24]
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	4413      	add	r3, r2
 800fc20:	4648      	mov	r0, r9
 800fc22:	9306      	str	r3, [sp, #24]
 800fc24:	f000 fc22 	bl	801046c <__i2b>
 800fc28:	9b04      	ldr	r3, [sp, #16]
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	b166      	cbz	r6, 800fc48 <_dtoa_r+0x670>
 800fc2e:	9a06      	ldr	r2, [sp, #24]
 800fc30:	2a00      	cmp	r2, #0
 800fc32:	dd09      	ble.n	800fc48 <_dtoa_r+0x670>
 800fc34:	42b2      	cmp	r2, r6
 800fc36:	9905      	ldr	r1, [sp, #20]
 800fc38:	bfa8      	it	ge
 800fc3a:	4632      	movge	r2, r6
 800fc3c:	1a89      	subs	r1, r1, r2
 800fc3e:	9105      	str	r1, [sp, #20]
 800fc40:	9906      	ldr	r1, [sp, #24]
 800fc42:	1ab6      	subs	r6, r6, r2
 800fc44:	1a8a      	subs	r2, r1, r2
 800fc46:	9206      	str	r2, [sp, #24]
 800fc48:	b1fb      	cbz	r3, 800fc8a <_dtoa_r+0x6b2>
 800fc4a:	9a08      	ldr	r2, [sp, #32]
 800fc4c:	2a00      	cmp	r2, #0
 800fc4e:	f000 80bc 	beq.w	800fdca <_dtoa_r+0x7f2>
 800fc52:	b19c      	cbz	r4, 800fc7c <_dtoa_r+0x6a4>
 800fc54:	4629      	mov	r1, r5
 800fc56:	4622      	mov	r2, r4
 800fc58:	4648      	mov	r0, r9
 800fc5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc5c:	f000 fcc6 	bl	80105ec <__pow5mult>
 800fc60:	9a01      	ldr	r2, [sp, #4]
 800fc62:	4601      	mov	r1, r0
 800fc64:	4605      	mov	r5, r0
 800fc66:	4648      	mov	r0, r9
 800fc68:	f000 fc16 	bl	8010498 <__multiply>
 800fc6c:	9901      	ldr	r1, [sp, #4]
 800fc6e:	9004      	str	r0, [sp, #16]
 800fc70:	4648      	mov	r0, r9
 800fc72:	f000 fb47 	bl	8010304 <_Bfree>
 800fc76:	9a04      	ldr	r2, [sp, #16]
 800fc78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc7a:	9201      	str	r2, [sp, #4]
 800fc7c:	1b1a      	subs	r2, r3, r4
 800fc7e:	d004      	beq.n	800fc8a <_dtoa_r+0x6b2>
 800fc80:	9901      	ldr	r1, [sp, #4]
 800fc82:	4648      	mov	r0, r9
 800fc84:	f000 fcb2 	bl	80105ec <__pow5mult>
 800fc88:	9001      	str	r0, [sp, #4]
 800fc8a:	2101      	movs	r1, #1
 800fc8c:	4648      	mov	r0, r9
 800fc8e:	f000 fbed 	bl	801046c <__i2b>
 800fc92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc94:	4604      	mov	r4, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f000 81d0 	beq.w	801003c <_dtoa_r+0xa64>
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	4601      	mov	r1, r0
 800fca0:	4648      	mov	r0, r9
 800fca2:	f000 fca3 	bl	80105ec <__pow5mult>
 800fca6:	9b07      	ldr	r3, [sp, #28]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	4604      	mov	r4, r0
 800fcac:	f300 8095 	bgt.w	800fdda <_dtoa_r+0x802>
 800fcb0:	9b02      	ldr	r3, [sp, #8]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f040 808b 	bne.w	800fdce <_dtoa_r+0x7f6>
 800fcb8:	9b03      	ldr	r3, [sp, #12]
 800fcba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fcbe:	2a00      	cmp	r2, #0
 800fcc0:	f040 8087 	bne.w	800fdd2 <_dtoa_r+0x7fa>
 800fcc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fcc8:	0d12      	lsrs	r2, r2, #20
 800fcca:	0512      	lsls	r2, r2, #20
 800fccc:	2a00      	cmp	r2, #0
 800fcce:	f000 8082 	beq.w	800fdd6 <_dtoa_r+0x7fe>
 800fcd2:	9b05      	ldr	r3, [sp, #20]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	9305      	str	r3, [sp, #20]
 800fcd8:	9b06      	ldr	r3, [sp, #24]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	9306      	str	r3, [sp, #24]
 800fcde:	2301      	movs	r3, #1
 800fce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f000 81af 	beq.w	8010048 <_dtoa_r+0xa70>
 800fcea:	6922      	ldr	r2, [r4, #16]
 800fcec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fcf0:	6910      	ldr	r0, [r2, #16]
 800fcf2:	f000 fb6f 	bl	80103d4 <__hi0bits>
 800fcf6:	f1c0 0020 	rsb	r0, r0, #32
 800fcfa:	9b06      	ldr	r3, [sp, #24]
 800fcfc:	4418      	add	r0, r3
 800fcfe:	f010 001f 	ands.w	r0, r0, #31
 800fd02:	d076      	beq.n	800fdf2 <_dtoa_r+0x81a>
 800fd04:	f1c0 0220 	rsb	r2, r0, #32
 800fd08:	2a04      	cmp	r2, #4
 800fd0a:	dd69      	ble.n	800fde0 <_dtoa_r+0x808>
 800fd0c:	9b05      	ldr	r3, [sp, #20]
 800fd0e:	f1c0 001c 	rsb	r0, r0, #28
 800fd12:	4403      	add	r3, r0
 800fd14:	9305      	str	r3, [sp, #20]
 800fd16:	9b06      	ldr	r3, [sp, #24]
 800fd18:	4406      	add	r6, r0
 800fd1a:	4403      	add	r3, r0
 800fd1c:	9306      	str	r3, [sp, #24]
 800fd1e:	9b05      	ldr	r3, [sp, #20]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	dd05      	ble.n	800fd30 <_dtoa_r+0x758>
 800fd24:	9901      	ldr	r1, [sp, #4]
 800fd26:	461a      	mov	r2, r3
 800fd28:	4648      	mov	r0, r9
 800fd2a:	f000 fcb9 	bl	80106a0 <__lshift>
 800fd2e:	9001      	str	r0, [sp, #4]
 800fd30:	9b06      	ldr	r3, [sp, #24]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	dd05      	ble.n	800fd42 <_dtoa_r+0x76a>
 800fd36:	4621      	mov	r1, r4
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4648      	mov	r0, r9
 800fd3c:	f000 fcb0 	bl	80106a0 <__lshift>
 800fd40:	4604      	mov	r4, r0
 800fd42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d056      	beq.n	800fdf6 <_dtoa_r+0x81e>
 800fd48:	9801      	ldr	r0, [sp, #4]
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	f000 fd14 	bl	8010778 <__mcmp>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	da50      	bge.n	800fdf6 <_dtoa_r+0x81e>
 800fd54:	f108 33ff 	add.w	r3, r8, #4294967295
 800fd58:	9304      	str	r3, [sp, #16]
 800fd5a:	9901      	ldr	r1, [sp, #4]
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	220a      	movs	r2, #10
 800fd60:	4648      	mov	r0, r9
 800fd62:	f000 faf1 	bl	8010348 <__multadd>
 800fd66:	9b08      	ldr	r3, [sp, #32]
 800fd68:	9001      	str	r0, [sp, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f000 816e 	beq.w	801004c <_dtoa_r+0xa74>
 800fd70:	4629      	mov	r1, r5
 800fd72:	2300      	movs	r3, #0
 800fd74:	220a      	movs	r2, #10
 800fd76:	4648      	mov	r0, r9
 800fd78:	f000 fae6 	bl	8010348 <__multadd>
 800fd7c:	f1bb 0f00 	cmp.w	fp, #0
 800fd80:	4605      	mov	r5, r0
 800fd82:	dc64      	bgt.n	800fe4e <_dtoa_r+0x876>
 800fd84:	9b07      	ldr	r3, [sp, #28]
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	dc3e      	bgt.n	800fe08 <_dtoa_r+0x830>
 800fd8a:	e060      	b.n	800fe4e <_dtoa_r+0x876>
 800fd8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fd92:	e73c      	b.n	800fc0e <_dtoa_r+0x636>
 800fd94:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fd98:	42a3      	cmp	r3, r4
 800fd9a:	bfbf      	itttt	lt
 800fd9c:	1ae2      	sublt	r2, r4, r3
 800fd9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fda0:	189b      	addlt	r3, r3, r2
 800fda2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800fda4:	bfae      	itee	ge
 800fda6:	1b1c      	subge	r4, r3, r4
 800fda8:	4623      	movlt	r3, r4
 800fdaa:	2400      	movlt	r4, #0
 800fdac:	f1ba 0f00 	cmp.w	sl, #0
 800fdb0:	bfb5      	itete	lt
 800fdb2:	9a05      	ldrlt	r2, [sp, #20]
 800fdb4:	9e05      	ldrge	r6, [sp, #20]
 800fdb6:	eba2 060a 	sublt.w	r6, r2, sl
 800fdba:	4652      	movge	r2, sl
 800fdbc:	bfb8      	it	lt
 800fdbe:	2200      	movlt	r2, #0
 800fdc0:	e727      	b.n	800fc12 <_dtoa_r+0x63a>
 800fdc2:	9e05      	ldr	r6, [sp, #20]
 800fdc4:	9d08      	ldr	r5, [sp, #32]
 800fdc6:	461c      	mov	r4, r3
 800fdc8:	e730      	b.n	800fc2c <_dtoa_r+0x654>
 800fdca:	461a      	mov	r2, r3
 800fdcc:	e758      	b.n	800fc80 <_dtoa_r+0x6a8>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	e786      	b.n	800fce0 <_dtoa_r+0x708>
 800fdd2:	9b02      	ldr	r3, [sp, #8]
 800fdd4:	e784      	b.n	800fce0 <_dtoa_r+0x708>
 800fdd6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fdd8:	e783      	b.n	800fce2 <_dtoa_r+0x70a>
 800fdda:	2300      	movs	r3, #0
 800fddc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdde:	e784      	b.n	800fcea <_dtoa_r+0x712>
 800fde0:	d09d      	beq.n	800fd1e <_dtoa_r+0x746>
 800fde2:	9b05      	ldr	r3, [sp, #20]
 800fde4:	321c      	adds	r2, #28
 800fde6:	4413      	add	r3, r2
 800fde8:	9305      	str	r3, [sp, #20]
 800fdea:	9b06      	ldr	r3, [sp, #24]
 800fdec:	4416      	add	r6, r2
 800fdee:	4413      	add	r3, r2
 800fdf0:	e794      	b.n	800fd1c <_dtoa_r+0x744>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	e7f5      	b.n	800fde2 <_dtoa_r+0x80a>
 800fdf6:	f1ba 0f00 	cmp.w	sl, #0
 800fdfa:	f8cd 8010 	str.w	r8, [sp, #16]
 800fdfe:	46d3      	mov	fp, sl
 800fe00:	dc21      	bgt.n	800fe46 <_dtoa_r+0x86e>
 800fe02:	9b07      	ldr	r3, [sp, #28]
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	dd1e      	ble.n	800fe46 <_dtoa_r+0x86e>
 800fe08:	f1bb 0f00 	cmp.w	fp, #0
 800fe0c:	f47f aeb7 	bne.w	800fb7e <_dtoa_r+0x5a6>
 800fe10:	4621      	mov	r1, r4
 800fe12:	465b      	mov	r3, fp
 800fe14:	2205      	movs	r2, #5
 800fe16:	4648      	mov	r0, r9
 800fe18:	f000 fa96 	bl	8010348 <__multadd>
 800fe1c:	4601      	mov	r1, r0
 800fe1e:	4604      	mov	r4, r0
 800fe20:	9801      	ldr	r0, [sp, #4]
 800fe22:	f000 fca9 	bl	8010778 <__mcmp>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	f77f aea9 	ble.w	800fb7e <_dtoa_r+0x5a6>
 800fe2c:	463e      	mov	r6, r7
 800fe2e:	2331      	movs	r3, #49	@ 0x31
 800fe30:	f806 3b01 	strb.w	r3, [r6], #1
 800fe34:	9b04      	ldr	r3, [sp, #16]
 800fe36:	3301      	adds	r3, #1
 800fe38:	9304      	str	r3, [sp, #16]
 800fe3a:	e6a4      	b.n	800fb86 <_dtoa_r+0x5ae>
 800fe3c:	f8cd 8010 	str.w	r8, [sp, #16]
 800fe40:	4654      	mov	r4, sl
 800fe42:	4625      	mov	r5, r4
 800fe44:	e7f2      	b.n	800fe2c <_dtoa_r+0x854>
 800fe46:	9b08      	ldr	r3, [sp, #32]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f000 8103 	beq.w	8010054 <_dtoa_r+0xa7c>
 800fe4e:	2e00      	cmp	r6, #0
 800fe50:	dd05      	ble.n	800fe5e <_dtoa_r+0x886>
 800fe52:	4629      	mov	r1, r5
 800fe54:	4632      	mov	r2, r6
 800fe56:	4648      	mov	r0, r9
 800fe58:	f000 fc22 	bl	80106a0 <__lshift>
 800fe5c:	4605      	mov	r5, r0
 800fe5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d058      	beq.n	800ff16 <_dtoa_r+0x93e>
 800fe64:	6869      	ldr	r1, [r5, #4]
 800fe66:	4648      	mov	r0, r9
 800fe68:	f000 fa0c 	bl	8010284 <_Balloc>
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	b928      	cbnz	r0, 800fe7c <_dtoa_r+0x8a4>
 800fe70:	4b82      	ldr	r3, [pc, #520]	@ (801007c <_dtoa_r+0xaa4>)
 800fe72:	4602      	mov	r2, r0
 800fe74:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fe78:	f7ff bbc7 	b.w	800f60a <_dtoa_r+0x32>
 800fe7c:	692a      	ldr	r2, [r5, #16]
 800fe7e:	3202      	adds	r2, #2
 800fe80:	0092      	lsls	r2, r2, #2
 800fe82:	f105 010c 	add.w	r1, r5, #12
 800fe86:	300c      	adds	r0, #12
 800fe88:	f001 f800 	bl	8010e8c <memcpy>
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	4631      	mov	r1, r6
 800fe90:	4648      	mov	r0, r9
 800fe92:	f000 fc05 	bl	80106a0 <__lshift>
 800fe96:	1c7b      	adds	r3, r7, #1
 800fe98:	9305      	str	r3, [sp, #20]
 800fe9a:	eb07 030b 	add.w	r3, r7, fp
 800fe9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fea0:	9b02      	ldr	r3, [sp, #8]
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	46a8      	mov	r8, r5
 800fea8:	9308      	str	r3, [sp, #32]
 800feaa:	4605      	mov	r5, r0
 800feac:	9b05      	ldr	r3, [sp, #20]
 800feae:	9801      	ldr	r0, [sp, #4]
 800feb0:	4621      	mov	r1, r4
 800feb2:	f103 3bff 	add.w	fp, r3, #4294967295
 800feb6:	f7ff fb04 	bl	800f4c2 <quorem>
 800feba:	4641      	mov	r1, r8
 800febc:	9002      	str	r0, [sp, #8]
 800febe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fec2:	9801      	ldr	r0, [sp, #4]
 800fec4:	f000 fc58 	bl	8010778 <__mcmp>
 800fec8:	462a      	mov	r2, r5
 800feca:	9006      	str	r0, [sp, #24]
 800fecc:	4621      	mov	r1, r4
 800fece:	4648      	mov	r0, r9
 800fed0:	f000 fc6e 	bl	80107b0 <__mdiff>
 800fed4:	68c2      	ldr	r2, [r0, #12]
 800fed6:	4606      	mov	r6, r0
 800fed8:	b9fa      	cbnz	r2, 800ff1a <_dtoa_r+0x942>
 800feda:	4601      	mov	r1, r0
 800fedc:	9801      	ldr	r0, [sp, #4]
 800fede:	f000 fc4b 	bl	8010778 <__mcmp>
 800fee2:	4602      	mov	r2, r0
 800fee4:	4631      	mov	r1, r6
 800fee6:	4648      	mov	r0, r9
 800fee8:	920a      	str	r2, [sp, #40]	@ 0x28
 800feea:	f000 fa0b 	bl	8010304 <_Bfree>
 800feee:	9b07      	ldr	r3, [sp, #28]
 800fef0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fef2:	9e05      	ldr	r6, [sp, #20]
 800fef4:	ea43 0102 	orr.w	r1, r3, r2
 800fef8:	9b08      	ldr	r3, [sp, #32]
 800fefa:	4319      	orrs	r1, r3
 800fefc:	d10f      	bne.n	800ff1e <_dtoa_r+0x946>
 800fefe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff02:	d028      	beq.n	800ff56 <_dtoa_r+0x97e>
 800ff04:	9b06      	ldr	r3, [sp, #24]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	dd02      	ble.n	800ff10 <_dtoa_r+0x938>
 800ff0a:	9b02      	ldr	r3, [sp, #8]
 800ff0c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ff10:	f88b a000 	strb.w	sl, [fp]
 800ff14:	e639      	b.n	800fb8a <_dtoa_r+0x5b2>
 800ff16:	4628      	mov	r0, r5
 800ff18:	e7bd      	b.n	800fe96 <_dtoa_r+0x8be>
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	e7e2      	b.n	800fee4 <_dtoa_r+0x90c>
 800ff1e:	9b06      	ldr	r3, [sp, #24]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	db04      	blt.n	800ff2e <_dtoa_r+0x956>
 800ff24:	9907      	ldr	r1, [sp, #28]
 800ff26:	430b      	orrs	r3, r1
 800ff28:	9908      	ldr	r1, [sp, #32]
 800ff2a:	430b      	orrs	r3, r1
 800ff2c:	d120      	bne.n	800ff70 <_dtoa_r+0x998>
 800ff2e:	2a00      	cmp	r2, #0
 800ff30:	ddee      	ble.n	800ff10 <_dtoa_r+0x938>
 800ff32:	9901      	ldr	r1, [sp, #4]
 800ff34:	2201      	movs	r2, #1
 800ff36:	4648      	mov	r0, r9
 800ff38:	f000 fbb2 	bl	80106a0 <__lshift>
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	9001      	str	r0, [sp, #4]
 800ff40:	f000 fc1a 	bl	8010778 <__mcmp>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	dc03      	bgt.n	800ff50 <_dtoa_r+0x978>
 800ff48:	d1e2      	bne.n	800ff10 <_dtoa_r+0x938>
 800ff4a:	f01a 0f01 	tst.w	sl, #1
 800ff4e:	d0df      	beq.n	800ff10 <_dtoa_r+0x938>
 800ff50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff54:	d1d9      	bne.n	800ff0a <_dtoa_r+0x932>
 800ff56:	2339      	movs	r3, #57	@ 0x39
 800ff58:	f88b 3000 	strb.w	r3, [fp]
 800ff5c:	4633      	mov	r3, r6
 800ff5e:	461e      	mov	r6, r3
 800ff60:	3b01      	subs	r3, #1
 800ff62:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ff66:	2a39      	cmp	r2, #57	@ 0x39
 800ff68:	d053      	beq.n	8010012 <_dtoa_r+0xa3a>
 800ff6a:	3201      	adds	r2, #1
 800ff6c:	701a      	strb	r2, [r3, #0]
 800ff6e:	e60c      	b.n	800fb8a <_dtoa_r+0x5b2>
 800ff70:	2a00      	cmp	r2, #0
 800ff72:	dd07      	ble.n	800ff84 <_dtoa_r+0x9ac>
 800ff74:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ff78:	d0ed      	beq.n	800ff56 <_dtoa_r+0x97e>
 800ff7a:	f10a 0301 	add.w	r3, sl, #1
 800ff7e:	f88b 3000 	strb.w	r3, [fp]
 800ff82:	e602      	b.n	800fb8a <_dtoa_r+0x5b2>
 800ff84:	9b05      	ldr	r3, [sp, #20]
 800ff86:	9a05      	ldr	r2, [sp, #20]
 800ff88:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ff8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d029      	beq.n	800ffe6 <_dtoa_r+0xa0e>
 800ff92:	9901      	ldr	r1, [sp, #4]
 800ff94:	2300      	movs	r3, #0
 800ff96:	220a      	movs	r2, #10
 800ff98:	4648      	mov	r0, r9
 800ff9a:	f000 f9d5 	bl	8010348 <__multadd>
 800ff9e:	45a8      	cmp	r8, r5
 800ffa0:	9001      	str	r0, [sp, #4]
 800ffa2:	f04f 0300 	mov.w	r3, #0
 800ffa6:	f04f 020a 	mov.w	r2, #10
 800ffaa:	4641      	mov	r1, r8
 800ffac:	4648      	mov	r0, r9
 800ffae:	d107      	bne.n	800ffc0 <_dtoa_r+0x9e8>
 800ffb0:	f000 f9ca 	bl	8010348 <__multadd>
 800ffb4:	4680      	mov	r8, r0
 800ffb6:	4605      	mov	r5, r0
 800ffb8:	9b05      	ldr	r3, [sp, #20]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	9305      	str	r3, [sp, #20]
 800ffbe:	e775      	b.n	800feac <_dtoa_r+0x8d4>
 800ffc0:	f000 f9c2 	bl	8010348 <__multadd>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4680      	mov	r8, r0
 800ffc8:	2300      	movs	r3, #0
 800ffca:	220a      	movs	r2, #10
 800ffcc:	4648      	mov	r0, r9
 800ffce:	f000 f9bb 	bl	8010348 <__multadd>
 800ffd2:	4605      	mov	r5, r0
 800ffd4:	e7f0      	b.n	800ffb8 <_dtoa_r+0x9e0>
 800ffd6:	f1bb 0f00 	cmp.w	fp, #0
 800ffda:	bfcc      	ite	gt
 800ffdc:	465e      	movgt	r6, fp
 800ffde:	2601      	movle	r6, #1
 800ffe0:	443e      	add	r6, r7
 800ffe2:	f04f 0800 	mov.w	r8, #0
 800ffe6:	9901      	ldr	r1, [sp, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	4648      	mov	r0, r9
 800ffec:	f000 fb58 	bl	80106a0 <__lshift>
 800fff0:	4621      	mov	r1, r4
 800fff2:	9001      	str	r0, [sp, #4]
 800fff4:	f000 fbc0 	bl	8010778 <__mcmp>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	dcaf      	bgt.n	800ff5c <_dtoa_r+0x984>
 800fffc:	d102      	bne.n	8010004 <_dtoa_r+0xa2c>
 800fffe:	f01a 0f01 	tst.w	sl, #1
 8010002:	d1ab      	bne.n	800ff5c <_dtoa_r+0x984>
 8010004:	4633      	mov	r3, r6
 8010006:	461e      	mov	r6, r3
 8010008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801000c:	2a30      	cmp	r2, #48	@ 0x30
 801000e:	d0fa      	beq.n	8010006 <_dtoa_r+0xa2e>
 8010010:	e5bb      	b.n	800fb8a <_dtoa_r+0x5b2>
 8010012:	429f      	cmp	r7, r3
 8010014:	d1a3      	bne.n	800ff5e <_dtoa_r+0x986>
 8010016:	9b04      	ldr	r3, [sp, #16]
 8010018:	3301      	adds	r3, #1
 801001a:	9304      	str	r3, [sp, #16]
 801001c:	2331      	movs	r3, #49	@ 0x31
 801001e:	703b      	strb	r3, [r7, #0]
 8010020:	e5b3      	b.n	800fb8a <_dtoa_r+0x5b2>
 8010022:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010024:	4f16      	ldr	r7, [pc, #88]	@ (8010080 <_dtoa_r+0xaa8>)
 8010026:	b11b      	cbz	r3, 8010030 <_dtoa_r+0xa58>
 8010028:	f107 0308 	add.w	r3, r7, #8
 801002c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801002e:	6013      	str	r3, [r2, #0]
 8010030:	4638      	mov	r0, r7
 8010032:	b011      	add	sp, #68	@ 0x44
 8010034:	ecbd 8b02 	vpop	{d8}
 8010038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801003c:	9b07      	ldr	r3, [sp, #28]
 801003e:	2b01      	cmp	r3, #1
 8010040:	f77f ae36 	ble.w	800fcb0 <_dtoa_r+0x6d8>
 8010044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010046:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010048:	2001      	movs	r0, #1
 801004a:	e656      	b.n	800fcfa <_dtoa_r+0x722>
 801004c:	f1bb 0f00 	cmp.w	fp, #0
 8010050:	f77f aed7 	ble.w	800fe02 <_dtoa_r+0x82a>
 8010054:	463e      	mov	r6, r7
 8010056:	9801      	ldr	r0, [sp, #4]
 8010058:	4621      	mov	r1, r4
 801005a:	f7ff fa32 	bl	800f4c2 <quorem>
 801005e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010062:	f806 ab01 	strb.w	sl, [r6], #1
 8010066:	1bf2      	subs	r2, r6, r7
 8010068:	4593      	cmp	fp, r2
 801006a:	ddb4      	ble.n	800ffd6 <_dtoa_r+0x9fe>
 801006c:	9901      	ldr	r1, [sp, #4]
 801006e:	2300      	movs	r3, #0
 8010070:	220a      	movs	r2, #10
 8010072:	4648      	mov	r0, r9
 8010074:	f000 f968 	bl	8010348 <__multadd>
 8010078:	9001      	str	r0, [sp, #4]
 801007a:	e7ec      	b.n	8010056 <_dtoa_r+0xa7e>
 801007c:	080111f4 	.word	0x080111f4
 8010080:	08011178 	.word	0x08011178

08010084 <_free_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4605      	mov	r5, r0
 8010088:	2900      	cmp	r1, #0
 801008a:	d041      	beq.n	8010110 <_free_r+0x8c>
 801008c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010090:	1f0c      	subs	r4, r1, #4
 8010092:	2b00      	cmp	r3, #0
 8010094:	bfb8      	it	lt
 8010096:	18e4      	addlt	r4, r4, r3
 8010098:	f000 f8e8 	bl	801026c <__malloc_lock>
 801009c:	4a1d      	ldr	r2, [pc, #116]	@ (8010114 <_free_r+0x90>)
 801009e:	6813      	ldr	r3, [r2, #0]
 80100a0:	b933      	cbnz	r3, 80100b0 <_free_r+0x2c>
 80100a2:	6063      	str	r3, [r4, #4]
 80100a4:	6014      	str	r4, [r2, #0]
 80100a6:	4628      	mov	r0, r5
 80100a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100ac:	f000 b8e4 	b.w	8010278 <__malloc_unlock>
 80100b0:	42a3      	cmp	r3, r4
 80100b2:	d908      	bls.n	80100c6 <_free_r+0x42>
 80100b4:	6820      	ldr	r0, [r4, #0]
 80100b6:	1821      	adds	r1, r4, r0
 80100b8:	428b      	cmp	r3, r1
 80100ba:	bf01      	itttt	eq
 80100bc:	6819      	ldreq	r1, [r3, #0]
 80100be:	685b      	ldreq	r3, [r3, #4]
 80100c0:	1809      	addeq	r1, r1, r0
 80100c2:	6021      	streq	r1, [r4, #0]
 80100c4:	e7ed      	b.n	80100a2 <_free_r+0x1e>
 80100c6:	461a      	mov	r2, r3
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	b10b      	cbz	r3, 80100d0 <_free_r+0x4c>
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	d9fa      	bls.n	80100c6 <_free_r+0x42>
 80100d0:	6811      	ldr	r1, [r2, #0]
 80100d2:	1850      	adds	r0, r2, r1
 80100d4:	42a0      	cmp	r0, r4
 80100d6:	d10b      	bne.n	80100f0 <_free_r+0x6c>
 80100d8:	6820      	ldr	r0, [r4, #0]
 80100da:	4401      	add	r1, r0
 80100dc:	1850      	adds	r0, r2, r1
 80100de:	4283      	cmp	r3, r0
 80100e0:	6011      	str	r1, [r2, #0]
 80100e2:	d1e0      	bne.n	80100a6 <_free_r+0x22>
 80100e4:	6818      	ldr	r0, [r3, #0]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	6053      	str	r3, [r2, #4]
 80100ea:	4408      	add	r0, r1
 80100ec:	6010      	str	r0, [r2, #0]
 80100ee:	e7da      	b.n	80100a6 <_free_r+0x22>
 80100f0:	d902      	bls.n	80100f8 <_free_r+0x74>
 80100f2:	230c      	movs	r3, #12
 80100f4:	602b      	str	r3, [r5, #0]
 80100f6:	e7d6      	b.n	80100a6 <_free_r+0x22>
 80100f8:	6820      	ldr	r0, [r4, #0]
 80100fa:	1821      	adds	r1, r4, r0
 80100fc:	428b      	cmp	r3, r1
 80100fe:	bf04      	itt	eq
 8010100:	6819      	ldreq	r1, [r3, #0]
 8010102:	685b      	ldreq	r3, [r3, #4]
 8010104:	6063      	str	r3, [r4, #4]
 8010106:	bf04      	itt	eq
 8010108:	1809      	addeq	r1, r1, r0
 801010a:	6021      	streq	r1, [r4, #0]
 801010c:	6054      	str	r4, [r2, #4]
 801010e:	e7ca      	b.n	80100a6 <_free_r+0x22>
 8010110:	bd38      	pop	{r3, r4, r5, pc}
 8010112:	bf00      	nop
 8010114:	24000cf8 	.word	0x24000cf8

08010118 <malloc>:
 8010118:	4b02      	ldr	r3, [pc, #8]	@ (8010124 <malloc+0xc>)
 801011a:	4601      	mov	r1, r0
 801011c:	6818      	ldr	r0, [r3, #0]
 801011e:	f000 b825 	b.w	801016c <_malloc_r>
 8010122:	bf00      	nop
 8010124:	24000048 	.word	0x24000048

08010128 <sbrk_aligned>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	4e0f      	ldr	r6, [pc, #60]	@ (8010168 <sbrk_aligned+0x40>)
 801012c:	460c      	mov	r4, r1
 801012e:	6831      	ldr	r1, [r6, #0]
 8010130:	4605      	mov	r5, r0
 8010132:	b911      	cbnz	r1, 801013a <sbrk_aligned+0x12>
 8010134:	f000 fe9a 	bl	8010e6c <_sbrk_r>
 8010138:	6030      	str	r0, [r6, #0]
 801013a:	4621      	mov	r1, r4
 801013c:	4628      	mov	r0, r5
 801013e:	f000 fe95 	bl	8010e6c <_sbrk_r>
 8010142:	1c43      	adds	r3, r0, #1
 8010144:	d103      	bne.n	801014e <sbrk_aligned+0x26>
 8010146:	f04f 34ff 	mov.w	r4, #4294967295
 801014a:	4620      	mov	r0, r4
 801014c:	bd70      	pop	{r4, r5, r6, pc}
 801014e:	1cc4      	adds	r4, r0, #3
 8010150:	f024 0403 	bic.w	r4, r4, #3
 8010154:	42a0      	cmp	r0, r4
 8010156:	d0f8      	beq.n	801014a <sbrk_aligned+0x22>
 8010158:	1a21      	subs	r1, r4, r0
 801015a:	4628      	mov	r0, r5
 801015c:	f000 fe86 	bl	8010e6c <_sbrk_r>
 8010160:	3001      	adds	r0, #1
 8010162:	d1f2      	bne.n	801014a <sbrk_aligned+0x22>
 8010164:	e7ef      	b.n	8010146 <sbrk_aligned+0x1e>
 8010166:	bf00      	nop
 8010168:	24000cf4 	.word	0x24000cf4

0801016c <_malloc_r>:
 801016c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010170:	1ccd      	adds	r5, r1, #3
 8010172:	f025 0503 	bic.w	r5, r5, #3
 8010176:	3508      	adds	r5, #8
 8010178:	2d0c      	cmp	r5, #12
 801017a:	bf38      	it	cc
 801017c:	250c      	movcc	r5, #12
 801017e:	2d00      	cmp	r5, #0
 8010180:	4606      	mov	r6, r0
 8010182:	db01      	blt.n	8010188 <_malloc_r+0x1c>
 8010184:	42a9      	cmp	r1, r5
 8010186:	d904      	bls.n	8010192 <_malloc_r+0x26>
 8010188:	230c      	movs	r3, #12
 801018a:	6033      	str	r3, [r6, #0]
 801018c:	2000      	movs	r0, #0
 801018e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010268 <_malloc_r+0xfc>
 8010196:	f000 f869 	bl	801026c <__malloc_lock>
 801019a:	f8d8 3000 	ldr.w	r3, [r8]
 801019e:	461c      	mov	r4, r3
 80101a0:	bb44      	cbnz	r4, 80101f4 <_malloc_r+0x88>
 80101a2:	4629      	mov	r1, r5
 80101a4:	4630      	mov	r0, r6
 80101a6:	f7ff ffbf 	bl	8010128 <sbrk_aligned>
 80101aa:	1c43      	adds	r3, r0, #1
 80101ac:	4604      	mov	r4, r0
 80101ae:	d158      	bne.n	8010262 <_malloc_r+0xf6>
 80101b0:	f8d8 4000 	ldr.w	r4, [r8]
 80101b4:	4627      	mov	r7, r4
 80101b6:	2f00      	cmp	r7, #0
 80101b8:	d143      	bne.n	8010242 <_malloc_r+0xd6>
 80101ba:	2c00      	cmp	r4, #0
 80101bc:	d04b      	beq.n	8010256 <_malloc_r+0xea>
 80101be:	6823      	ldr	r3, [r4, #0]
 80101c0:	4639      	mov	r1, r7
 80101c2:	4630      	mov	r0, r6
 80101c4:	eb04 0903 	add.w	r9, r4, r3
 80101c8:	f000 fe50 	bl	8010e6c <_sbrk_r>
 80101cc:	4581      	cmp	r9, r0
 80101ce:	d142      	bne.n	8010256 <_malloc_r+0xea>
 80101d0:	6821      	ldr	r1, [r4, #0]
 80101d2:	1a6d      	subs	r5, r5, r1
 80101d4:	4629      	mov	r1, r5
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7ff ffa6 	bl	8010128 <sbrk_aligned>
 80101dc:	3001      	adds	r0, #1
 80101de:	d03a      	beq.n	8010256 <_malloc_r+0xea>
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	442b      	add	r3, r5
 80101e4:	6023      	str	r3, [r4, #0]
 80101e6:	f8d8 3000 	ldr.w	r3, [r8]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	bb62      	cbnz	r2, 8010248 <_malloc_r+0xdc>
 80101ee:	f8c8 7000 	str.w	r7, [r8]
 80101f2:	e00f      	b.n	8010214 <_malloc_r+0xa8>
 80101f4:	6822      	ldr	r2, [r4, #0]
 80101f6:	1b52      	subs	r2, r2, r5
 80101f8:	d420      	bmi.n	801023c <_malloc_r+0xd0>
 80101fa:	2a0b      	cmp	r2, #11
 80101fc:	d917      	bls.n	801022e <_malloc_r+0xc2>
 80101fe:	1961      	adds	r1, r4, r5
 8010200:	42a3      	cmp	r3, r4
 8010202:	6025      	str	r5, [r4, #0]
 8010204:	bf18      	it	ne
 8010206:	6059      	strne	r1, [r3, #4]
 8010208:	6863      	ldr	r3, [r4, #4]
 801020a:	bf08      	it	eq
 801020c:	f8c8 1000 	streq.w	r1, [r8]
 8010210:	5162      	str	r2, [r4, r5]
 8010212:	604b      	str	r3, [r1, #4]
 8010214:	4630      	mov	r0, r6
 8010216:	f000 f82f 	bl	8010278 <__malloc_unlock>
 801021a:	f104 000b 	add.w	r0, r4, #11
 801021e:	1d23      	adds	r3, r4, #4
 8010220:	f020 0007 	bic.w	r0, r0, #7
 8010224:	1ac2      	subs	r2, r0, r3
 8010226:	bf1c      	itt	ne
 8010228:	1a1b      	subne	r3, r3, r0
 801022a:	50a3      	strne	r3, [r4, r2]
 801022c:	e7af      	b.n	801018e <_malloc_r+0x22>
 801022e:	6862      	ldr	r2, [r4, #4]
 8010230:	42a3      	cmp	r3, r4
 8010232:	bf0c      	ite	eq
 8010234:	f8c8 2000 	streq.w	r2, [r8]
 8010238:	605a      	strne	r2, [r3, #4]
 801023a:	e7eb      	b.n	8010214 <_malloc_r+0xa8>
 801023c:	4623      	mov	r3, r4
 801023e:	6864      	ldr	r4, [r4, #4]
 8010240:	e7ae      	b.n	80101a0 <_malloc_r+0x34>
 8010242:	463c      	mov	r4, r7
 8010244:	687f      	ldr	r7, [r7, #4]
 8010246:	e7b6      	b.n	80101b6 <_malloc_r+0x4a>
 8010248:	461a      	mov	r2, r3
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	42a3      	cmp	r3, r4
 801024e:	d1fb      	bne.n	8010248 <_malloc_r+0xdc>
 8010250:	2300      	movs	r3, #0
 8010252:	6053      	str	r3, [r2, #4]
 8010254:	e7de      	b.n	8010214 <_malloc_r+0xa8>
 8010256:	230c      	movs	r3, #12
 8010258:	6033      	str	r3, [r6, #0]
 801025a:	4630      	mov	r0, r6
 801025c:	f000 f80c 	bl	8010278 <__malloc_unlock>
 8010260:	e794      	b.n	801018c <_malloc_r+0x20>
 8010262:	6005      	str	r5, [r0, #0]
 8010264:	e7d6      	b.n	8010214 <_malloc_r+0xa8>
 8010266:	bf00      	nop
 8010268:	24000cf8 	.word	0x24000cf8

0801026c <__malloc_lock>:
 801026c:	4801      	ldr	r0, [pc, #4]	@ (8010274 <__malloc_lock+0x8>)
 801026e:	f7ff b926 	b.w	800f4be <__retarget_lock_acquire_recursive>
 8010272:	bf00      	nop
 8010274:	24000cf0 	.word	0x24000cf0

08010278 <__malloc_unlock>:
 8010278:	4801      	ldr	r0, [pc, #4]	@ (8010280 <__malloc_unlock+0x8>)
 801027a:	f7ff b921 	b.w	800f4c0 <__retarget_lock_release_recursive>
 801027e:	bf00      	nop
 8010280:	24000cf0 	.word	0x24000cf0

08010284 <_Balloc>:
 8010284:	b570      	push	{r4, r5, r6, lr}
 8010286:	69c6      	ldr	r6, [r0, #28]
 8010288:	4604      	mov	r4, r0
 801028a:	460d      	mov	r5, r1
 801028c:	b976      	cbnz	r6, 80102ac <_Balloc+0x28>
 801028e:	2010      	movs	r0, #16
 8010290:	f7ff ff42 	bl	8010118 <malloc>
 8010294:	4602      	mov	r2, r0
 8010296:	61e0      	str	r0, [r4, #28]
 8010298:	b920      	cbnz	r0, 80102a4 <_Balloc+0x20>
 801029a:	4b18      	ldr	r3, [pc, #96]	@ (80102fc <_Balloc+0x78>)
 801029c:	4818      	ldr	r0, [pc, #96]	@ (8010300 <_Balloc+0x7c>)
 801029e:	216b      	movs	r1, #107	@ 0x6b
 80102a0:	f000 fe02 	bl	8010ea8 <__assert_func>
 80102a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102a8:	6006      	str	r6, [r0, #0]
 80102aa:	60c6      	str	r6, [r0, #12]
 80102ac:	69e6      	ldr	r6, [r4, #28]
 80102ae:	68f3      	ldr	r3, [r6, #12]
 80102b0:	b183      	cbz	r3, 80102d4 <_Balloc+0x50>
 80102b2:	69e3      	ldr	r3, [r4, #28]
 80102b4:	68db      	ldr	r3, [r3, #12]
 80102b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102ba:	b9b8      	cbnz	r0, 80102ec <_Balloc+0x68>
 80102bc:	2101      	movs	r1, #1
 80102be:	fa01 f605 	lsl.w	r6, r1, r5
 80102c2:	1d72      	adds	r2, r6, #5
 80102c4:	0092      	lsls	r2, r2, #2
 80102c6:	4620      	mov	r0, r4
 80102c8:	f000 fe0c 	bl	8010ee4 <_calloc_r>
 80102cc:	b160      	cbz	r0, 80102e8 <_Balloc+0x64>
 80102ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102d2:	e00e      	b.n	80102f2 <_Balloc+0x6e>
 80102d4:	2221      	movs	r2, #33	@ 0x21
 80102d6:	2104      	movs	r1, #4
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 fe03 	bl	8010ee4 <_calloc_r>
 80102de:	69e3      	ldr	r3, [r4, #28]
 80102e0:	60f0      	str	r0, [r6, #12]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1e4      	bne.n	80102b2 <_Balloc+0x2e>
 80102e8:	2000      	movs	r0, #0
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	6802      	ldr	r2, [r0, #0]
 80102ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102f2:	2300      	movs	r3, #0
 80102f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102f8:	e7f7      	b.n	80102ea <_Balloc+0x66>
 80102fa:	bf00      	nop
 80102fc:	08011185 	.word	0x08011185
 8010300:	08011205 	.word	0x08011205

08010304 <_Bfree>:
 8010304:	b570      	push	{r4, r5, r6, lr}
 8010306:	69c6      	ldr	r6, [r0, #28]
 8010308:	4605      	mov	r5, r0
 801030a:	460c      	mov	r4, r1
 801030c:	b976      	cbnz	r6, 801032c <_Bfree+0x28>
 801030e:	2010      	movs	r0, #16
 8010310:	f7ff ff02 	bl	8010118 <malloc>
 8010314:	4602      	mov	r2, r0
 8010316:	61e8      	str	r0, [r5, #28]
 8010318:	b920      	cbnz	r0, 8010324 <_Bfree+0x20>
 801031a:	4b09      	ldr	r3, [pc, #36]	@ (8010340 <_Bfree+0x3c>)
 801031c:	4809      	ldr	r0, [pc, #36]	@ (8010344 <_Bfree+0x40>)
 801031e:	218f      	movs	r1, #143	@ 0x8f
 8010320:	f000 fdc2 	bl	8010ea8 <__assert_func>
 8010324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010328:	6006      	str	r6, [r0, #0]
 801032a:	60c6      	str	r6, [r0, #12]
 801032c:	b13c      	cbz	r4, 801033e <_Bfree+0x3a>
 801032e:	69eb      	ldr	r3, [r5, #28]
 8010330:	6862      	ldr	r2, [r4, #4]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010338:	6021      	str	r1, [r4, #0]
 801033a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	08011185 	.word	0x08011185
 8010344:	08011205 	.word	0x08011205

08010348 <__multadd>:
 8010348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801034c:	690d      	ldr	r5, [r1, #16]
 801034e:	4607      	mov	r7, r0
 8010350:	460c      	mov	r4, r1
 8010352:	461e      	mov	r6, r3
 8010354:	f101 0c14 	add.w	ip, r1, #20
 8010358:	2000      	movs	r0, #0
 801035a:	f8dc 3000 	ldr.w	r3, [ip]
 801035e:	b299      	uxth	r1, r3
 8010360:	fb02 6101 	mla	r1, r2, r1, r6
 8010364:	0c1e      	lsrs	r6, r3, #16
 8010366:	0c0b      	lsrs	r3, r1, #16
 8010368:	fb02 3306 	mla	r3, r2, r6, r3
 801036c:	b289      	uxth	r1, r1
 801036e:	3001      	adds	r0, #1
 8010370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010374:	4285      	cmp	r5, r0
 8010376:	f84c 1b04 	str.w	r1, [ip], #4
 801037a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801037e:	dcec      	bgt.n	801035a <__multadd+0x12>
 8010380:	b30e      	cbz	r6, 80103c6 <__multadd+0x7e>
 8010382:	68a3      	ldr	r3, [r4, #8]
 8010384:	42ab      	cmp	r3, r5
 8010386:	dc19      	bgt.n	80103bc <__multadd+0x74>
 8010388:	6861      	ldr	r1, [r4, #4]
 801038a:	4638      	mov	r0, r7
 801038c:	3101      	adds	r1, #1
 801038e:	f7ff ff79 	bl	8010284 <_Balloc>
 8010392:	4680      	mov	r8, r0
 8010394:	b928      	cbnz	r0, 80103a2 <__multadd+0x5a>
 8010396:	4602      	mov	r2, r0
 8010398:	4b0c      	ldr	r3, [pc, #48]	@ (80103cc <__multadd+0x84>)
 801039a:	480d      	ldr	r0, [pc, #52]	@ (80103d0 <__multadd+0x88>)
 801039c:	21ba      	movs	r1, #186	@ 0xba
 801039e:	f000 fd83 	bl	8010ea8 <__assert_func>
 80103a2:	6922      	ldr	r2, [r4, #16]
 80103a4:	3202      	adds	r2, #2
 80103a6:	f104 010c 	add.w	r1, r4, #12
 80103aa:	0092      	lsls	r2, r2, #2
 80103ac:	300c      	adds	r0, #12
 80103ae:	f000 fd6d 	bl	8010e8c <memcpy>
 80103b2:	4621      	mov	r1, r4
 80103b4:	4638      	mov	r0, r7
 80103b6:	f7ff ffa5 	bl	8010304 <_Bfree>
 80103ba:	4644      	mov	r4, r8
 80103bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103c0:	3501      	adds	r5, #1
 80103c2:	615e      	str	r6, [r3, #20]
 80103c4:	6125      	str	r5, [r4, #16]
 80103c6:	4620      	mov	r0, r4
 80103c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103cc:	080111f4 	.word	0x080111f4
 80103d0:	08011205 	.word	0x08011205

080103d4 <__hi0bits>:
 80103d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80103d8:	4603      	mov	r3, r0
 80103da:	bf36      	itet	cc
 80103dc:	0403      	lslcc	r3, r0, #16
 80103de:	2000      	movcs	r0, #0
 80103e0:	2010      	movcc	r0, #16
 80103e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80103e6:	bf3c      	itt	cc
 80103e8:	021b      	lslcc	r3, r3, #8
 80103ea:	3008      	addcc	r0, #8
 80103ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103f0:	bf3c      	itt	cc
 80103f2:	011b      	lslcc	r3, r3, #4
 80103f4:	3004      	addcc	r0, #4
 80103f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103fa:	bf3c      	itt	cc
 80103fc:	009b      	lslcc	r3, r3, #2
 80103fe:	3002      	addcc	r0, #2
 8010400:	2b00      	cmp	r3, #0
 8010402:	db05      	blt.n	8010410 <__hi0bits+0x3c>
 8010404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010408:	f100 0001 	add.w	r0, r0, #1
 801040c:	bf08      	it	eq
 801040e:	2020      	moveq	r0, #32
 8010410:	4770      	bx	lr

08010412 <__lo0bits>:
 8010412:	6803      	ldr	r3, [r0, #0]
 8010414:	4602      	mov	r2, r0
 8010416:	f013 0007 	ands.w	r0, r3, #7
 801041a:	d00b      	beq.n	8010434 <__lo0bits+0x22>
 801041c:	07d9      	lsls	r1, r3, #31
 801041e:	d421      	bmi.n	8010464 <__lo0bits+0x52>
 8010420:	0798      	lsls	r0, r3, #30
 8010422:	bf49      	itett	mi
 8010424:	085b      	lsrmi	r3, r3, #1
 8010426:	089b      	lsrpl	r3, r3, #2
 8010428:	2001      	movmi	r0, #1
 801042a:	6013      	strmi	r3, [r2, #0]
 801042c:	bf5c      	itt	pl
 801042e:	6013      	strpl	r3, [r2, #0]
 8010430:	2002      	movpl	r0, #2
 8010432:	4770      	bx	lr
 8010434:	b299      	uxth	r1, r3
 8010436:	b909      	cbnz	r1, 801043c <__lo0bits+0x2a>
 8010438:	0c1b      	lsrs	r3, r3, #16
 801043a:	2010      	movs	r0, #16
 801043c:	b2d9      	uxtb	r1, r3
 801043e:	b909      	cbnz	r1, 8010444 <__lo0bits+0x32>
 8010440:	3008      	adds	r0, #8
 8010442:	0a1b      	lsrs	r3, r3, #8
 8010444:	0719      	lsls	r1, r3, #28
 8010446:	bf04      	itt	eq
 8010448:	091b      	lsreq	r3, r3, #4
 801044a:	3004      	addeq	r0, #4
 801044c:	0799      	lsls	r1, r3, #30
 801044e:	bf04      	itt	eq
 8010450:	089b      	lsreq	r3, r3, #2
 8010452:	3002      	addeq	r0, #2
 8010454:	07d9      	lsls	r1, r3, #31
 8010456:	d403      	bmi.n	8010460 <__lo0bits+0x4e>
 8010458:	085b      	lsrs	r3, r3, #1
 801045a:	f100 0001 	add.w	r0, r0, #1
 801045e:	d003      	beq.n	8010468 <__lo0bits+0x56>
 8010460:	6013      	str	r3, [r2, #0]
 8010462:	4770      	bx	lr
 8010464:	2000      	movs	r0, #0
 8010466:	4770      	bx	lr
 8010468:	2020      	movs	r0, #32
 801046a:	4770      	bx	lr

0801046c <__i2b>:
 801046c:	b510      	push	{r4, lr}
 801046e:	460c      	mov	r4, r1
 8010470:	2101      	movs	r1, #1
 8010472:	f7ff ff07 	bl	8010284 <_Balloc>
 8010476:	4602      	mov	r2, r0
 8010478:	b928      	cbnz	r0, 8010486 <__i2b+0x1a>
 801047a:	4b05      	ldr	r3, [pc, #20]	@ (8010490 <__i2b+0x24>)
 801047c:	4805      	ldr	r0, [pc, #20]	@ (8010494 <__i2b+0x28>)
 801047e:	f240 1145 	movw	r1, #325	@ 0x145
 8010482:	f000 fd11 	bl	8010ea8 <__assert_func>
 8010486:	2301      	movs	r3, #1
 8010488:	6144      	str	r4, [r0, #20]
 801048a:	6103      	str	r3, [r0, #16]
 801048c:	bd10      	pop	{r4, pc}
 801048e:	bf00      	nop
 8010490:	080111f4 	.word	0x080111f4
 8010494:	08011205 	.word	0x08011205

08010498 <__multiply>:
 8010498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801049c:	4614      	mov	r4, r2
 801049e:	690a      	ldr	r2, [r1, #16]
 80104a0:	6923      	ldr	r3, [r4, #16]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	bfa8      	it	ge
 80104a6:	4623      	movge	r3, r4
 80104a8:	460f      	mov	r7, r1
 80104aa:	bfa4      	itt	ge
 80104ac:	460c      	movge	r4, r1
 80104ae:	461f      	movge	r7, r3
 80104b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80104b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80104b8:	68a3      	ldr	r3, [r4, #8]
 80104ba:	6861      	ldr	r1, [r4, #4]
 80104bc:	eb0a 0609 	add.w	r6, sl, r9
 80104c0:	42b3      	cmp	r3, r6
 80104c2:	b085      	sub	sp, #20
 80104c4:	bfb8      	it	lt
 80104c6:	3101      	addlt	r1, #1
 80104c8:	f7ff fedc 	bl	8010284 <_Balloc>
 80104cc:	b930      	cbnz	r0, 80104dc <__multiply+0x44>
 80104ce:	4602      	mov	r2, r0
 80104d0:	4b44      	ldr	r3, [pc, #272]	@ (80105e4 <__multiply+0x14c>)
 80104d2:	4845      	ldr	r0, [pc, #276]	@ (80105e8 <__multiply+0x150>)
 80104d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80104d8:	f000 fce6 	bl	8010ea8 <__assert_func>
 80104dc:	f100 0514 	add.w	r5, r0, #20
 80104e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80104e4:	462b      	mov	r3, r5
 80104e6:	2200      	movs	r2, #0
 80104e8:	4543      	cmp	r3, r8
 80104ea:	d321      	bcc.n	8010530 <__multiply+0x98>
 80104ec:	f107 0114 	add.w	r1, r7, #20
 80104f0:	f104 0214 	add.w	r2, r4, #20
 80104f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80104f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80104fc:	9302      	str	r3, [sp, #8]
 80104fe:	1b13      	subs	r3, r2, r4
 8010500:	3b15      	subs	r3, #21
 8010502:	f023 0303 	bic.w	r3, r3, #3
 8010506:	3304      	adds	r3, #4
 8010508:	f104 0715 	add.w	r7, r4, #21
 801050c:	42ba      	cmp	r2, r7
 801050e:	bf38      	it	cc
 8010510:	2304      	movcc	r3, #4
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	9b02      	ldr	r3, [sp, #8]
 8010516:	9103      	str	r1, [sp, #12]
 8010518:	428b      	cmp	r3, r1
 801051a:	d80c      	bhi.n	8010536 <__multiply+0x9e>
 801051c:	2e00      	cmp	r6, #0
 801051e:	dd03      	ble.n	8010528 <__multiply+0x90>
 8010520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010524:	2b00      	cmp	r3, #0
 8010526:	d05b      	beq.n	80105e0 <__multiply+0x148>
 8010528:	6106      	str	r6, [r0, #16]
 801052a:	b005      	add	sp, #20
 801052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010530:	f843 2b04 	str.w	r2, [r3], #4
 8010534:	e7d8      	b.n	80104e8 <__multiply+0x50>
 8010536:	f8b1 a000 	ldrh.w	sl, [r1]
 801053a:	f1ba 0f00 	cmp.w	sl, #0
 801053e:	d024      	beq.n	801058a <__multiply+0xf2>
 8010540:	f104 0e14 	add.w	lr, r4, #20
 8010544:	46a9      	mov	r9, r5
 8010546:	f04f 0c00 	mov.w	ip, #0
 801054a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801054e:	f8d9 3000 	ldr.w	r3, [r9]
 8010552:	fa1f fb87 	uxth.w	fp, r7
 8010556:	b29b      	uxth	r3, r3
 8010558:	fb0a 330b 	mla	r3, sl, fp, r3
 801055c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010560:	f8d9 7000 	ldr.w	r7, [r9]
 8010564:	4463      	add	r3, ip
 8010566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801056a:	fb0a c70b 	mla	r7, sl, fp, ip
 801056e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010572:	b29b      	uxth	r3, r3
 8010574:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010578:	4572      	cmp	r2, lr
 801057a:	f849 3b04 	str.w	r3, [r9], #4
 801057e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010582:	d8e2      	bhi.n	801054a <__multiply+0xb2>
 8010584:	9b01      	ldr	r3, [sp, #4]
 8010586:	f845 c003 	str.w	ip, [r5, r3]
 801058a:	9b03      	ldr	r3, [sp, #12]
 801058c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010590:	3104      	adds	r1, #4
 8010592:	f1b9 0f00 	cmp.w	r9, #0
 8010596:	d021      	beq.n	80105dc <__multiply+0x144>
 8010598:	682b      	ldr	r3, [r5, #0]
 801059a:	f104 0c14 	add.w	ip, r4, #20
 801059e:	46ae      	mov	lr, r5
 80105a0:	f04f 0a00 	mov.w	sl, #0
 80105a4:	f8bc b000 	ldrh.w	fp, [ip]
 80105a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80105ac:	fb09 770b 	mla	r7, r9, fp, r7
 80105b0:	4457      	add	r7, sl
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80105b8:	f84e 3b04 	str.w	r3, [lr], #4
 80105bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80105c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105c4:	f8be 3000 	ldrh.w	r3, [lr]
 80105c8:	fb09 330a 	mla	r3, r9, sl, r3
 80105cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80105d0:	4562      	cmp	r2, ip
 80105d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105d6:	d8e5      	bhi.n	80105a4 <__multiply+0x10c>
 80105d8:	9f01      	ldr	r7, [sp, #4]
 80105da:	51eb      	str	r3, [r5, r7]
 80105dc:	3504      	adds	r5, #4
 80105de:	e799      	b.n	8010514 <__multiply+0x7c>
 80105e0:	3e01      	subs	r6, #1
 80105e2:	e79b      	b.n	801051c <__multiply+0x84>
 80105e4:	080111f4 	.word	0x080111f4
 80105e8:	08011205 	.word	0x08011205

080105ec <__pow5mult>:
 80105ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f0:	4615      	mov	r5, r2
 80105f2:	f012 0203 	ands.w	r2, r2, #3
 80105f6:	4607      	mov	r7, r0
 80105f8:	460e      	mov	r6, r1
 80105fa:	d007      	beq.n	801060c <__pow5mult+0x20>
 80105fc:	4c25      	ldr	r4, [pc, #148]	@ (8010694 <__pow5mult+0xa8>)
 80105fe:	3a01      	subs	r2, #1
 8010600:	2300      	movs	r3, #0
 8010602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010606:	f7ff fe9f 	bl	8010348 <__multadd>
 801060a:	4606      	mov	r6, r0
 801060c:	10ad      	asrs	r5, r5, #2
 801060e:	d03d      	beq.n	801068c <__pow5mult+0xa0>
 8010610:	69fc      	ldr	r4, [r7, #28]
 8010612:	b97c      	cbnz	r4, 8010634 <__pow5mult+0x48>
 8010614:	2010      	movs	r0, #16
 8010616:	f7ff fd7f 	bl	8010118 <malloc>
 801061a:	4602      	mov	r2, r0
 801061c:	61f8      	str	r0, [r7, #28]
 801061e:	b928      	cbnz	r0, 801062c <__pow5mult+0x40>
 8010620:	4b1d      	ldr	r3, [pc, #116]	@ (8010698 <__pow5mult+0xac>)
 8010622:	481e      	ldr	r0, [pc, #120]	@ (801069c <__pow5mult+0xb0>)
 8010624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010628:	f000 fc3e 	bl	8010ea8 <__assert_func>
 801062c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010630:	6004      	str	r4, [r0, #0]
 8010632:	60c4      	str	r4, [r0, #12]
 8010634:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801063c:	b94c      	cbnz	r4, 8010652 <__pow5mult+0x66>
 801063e:	f240 2171 	movw	r1, #625	@ 0x271
 8010642:	4638      	mov	r0, r7
 8010644:	f7ff ff12 	bl	801046c <__i2b>
 8010648:	2300      	movs	r3, #0
 801064a:	f8c8 0008 	str.w	r0, [r8, #8]
 801064e:	4604      	mov	r4, r0
 8010650:	6003      	str	r3, [r0, #0]
 8010652:	f04f 0900 	mov.w	r9, #0
 8010656:	07eb      	lsls	r3, r5, #31
 8010658:	d50a      	bpl.n	8010670 <__pow5mult+0x84>
 801065a:	4631      	mov	r1, r6
 801065c:	4622      	mov	r2, r4
 801065e:	4638      	mov	r0, r7
 8010660:	f7ff ff1a 	bl	8010498 <__multiply>
 8010664:	4631      	mov	r1, r6
 8010666:	4680      	mov	r8, r0
 8010668:	4638      	mov	r0, r7
 801066a:	f7ff fe4b 	bl	8010304 <_Bfree>
 801066e:	4646      	mov	r6, r8
 8010670:	106d      	asrs	r5, r5, #1
 8010672:	d00b      	beq.n	801068c <__pow5mult+0xa0>
 8010674:	6820      	ldr	r0, [r4, #0]
 8010676:	b938      	cbnz	r0, 8010688 <__pow5mult+0x9c>
 8010678:	4622      	mov	r2, r4
 801067a:	4621      	mov	r1, r4
 801067c:	4638      	mov	r0, r7
 801067e:	f7ff ff0b 	bl	8010498 <__multiply>
 8010682:	6020      	str	r0, [r4, #0]
 8010684:	f8c0 9000 	str.w	r9, [r0]
 8010688:	4604      	mov	r4, r0
 801068a:	e7e4      	b.n	8010656 <__pow5mult+0x6a>
 801068c:	4630      	mov	r0, r6
 801068e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010692:	bf00      	nop
 8010694:	08011260 	.word	0x08011260
 8010698:	08011185 	.word	0x08011185
 801069c:	08011205 	.word	0x08011205

080106a0 <__lshift>:
 80106a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a4:	460c      	mov	r4, r1
 80106a6:	6849      	ldr	r1, [r1, #4]
 80106a8:	6923      	ldr	r3, [r4, #16]
 80106aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106ae:	68a3      	ldr	r3, [r4, #8]
 80106b0:	4607      	mov	r7, r0
 80106b2:	4691      	mov	r9, r2
 80106b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106b8:	f108 0601 	add.w	r6, r8, #1
 80106bc:	42b3      	cmp	r3, r6
 80106be:	db0b      	blt.n	80106d8 <__lshift+0x38>
 80106c0:	4638      	mov	r0, r7
 80106c2:	f7ff fddf 	bl	8010284 <_Balloc>
 80106c6:	4605      	mov	r5, r0
 80106c8:	b948      	cbnz	r0, 80106de <__lshift+0x3e>
 80106ca:	4602      	mov	r2, r0
 80106cc:	4b28      	ldr	r3, [pc, #160]	@ (8010770 <__lshift+0xd0>)
 80106ce:	4829      	ldr	r0, [pc, #164]	@ (8010774 <__lshift+0xd4>)
 80106d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80106d4:	f000 fbe8 	bl	8010ea8 <__assert_func>
 80106d8:	3101      	adds	r1, #1
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	e7ee      	b.n	80106bc <__lshift+0x1c>
 80106de:	2300      	movs	r3, #0
 80106e0:	f100 0114 	add.w	r1, r0, #20
 80106e4:	f100 0210 	add.w	r2, r0, #16
 80106e8:	4618      	mov	r0, r3
 80106ea:	4553      	cmp	r3, sl
 80106ec:	db33      	blt.n	8010756 <__lshift+0xb6>
 80106ee:	6920      	ldr	r0, [r4, #16]
 80106f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106f4:	f104 0314 	add.w	r3, r4, #20
 80106f8:	f019 091f 	ands.w	r9, r9, #31
 80106fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010704:	d02b      	beq.n	801075e <__lshift+0xbe>
 8010706:	f1c9 0e20 	rsb	lr, r9, #32
 801070a:	468a      	mov	sl, r1
 801070c:	2200      	movs	r2, #0
 801070e:	6818      	ldr	r0, [r3, #0]
 8010710:	fa00 f009 	lsl.w	r0, r0, r9
 8010714:	4310      	orrs	r0, r2
 8010716:	f84a 0b04 	str.w	r0, [sl], #4
 801071a:	f853 2b04 	ldr.w	r2, [r3], #4
 801071e:	459c      	cmp	ip, r3
 8010720:	fa22 f20e 	lsr.w	r2, r2, lr
 8010724:	d8f3      	bhi.n	801070e <__lshift+0x6e>
 8010726:	ebac 0304 	sub.w	r3, ip, r4
 801072a:	3b15      	subs	r3, #21
 801072c:	f023 0303 	bic.w	r3, r3, #3
 8010730:	3304      	adds	r3, #4
 8010732:	f104 0015 	add.w	r0, r4, #21
 8010736:	4584      	cmp	ip, r0
 8010738:	bf38      	it	cc
 801073a:	2304      	movcc	r3, #4
 801073c:	50ca      	str	r2, [r1, r3]
 801073e:	b10a      	cbz	r2, 8010744 <__lshift+0xa4>
 8010740:	f108 0602 	add.w	r6, r8, #2
 8010744:	3e01      	subs	r6, #1
 8010746:	4638      	mov	r0, r7
 8010748:	612e      	str	r6, [r5, #16]
 801074a:	4621      	mov	r1, r4
 801074c:	f7ff fdda 	bl	8010304 <_Bfree>
 8010750:	4628      	mov	r0, r5
 8010752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010756:	f842 0f04 	str.w	r0, [r2, #4]!
 801075a:	3301      	adds	r3, #1
 801075c:	e7c5      	b.n	80106ea <__lshift+0x4a>
 801075e:	3904      	subs	r1, #4
 8010760:	f853 2b04 	ldr.w	r2, [r3], #4
 8010764:	f841 2f04 	str.w	r2, [r1, #4]!
 8010768:	459c      	cmp	ip, r3
 801076a:	d8f9      	bhi.n	8010760 <__lshift+0xc0>
 801076c:	e7ea      	b.n	8010744 <__lshift+0xa4>
 801076e:	bf00      	nop
 8010770:	080111f4 	.word	0x080111f4
 8010774:	08011205 	.word	0x08011205

08010778 <__mcmp>:
 8010778:	690a      	ldr	r2, [r1, #16]
 801077a:	4603      	mov	r3, r0
 801077c:	6900      	ldr	r0, [r0, #16]
 801077e:	1a80      	subs	r0, r0, r2
 8010780:	b530      	push	{r4, r5, lr}
 8010782:	d10e      	bne.n	80107a2 <__mcmp+0x2a>
 8010784:	3314      	adds	r3, #20
 8010786:	3114      	adds	r1, #20
 8010788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801078c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010798:	4295      	cmp	r5, r2
 801079a:	d003      	beq.n	80107a4 <__mcmp+0x2c>
 801079c:	d205      	bcs.n	80107aa <__mcmp+0x32>
 801079e:	f04f 30ff 	mov.w	r0, #4294967295
 80107a2:	bd30      	pop	{r4, r5, pc}
 80107a4:	42a3      	cmp	r3, r4
 80107a6:	d3f3      	bcc.n	8010790 <__mcmp+0x18>
 80107a8:	e7fb      	b.n	80107a2 <__mcmp+0x2a>
 80107aa:	2001      	movs	r0, #1
 80107ac:	e7f9      	b.n	80107a2 <__mcmp+0x2a>
	...

080107b0 <__mdiff>:
 80107b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	4689      	mov	r9, r1
 80107b6:	4606      	mov	r6, r0
 80107b8:	4611      	mov	r1, r2
 80107ba:	4648      	mov	r0, r9
 80107bc:	4614      	mov	r4, r2
 80107be:	f7ff ffdb 	bl	8010778 <__mcmp>
 80107c2:	1e05      	subs	r5, r0, #0
 80107c4:	d112      	bne.n	80107ec <__mdiff+0x3c>
 80107c6:	4629      	mov	r1, r5
 80107c8:	4630      	mov	r0, r6
 80107ca:	f7ff fd5b 	bl	8010284 <_Balloc>
 80107ce:	4602      	mov	r2, r0
 80107d0:	b928      	cbnz	r0, 80107de <__mdiff+0x2e>
 80107d2:	4b3f      	ldr	r3, [pc, #252]	@ (80108d0 <__mdiff+0x120>)
 80107d4:	f240 2137 	movw	r1, #567	@ 0x237
 80107d8:	483e      	ldr	r0, [pc, #248]	@ (80108d4 <__mdiff+0x124>)
 80107da:	f000 fb65 	bl	8010ea8 <__assert_func>
 80107de:	2301      	movs	r3, #1
 80107e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80107e4:	4610      	mov	r0, r2
 80107e6:	b003      	add	sp, #12
 80107e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ec:	bfbc      	itt	lt
 80107ee:	464b      	movlt	r3, r9
 80107f0:	46a1      	movlt	r9, r4
 80107f2:	4630      	mov	r0, r6
 80107f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80107f8:	bfba      	itte	lt
 80107fa:	461c      	movlt	r4, r3
 80107fc:	2501      	movlt	r5, #1
 80107fe:	2500      	movge	r5, #0
 8010800:	f7ff fd40 	bl	8010284 <_Balloc>
 8010804:	4602      	mov	r2, r0
 8010806:	b918      	cbnz	r0, 8010810 <__mdiff+0x60>
 8010808:	4b31      	ldr	r3, [pc, #196]	@ (80108d0 <__mdiff+0x120>)
 801080a:	f240 2145 	movw	r1, #581	@ 0x245
 801080e:	e7e3      	b.n	80107d8 <__mdiff+0x28>
 8010810:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010814:	6926      	ldr	r6, [r4, #16]
 8010816:	60c5      	str	r5, [r0, #12]
 8010818:	f109 0310 	add.w	r3, r9, #16
 801081c:	f109 0514 	add.w	r5, r9, #20
 8010820:	f104 0e14 	add.w	lr, r4, #20
 8010824:	f100 0b14 	add.w	fp, r0, #20
 8010828:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801082c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010830:	9301      	str	r3, [sp, #4]
 8010832:	46d9      	mov	r9, fp
 8010834:	f04f 0c00 	mov.w	ip, #0
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801083e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010842:	9301      	str	r3, [sp, #4]
 8010844:	fa1f f38a 	uxth.w	r3, sl
 8010848:	4619      	mov	r1, r3
 801084a:	b283      	uxth	r3, r0
 801084c:	1acb      	subs	r3, r1, r3
 801084e:	0c00      	lsrs	r0, r0, #16
 8010850:	4463      	add	r3, ip
 8010852:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010856:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801085a:	b29b      	uxth	r3, r3
 801085c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010860:	4576      	cmp	r6, lr
 8010862:	f849 3b04 	str.w	r3, [r9], #4
 8010866:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801086a:	d8e5      	bhi.n	8010838 <__mdiff+0x88>
 801086c:	1b33      	subs	r3, r6, r4
 801086e:	3b15      	subs	r3, #21
 8010870:	f023 0303 	bic.w	r3, r3, #3
 8010874:	3415      	adds	r4, #21
 8010876:	3304      	adds	r3, #4
 8010878:	42a6      	cmp	r6, r4
 801087a:	bf38      	it	cc
 801087c:	2304      	movcc	r3, #4
 801087e:	441d      	add	r5, r3
 8010880:	445b      	add	r3, fp
 8010882:	461e      	mov	r6, r3
 8010884:	462c      	mov	r4, r5
 8010886:	4544      	cmp	r4, r8
 8010888:	d30e      	bcc.n	80108a8 <__mdiff+0xf8>
 801088a:	f108 0103 	add.w	r1, r8, #3
 801088e:	1b49      	subs	r1, r1, r5
 8010890:	f021 0103 	bic.w	r1, r1, #3
 8010894:	3d03      	subs	r5, #3
 8010896:	45a8      	cmp	r8, r5
 8010898:	bf38      	it	cc
 801089a:	2100      	movcc	r1, #0
 801089c:	440b      	add	r3, r1
 801089e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80108a2:	b191      	cbz	r1, 80108ca <__mdiff+0x11a>
 80108a4:	6117      	str	r7, [r2, #16]
 80108a6:	e79d      	b.n	80107e4 <__mdiff+0x34>
 80108a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80108ac:	46e6      	mov	lr, ip
 80108ae:	0c08      	lsrs	r0, r1, #16
 80108b0:	fa1c fc81 	uxtah	ip, ip, r1
 80108b4:	4471      	add	r1, lr
 80108b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80108ba:	b289      	uxth	r1, r1
 80108bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80108c0:	f846 1b04 	str.w	r1, [r6], #4
 80108c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80108c8:	e7dd      	b.n	8010886 <__mdiff+0xd6>
 80108ca:	3f01      	subs	r7, #1
 80108cc:	e7e7      	b.n	801089e <__mdiff+0xee>
 80108ce:	bf00      	nop
 80108d0:	080111f4 	.word	0x080111f4
 80108d4:	08011205 	.word	0x08011205

080108d8 <__d2b>:
 80108d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108dc:	460f      	mov	r7, r1
 80108de:	2101      	movs	r1, #1
 80108e0:	ec59 8b10 	vmov	r8, r9, d0
 80108e4:	4616      	mov	r6, r2
 80108e6:	f7ff fccd 	bl	8010284 <_Balloc>
 80108ea:	4604      	mov	r4, r0
 80108ec:	b930      	cbnz	r0, 80108fc <__d2b+0x24>
 80108ee:	4602      	mov	r2, r0
 80108f0:	4b23      	ldr	r3, [pc, #140]	@ (8010980 <__d2b+0xa8>)
 80108f2:	4824      	ldr	r0, [pc, #144]	@ (8010984 <__d2b+0xac>)
 80108f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80108f8:	f000 fad6 	bl	8010ea8 <__assert_func>
 80108fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010904:	b10d      	cbz	r5, 801090a <__d2b+0x32>
 8010906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801090a:	9301      	str	r3, [sp, #4]
 801090c:	f1b8 0300 	subs.w	r3, r8, #0
 8010910:	d023      	beq.n	801095a <__d2b+0x82>
 8010912:	4668      	mov	r0, sp
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	f7ff fd7c 	bl	8010412 <__lo0bits>
 801091a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801091e:	b1d0      	cbz	r0, 8010956 <__d2b+0x7e>
 8010920:	f1c0 0320 	rsb	r3, r0, #32
 8010924:	fa02 f303 	lsl.w	r3, r2, r3
 8010928:	430b      	orrs	r3, r1
 801092a:	40c2      	lsrs	r2, r0
 801092c:	6163      	str	r3, [r4, #20]
 801092e:	9201      	str	r2, [sp, #4]
 8010930:	9b01      	ldr	r3, [sp, #4]
 8010932:	61a3      	str	r3, [r4, #24]
 8010934:	2b00      	cmp	r3, #0
 8010936:	bf0c      	ite	eq
 8010938:	2201      	moveq	r2, #1
 801093a:	2202      	movne	r2, #2
 801093c:	6122      	str	r2, [r4, #16]
 801093e:	b1a5      	cbz	r5, 801096a <__d2b+0x92>
 8010940:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010944:	4405      	add	r5, r0
 8010946:	603d      	str	r5, [r7, #0]
 8010948:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801094c:	6030      	str	r0, [r6, #0]
 801094e:	4620      	mov	r0, r4
 8010950:	b003      	add	sp, #12
 8010952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010956:	6161      	str	r1, [r4, #20]
 8010958:	e7ea      	b.n	8010930 <__d2b+0x58>
 801095a:	a801      	add	r0, sp, #4
 801095c:	f7ff fd59 	bl	8010412 <__lo0bits>
 8010960:	9b01      	ldr	r3, [sp, #4]
 8010962:	6163      	str	r3, [r4, #20]
 8010964:	3020      	adds	r0, #32
 8010966:	2201      	movs	r2, #1
 8010968:	e7e8      	b.n	801093c <__d2b+0x64>
 801096a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801096e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010972:	6038      	str	r0, [r7, #0]
 8010974:	6918      	ldr	r0, [r3, #16]
 8010976:	f7ff fd2d 	bl	80103d4 <__hi0bits>
 801097a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801097e:	e7e5      	b.n	801094c <__d2b+0x74>
 8010980:	080111f4 	.word	0x080111f4
 8010984:	08011205 	.word	0x08011205

08010988 <__sfputc_r>:
 8010988:	6893      	ldr	r3, [r2, #8]
 801098a:	3b01      	subs	r3, #1
 801098c:	2b00      	cmp	r3, #0
 801098e:	b410      	push	{r4}
 8010990:	6093      	str	r3, [r2, #8]
 8010992:	da08      	bge.n	80109a6 <__sfputc_r+0x1e>
 8010994:	6994      	ldr	r4, [r2, #24]
 8010996:	42a3      	cmp	r3, r4
 8010998:	db01      	blt.n	801099e <__sfputc_r+0x16>
 801099a:	290a      	cmp	r1, #10
 801099c:	d103      	bne.n	80109a6 <__sfputc_r+0x1e>
 801099e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109a2:	f7fe bc7a 	b.w	800f29a <__swbuf_r>
 80109a6:	6813      	ldr	r3, [r2, #0]
 80109a8:	1c58      	adds	r0, r3, #1
 80109aa:	6010      	str	r0, [r2, #0]
 80109ac:	7019      	strb	r1, [r3, #0]
 80109ae:	4608      	mov	r0, r1
 80109b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <__sfputs_r>:
 80109b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b8:	4606      	mov	r6, r0
 80109ba:	460f      	mov	r7, r1
 80109bc:	4614      	mov	r4, r2
 80109be:	18d5      	adds	r5, r2, r3
 80109c0:	42ac      	cmp	r4, r5
 80109c2:	d101      	bne.n	80109c8 <__sfputs_r+0x12>
 80109c4:	2000      	movs	r0, #0
 80109c6:	e007      	b.n	80109d8 <__sfputs_r+0x22>
 80109c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109cc:	463a      	mov	r2, r7
 80109ce:	4630      	mov	r0, r6
 80109d0:	f7ff ffda 	bl	8010988 <__sfputc_r>
 80109d4:	1c43      	adds	r3, r0, #1
 80109d6:	d1f3      	bne.n	80109c0 <__sfputs_r+0xa>
 80109d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109dc <_vfiprintf_r>:
 80109dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e0:	460d      	mov	r5, r1
 80109e2:	b09d      	sub	sp, #116	@ 0x74
 80109e4:	4614      	mov	r4, r2
 80109e6:	4698      	mov	r8, r3
 80109e8:	4606      	mov	r6, r0
 80109ea:	b118      	cbz	r0, 80109f4 <_vfiprintf_r+0x18>
 80109ec:	6a03      	ldr	r3, [r0, #32]
 80109ee:	b90b      	cbnz	r3, 80109f4 <_vfiprintf_r+0x18>
 80109f0:	f7fe fb6a 	bl	800f0c8 <__sinit>
 80109f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109f6:	07d9      	lsls	r1, r3, #31
 80109f8:	d405      	bmi.n	8010a06 <_vfiprintf_r+0x2a>
 80109fa:	89ab      	ldrh	r3, [r5, #12]
 80109fc:	059a      	lsls	r2, r3, #22
 80109fe:	d402      	bmi.n	8010a06 <_vfiprintf_r+0x2a>
 8010a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a02:	f7fe fd5c 	bl	800f4be <__retarget_lock_acquire_recursive>
 8010a06:	89ab      	ldrh	r3, [r5, #12]
 8010a08:	071b      	lsls	r3, r3, #28
 8010a0a:	d501      	bpl.n	8010a10 <_vfiprintf_r+0x34>
 8010a0c:	692b      	ldr	r3, [r5, #16]
 8010a0e:	b99b      	cbnz	r3, 8010a38 <_vfiprintf_r+0x5c>
 8010a10:	4629      	mov	r1, r5
 8010a12:	4630      	mov	r0, r6
 8010a14:	f7fe fc80 	bl	800f318 <__swsetup_r>
 8010a18:	b170      	cbz	r0, 8010a38 <_vfiprintf_r+0x5c>
 8010a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a1c:	07dc      	lsls	r4, r3, #31
 8010a1e:	d504      	bpl.n	8010a2a <_vfiprintf_r+0x4e>
 8010a20:	f04f 30ff 	mov.w	r0, #4294967295
 8010a24:	b01d      	add	sp, #116	@ 0x74
 8010a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a2a:	89ab      	ldrh	r3, [r5, #12]
 8010a2c:	0598      	lsls	r0, r3, #22
 8010a2e:	d4f7      	bmi.n	8010a20 <_vfiprintf_r+0x44>
 8010a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a32:	f7fe fd45 	bl	800f4c0 <__retarget_lock_release_recursive>
 8010a36:	e7f3      	b.n	8010a20 <_vfiprintf_r+0x44>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a3c:	2320      	movs	r3, #32
 8010a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a46:	2330      	movs	r3, #48	@ 0x30
 8010a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010bf8 <_vfiprintf_r+0x21c>
 8010a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a50:	f04f 0901 	mov.w	r9, #1
 8010a54:	4623      	mov	r3, r4
 8010a56:	469a      	mov	sl, r3
 8010a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a5c:	b10a      	cbz	r2, 8010a62 <_vfiprintf_r+0x86>
 8010a5e:	2a25      	cmp	r2, #37	@ 0x25
 8010a60:	d1f9      	bne.n	8010a56 <_vfiprintf_r+0x7a>
 8010a62:	ebba 0b04 	subs.w	fp, sl, r4
 8010a66:	d00b      	beq.n	8010a80 <_vfiprintf_r+0xa4>
 8010a68:	465b      	mov	r3, fp
 8010a6a:	4622      	mov	r2, r4
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f7ff ffa1 	bl	80109b6 <__sfputs_r>
 8010a74:	3001      	adds	r0, #1
 8010a76:	f000 80a7 	beq.w	8010bc8 <_vfiprintf_r+0x1ec>
 8010a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a7c:	445a      	add	r2, fp
 8010a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a80:	f89a 3000 	ldrb.w	r3, [sl]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f000 809f 	beq.w	8010bc8 <_vfiprintf_r+0x1ec>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a94:	f10a 0a01 	add.w	sl, sl, #1
 8010a98:	9304      	str	r3, [sp, #16]
 8010a9a:	9307      	str	r3, [sp, #28]
 8010a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010aa2:	4654      	mov	r4, sl
 8010aa4:	2205      	movs	r2, #5
 8010aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aaa:	4853      	ldr	r0, [pc, #332]	@ (8010bf8 <_vfiprintf_r+0x21c>)
 8010aac:	f7ef fc18 	bl	80002e0 <memchr>
 8010ab0:	9a04      	ldr	r2, [sp, #16]
 8010ab2:	b9d8      	cbnz	r0, 8010aec <_vfiprintf_r+0x110>
 8010ab4:	06d1      	lsls	r1, r2, #27
 8010ab6:	bf44      	itt	mi
 8010ab8:	2320      	movmi	r3, #32
 8010aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010abe:	0713      	lsls	r3, r2, #28
 8010ac0:	bf44      	itt	mi
 8010ac2:	232b      	movmi	r3, #43	@ 0x2b
 8010ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8010acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ace:	d015      	beq.n	8010afc <_vfiprintf_r+0x120>
 8010ad0:	9a07      	ldr	r2, [sp, #28]
 8010ad2:	4654      	mov	r4, sl
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	f04f 0c0a 	mov.w	ip, #10
 8010ada:	4621      	mov	r1, r4
 8010adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ae0:	3b30      	subs	r3, #48	@ 0x30
 8010ae2:	2b09      	cmp	r3, #9
 8010ae4:	d94b      	bls.n	8010b7e <_vfiprintf_r+0x1a2>
 8010ae6:	b1b0      	cbz	r0, 8010b16 <_vfiprintf_r+0x13a>
 8010ae8:	9207      	str	r2, [sp, #28]
 8010aea:	e014      	b.n	8010b16 <_vfiprintf_r+0x13a>
 8010aec:	eba0 0308 	sub.w	r3, r0, r8
 8010af0:	fa09 f303 	lsl.w	r3, r9, r3
 8010af4:	4313      	orrs	r3, r2
 8010af6:	9304      	str	r3, [sp, #16]
 8010af8:	46a2      	mov	sl, r4
 8010afa:	e7d2      	b.n	8010aa2 <_vfiprintf_r+0xc6>
 8010afc:	9b03      	ldr	r3, [sp, #12]
 8010afe:	1d19      	adds	r1, r3, #4
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	9103      	str	r1, [sp, #12]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	bfbb      	ittet	lt
 8010b08:	425b      	neglt	r3, r3
 8010b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8010b0e:	9307      	strge	r3, [sp, #28]
 8010b10:	9307      	strlt	r3, [sp, #28]
 8010b12:	bfb8      	it	lt
 8010b14:	9204      	strlt	r2, [sp, #16]
 8010b16:	7823      	ldrb	r3, [r4, #0]
 8010b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b1a:	d10a      	bne.n	8010b32 <_vfiprintf_r+0x156>
 8010b1c:	7863      	ldrb	r3, [r4, #1]
 8010b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b20:	d132      	bne.n	8010b88 <_vfiprintf_r+0x1ac>
 8010b22:	9b03      	ldr	r3, [sp, #12]
 8010b24:	1d1a      	adds	r2, r3, #4
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	9203      	str	r2, [sp, #12]
 8010b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b2e:	3402      	adds	r4, #2
 8010b30:	9305      	str	r3, [sp, #20]
 8010b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c08 <_vfiprintf_r+0x22c>
 8010b36:	7821      	ldrb	r1, [r4, #0]
 8010b38:	2203      	movs	r2, #3
 8010b3a:	4650      	mov	r0, sl
 8010b3c:	f7ef fbd0 	bl	80002e0 <memchr>
 8010b40:	b138      	cbz	r0, 8010b52 <_vfiprintf_r+0x176>
 8010b42:	9b04      	ldr	r3, [sp, #16]
 8010b44:	eba0 000a 	sub.w	r0, r0, sl
 8010b48:	2240      	movs	r2, #64	@ 0x40
 8010b4a:	4082      	lsls	r2, r0
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	3401      	adds	r4, #1
 8010b50:	9304      	str	r3, [sp, #16]
 8010b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b56:	4829      	ldr	r0, [pc, #164]	@ (8010bfc <_vfiprintf_r+0x220>)
 8010b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b5c:	2206      	movs	r2, #6
 8010b5e:	f7ef fbbf 	bl	80002e0 <memchr>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d03f      	beq.n	8010be6 <_vfiprintf_r+0x20a>
 8010b66:	4b26      	ldr	r3, [pc, #152]	@ (8010c00 <_vfiprintf_r+0x224>)
 8010b68:	bb1b      	cbnz	r3, 8010bb2 <_vfiprintf_r+0x1d6>
 8010b6a:	9b03      	ldr	r3, [sp, #12]
 8010b6c:	3307      	adds	r3, #7
 8010b6e:	f023 0307 	bic.w	r3, r3, #7
 8010b72:	3308      	adds	r3, #8
 8010b74:	9303      	str	r3, [sp, #12]
 8010b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b78:	443b      	add	r3, r7
 8010b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b7c:	e76a      	b.n	8010a54 <_vfiprintf_r+0x78>
 8010b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b82:	460c      	mov	r4, r1
 8010b84:	2001      	movs	r0, #1
 8010b86:	e7a8      	b.n	8010ada <_vfiprintf_r+0xfe>
 8010b88:	2300      	movs	r3, #0
 8010b8a:	3401      	adds	r4, #1
 8010b8c:	9305      	str	r3, [sp, #20]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	f04f 0c0a 	mov.w	ip, #10
 8010b94:	4620      	mov	r0, r4
 8010b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b9a:	3a30      	subs	r2, #48	@ 0x30
 8010b9c:	2a09      	cmp	r2, #9
 8010b9e:	d903      	bls.n	8010ba8 <_vfiprintf_r+0x1cc>
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d0c6      	beq.n	8010b32 <_vfiprintf_r+0x156>
 8010ba4:	9105      	str	r1, [sp, #20]
 8010ba6:	e7c4      	b.n	8010b32 <_vfiprintf_r+0x156>
 8010ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bac:	4604      	mov	r4, r0
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e7f0      	b.n	8010b94 <_vfiprintf_r+0x1b8>
 8010bb2:	ab03      	add	r3, sp, #12
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	462a      	mov	r2, r5
 8010bb8:	4b12      	ldr	r3, [pc, #72]	@ (8010c04 <_vfiprintf_r+0x228>)
 8010bba:	a904      	add	r1, sp, #16
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	f7fd fe4f 	bl	800e860 <_printf_float>
 8010bc2:	4607      	mov	r7, r0
 8010bc4:	1c78      	adds	r0, r7, #1
 8010bc6:	d1d6      	bne.n	8010b76 <_vfiprintf_r+0x19a>
 8010bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bca:	07d9      	lsls	r1, r3, #31
 8010bcc:	d405      	bmi.n	8010bda <_vfiprintf_r+0x1fe>
 8010bce:	89ab      	ldrh	r3, [r5, #12]
 8010bd0:	059a      	lsls	r2, r3, #22
 8010bd2:	d402      	bmi.n	8010bda <_vfiprintf_r+0x1fe>
 8010bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bd6:	f7fe fc73 	bl	800f4c0 <__retarget_lock_release_recursive>
 8010bda:	89ab      	ldrh	r3, [r5, #12]
 8010bdc:	065b      	lsls	r3, r3, #25
 8010bde:	f53f af1f 	bmi.w	8010a20 <_vfiprintf_r+0x44>
 8010be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010be4:	e71e      	b.n	8010a24 <_vfiprintf_r+0x48>
 8010be6:	ab03      	add	r3, sp, #12
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	462a      	mov	r2, r5
 8010bec:	4b05      	ldr	r3, [pc, #20]	@ (8010c04 <_vfiprintf_r+0x228>)
 8010bee:	a904      	add	r1, sp, #16
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f7fe f8bd 	bl	800ed70 <_printf_i>
 8010bf6:	e7e4      	b.n	8010bc2 <_vfiprintf_r+0x1e6>
 8010bf8:	08011360 	.word	0x08011360
 8010bfc:	0801136a 	.word	0x0801136a
 8010c00:	0800e861 	.word	0x0800e861
 8010c04:	080109b7 	.word	0x080109b7
 8010c08:	08011366 	.word	0x08011366

08010c0c <__sflush_r>:
 8010c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c14:	0716      	lsls	r6, r2, #28
 8010c16:	4605      	mov	r5, r0
 8010c18:	460c      	mov	r4, r1
 8010c1a:	d454      	bmi.n	8010cc6 <__sflush_r+0xba>
 8010c1c:	684b      	ldr	r3, [r1, #4]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dc02      	bgt.n	8010c28 <__sflush_r+0x1c>
 8010c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	dd48      	ble.n	8010cba <__sflush_r+0xae>
 8010c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c2a:	2e00      	cmp	r6, #0
 8010c2c:	d045      	beq.n	8010cba <__sflush_r+0xae>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c34:	682f      	ldr	r7, [r5, #0]
 8010c36:	6a21      	ldr	r1, [r4, #32]
 8010c38:	602b      	str	r3, [r5, #0]
 8010c3a:	d030      	beq.n	8010c9e <__sflush_r+0x92>
 8010c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c3e:	89a3      	ldrh	r3, [r4, #12]
 8010c40:	0759      	lsls	r1, r3, #29
 8010c42:	d505      	bpl.n	8010c50 <__sflush_r+0x44>
 8010c44:	6863      	ldr	r3, [r4, #4]
 8010c46:	1ad2      	subs	r2, r2, r3
 8010c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c4a:	b10b      	cbz	r3, 8010c50 <__sflush_r+0x44>
 8010c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c4e:	1ad2      	subs	r2, r2, r3
 8010c50:	2300      	movs	r3, #0
 8010c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c54:	6a21      	ldr	r1, [r4, #32]
 8010c56:	4628      	mov	r0, r5
 8010c58:	47b0      	blx	r6
 8010c5a:	1c43      	adds	r3, r0, #1
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	d106      	bne.n	8010c6e <__sflush_r+0x62>
 8010c60:	6829      	ldr	r1, [r5, #0]
 8010c62:	291d      	cmp	r1, #29
 8010c64:	d82b      	bhi.n	8010cbe <__sflush_r+0xb2>
 8010c66:	4a2a      	ldr	r2, [pc, #168]	@ (8010d10 <__sflush_r+0x104>)
 8010c68:	410a      	asrs	r2, r1
 8010c6a:	07d6      	lsls	r6, r2, #31
 8010c6c:	d427      	bmi.n	8010cbe <__sflush_r+0xb2>
 8010c6e:	2200      	movs	r2, #0
 8010c70:	6062      	str	r2, [r4, #4]
 8010c72:	04d9      	lsls	r1, r3, #19
 8010c74:	6922      	ldr	r2, [r4, #16]
 8010c76:	6022      	str	r2, [r4, #0]
 8010c78:	d504      	bpl.n	8010c84 <__sflush_r+0x78>
 8010c7a:	1c42      	adds	r2, r0, #1
 8010c7c:	d101      	bne.n	8010c82 <__sflush_r+0x76>
 8010c7e:	682b      	ldr	r3, [r5, #0]
 8010c80:	b903      	cbnz	r3, 8010c84 <__sflush_r+0x78>
 8010c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c86:	602f      	str	r7, [r5, #0]
 8010c88:	b1b9      	cbz	r1, 8010cba <__sflush_r+0xae>
 8010c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c8e:	4299      	cmp	r1, r3
 8010c90:	d002      	beq.n	8010c98 <__sflush_r+0x8c>
 8010c92:	4628      	mov	r0, r5
 8010c94:	f7ff f9f6 	bl	8010084 <_free_r>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c9c:	e00d      	b.n	8010cba <__sflush_r+0xae>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	47b0      	blx	r6
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	1c50      	adds	r0, r2, #1
 8010ca8:	d1c9      	bne.n	8010c3e <__sflush_r+0x32>
 8010caa:	682b      	ldr	r3, [r5, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d0c6      	beq.n	8010c3e <__sflush_r+0x32>
 8010cb0:	2b1d      	cmp	r3, #29
 8010cb2:	d001      	beq.n	8010cb8 <__sflush_r+0xac>
 8010cb4:	2b16      	cmp	r3, #22
 8010cb6:	d11e      	bne.n	8010cf6 <__sflush_r+0xea>
 8010cb8:	602f      	str	r7, [r5, #0]
 8010cba:	2000      	movs	r0, #0
 8010cbc:	e022      	b.n	8010d04 <__sflush_r+0xf8>
 8010cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cc2:	b21b      	sxth	r3, r3
 8010cc4:	e01b      	b.n	8010cfe <__sflush_r+0xf2>
 8010cc6:	690f      	ldr	r7, [r1, #16]
 8010cc8:	2f00      	cmp	r7, #0
 8010cca:	d0f6      	beq.n	8010cba <__sflush_r+0xae>
 8010ccc:	0793      	lsls	r3, r2, #30
 8010cce:	680e      	ldr	r6, [r1, #0]
 8010cd0:	bf08      	it	eq
 8010cd2:	694b      	ldreq	r3, [r1, #20]
 8010cd4:	600f      	str	r7, [r1, #0]
 8010cd6:	bf18      	it	ne
 8010cd8:	2300      	movne	r3, #0
 8010cda:	eba6 0807 	sub.w	r8, r6, r7
 8010cde:	608b      	str	r3, [r1, #8]
 8010ce0:	f1b8 0f00 	cmp.w	r8, #0
 8010ce4:	dde9      	ble.n	8010cba <__sflush_r+0xae>
 8010ce6:	6a21      	ldr	r1, [r4, #32]
 8010ce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010cea:	4643      	mov	r3, r8
 8010cec:	463a      	mov	r2, r7
 8010cee:	4628      	mov	r0, r5
 8010cf0:	47b0      	blx	r6
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	dc08      	bgt.n	8010d08 <__sflush_r+0xfc>
 8010cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	f04f 30ff 	mov.w	r0, #4294967295
 8010d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d08:	4407      	add	r7, r0
 8010d0a:	eba8 0800 	sub.w	r8, r8, r0
 8010d0e:	e7e7      	b.n	8010ce0 <__sflush_r+0xd4>
 8010d10:	dfbffffe 	.word	0xdfbffffe

08010d14 <_fflush_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	690b      	ldr	r3, [r1, #16]
 8010d18:	4605      	mov	r5, r0
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	b913      	cbnz	r3, 8010d24 <_fflush_r+0x10>
 8010d1e:	2500      	movs	r5, #0
 8010d20:	4628      	mov	r0, r5
 8010d22:	bd38      	pop	{r3, r4, r5, pc}
 8010d24:	b118      	cbz	r0, 8010d2e <_fflush_r+0x1a>
 8010d26:	6a03      	ldr	r3, [r0, #32]
 8010d28:	b90b      	cbnz	r3, 8010d2e <_fflush_r+0x1a>
 8010d2a:	f7fe f9cd 	bl	800f0c8 <__sinit>
 8010d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d0f3      	beq.n	8010d1e <_fflush_r+0xa>
 8010d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d38:	07d0      	lsls	r0, r2, #31
 8010d3a:	d404      	bmi.n	8010d46 <_fflush_r+0x32>
 8010d3c:	0599      	lsls	r1, r3, #22
 8010d3e:	d402      	bmi.n	8010d46 <_fflush_r+0x32>
 8010d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d42:	f7fe fbbc 	bl	800f4be <__retarget_lock_acquire_recursive>
 8010d46:	4628      	mov	r0, r5
 8010d48:	4621      	mov	r1, r4
 8010d4a:	f7ff ff5f 	bl	8010c0c <__sflush_r>
 8010d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d50:	07da      	lsls	r2, r3, #31
 8010d52:	4605      	mov	r5, r0
 8010d54:	d4e4      	bmi.n	8010d20 <_fflush_r+0xc>
 8010d56:	89a3      	ldrh	r3, [r4, #12]
 8010d58:	059b      	lsls	r3, r3, #22
 8010d5a:	d4e1      	bmi.n	8010d20 <_fflush_r+0xc>
 8010d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d5e:	f7fe fbaf 	bl	800f4c0 <__retarget_lock_release_recursive>
 8010d62:	e7dd      	b.n	8010d20 <_fflush_r+0xc>

08010d64 <__swhatbuf_r>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	460c      	mov	r4, r1
 8010d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d6c:	2900      	cmp	r1, #0
 8010d6e:	b096      	sub	sp, #88	@ 0x58
 8010d70:	4615      	mov	r5, r2
 8010d72:	461e      	mov	r6, r3
 8010d74:	da0d      	bge.n	8010d92 <__swhatbuf_r+0x2e>
 8010d76:	89a3      	ldrh	r3, [r4, #12]
 8010d78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d7c:	f04f 0100 	mov.w	r1, #0
 8010d80:	bf14      	ite	ne
 8010d82:	2340      	movne	r3, #64	@ 0x40
 8010d84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d88:	2000      	movs	r0, #0
 8010d8a:	6031      	str	r1, [r6, #0]
 8010d8c:	602b      	str	r3, [r5, #0]
 8010d8e:	b016      	add	sp, #88	@ 0x58
 8010d90:	bd70      	pop	{r4, r5, r6, pc}
 8010d92:	466a      	mov	r2, sp
 8010d94:	f000 f848 	bl	8010e28 <_fstat_r>
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	dbec      	blt.n	8010d76 <__swhatbuf_r+0x12>
 8010d9c:	9901      	ldr	r1, [sp, #4]
 8010d9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010da2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010da6:	4259      	negs	r1, r3
 8010da8:	4159      	adcs	r1, r3
 8010daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dae:	e7eb      	b.n	8010d88 <__swhatbuf_r+0x24>

08010db0 <__smakebuf_r>:
 8010db0:	898b      	ldrh	r3, [r1, #12]
 8010db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010db4:	079d      	lsls	r5, r3, #30
 8010db6:	4606      	mov	r6, r0
 8010db8:	460c      	mov	r4, r1
 8010dba:	d507      	bpl.n	8010dcc <__smakebuf_r+0x1c>
 8010dbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	6123      	str	r3, [r4, #16]
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	6163      	str	r3, [r4, #20]
 8010dc8:	b003      	add	sp, #12
 8010dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dcc:	ab01      	add	r3, sp, #4
 8010dce:	466a      	mov	r2, sp
 8010dd0:	f7ff ffc8 	bl	8010d64 <__swhatbuf_r>
 8010dd4:	9f00      	ldr	r7, [sp, #0]
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	4639      	mov	r1, r7
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ff f9c6 	bl	801016c <_malloc_r>
 8010de0:	b948      	cbnz	r0, 8010df6 <__smakebuf_r+0x46>
 8010de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010de6:	059a      	lsls	r2, r3, #22
 8010de8:	d4ee      	bmi.n	8010dc8 <__smakebuf_r+0x18>
 8010dea:	f023 0303 	bic.w	r3, r3, #3
 8010dee:	f043 0302 	orr.w	r3, r3, #2
 8010df2:	81a3      	strh	r3, [r4, #12]
 8010df4:	e7e2      	b.n	8010dbc <__smakebuf_r+0xc>
 8010df6:	89a3      	ldrh	r3, [r4, #12]
 8010df8:	6020      	str	r0, [r4, #0]
 8010dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dfe:	81a3      	strh	r3, [r4, #12]
 8010e00:	9b01      	ldr	r3, [sp, #4]
 8010e02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e06:	b15b      	cbz	r3, 8010e20 <__smakebuf_r+0x70>
 8010e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	f000 f81d 	bl	8010e4c <_isatty_r>
 8010e12:	b128      	cbz	r0, 8010e20 <__smakebuf_r+0x70>
 8010e14:	89a3      	ldrh	r3, [r4, #12]
 8010e16:	f023 0303 	bic.w	r3, r3, #3
 8010e1a:	f043 0301 	orr.w	r3, r3, #1
 8010e1e:	81a3      	strh	r3, [r4, #12]
 8010e20:	89a3      	ldrh	r3, [r4, #12]
 8010e22:	431d      	orrs	r5, r3
 8010e24:	81a5      	strh	r5, [r4, #12]
 8010e26:	e7cf      	b.n	8010dc8 <__smakebuf_r+0x18>

08010e28 <_fstat_r>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4d07      	ldr	r5, [pc, #28]	@ (8010e48 <_fstat_r+0x20>)
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4604      	mov	r4, r0
 8010e30:	4608      	mov	r0, r1
 8010e32:	4611      	mov	r1, r2
 8010e34:	602b      	str	r3, [r5, #0]
 8010e36:	f7f0 ff1d 	bl	8001c74 <_fstat>
 8010e3a:	1c43      	adds	r3, r0, #1
 8010e3c:	d102      	bne.n	8010e44 <_fstat_r+0x1c>
 8010e3e:	682b      	ldr	r3, [r5, #0]
 8010e40:	b103      	cbz	r3, 8010e44 <_fstat_r+0x1c>
 8010e42:	6023      	str	r3, [r4, #0]
 8010e44:	bd38      	pop	{r3, r4, r5, pc}
 8010e46:	bf00      	nop
 8010e48:	24000cec 	.word	0x24000cec

08010e4c <_isatty_r>:
 8010e4c:	b538      	push	{r3, r4, r5, lr}
 8010e4e:	4d06      	ldr	r5, [pc, #24]	@ (8010e68 <_isatty_r+0x1c>)
 8010e50:	2300      	movs	r3, #0
 8010e52:	4604      	mov	r4, r0
 8010e54:	4608      	mov	r0, r1
 8010e56:	602b      	str	r3, [r5, #0]
 8010e58:	f7f0 ff1c 	bl	8001c94 <_isatty>
 8010e5c:	1c43      	adds	r3, r0, #1
 8010e5e:	d102      	bne.n	8010e66 <_isatty_r+0x1a>
 8010e60:	682b      	ldr	r3, [r5, #0]
 8010e62:	b103      	cbz	r3, 8010e66 <_isatty_r+0x1a>
 8010e64:	6023      	str	r3, [r4, #0]
 8010e66:	bd38      	pop	{r3, r4, r5, pc}
 8010e68:	24000cec 	.word	0x24000cec

08010e6c <_sbrk_r>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4d06      	ldr	r5, [pc, #24]	@ (8010e88 <_sbrk_r+0x1c>)
 8010e70:	2300      	movs	r3, #0
 8010e72:	4604      	mov	r4, r0
 8010e74:	4608      	mov	r0, r1
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	f7f0 ff24 	bl	8001cc4 <_sbrk>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_sbrk_r+0x1a>
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_sbrk_r+0x1a>
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	24000cec 	.word	0x24000cec

08010e8c <memcpy>:
 8010e8c:	440a      	add	r2, r1
 8010e8e:	4291      	cmp	r1, r2
 8010e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e94:	d100      	bne.n	8010e98 <memcpy+0xc>
 8010e96:	4770      	bx	lr
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ea2:	4291      	cmp	r1, r2
 8010ea4:	d1f9      	bne.n	8010e9a <memcpy+0xe>
 8010ea6:	bd10      	pop	{r4, pc}

08010ea8 <__assert_func>:
 8010ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eaa:	4614      	mov	r4, r2
 8010eac:	461a      	mov	r2, r3
 8010eae:	4b09      	ldr	r3, [pc, #36]	@ (8010ed4 <__assert_func+0x2c>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	68d8      	ldr	r0, [r3, #12]
 8010eb6:	b954      	cbnz	r4, 8010ece <__assert_func+0x26>
 8010eb8:	4b07      	ldr	r3, [pc, #28]	@ (8010ed8 <__assert_func+0x30>)
 8010eba:	461c      	mov	r4, r3
 8010ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ec0:	9100      	str	r1, [sp, #0]
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	4905      	ldr	r1, [pc, #20]	@ (8010edc <__assert_func+0x34>)
 8010ec6:	f000 f841 	bl	8010f4c <fiprintf>
 8010eca:	f000 f851 	bl	8010f70 <abort>
 8010ece:	4b04      	ldr	r3, [pc, #16]	@ (8010ee0 <__assert_func+0x38>)
 8010ed0:	e7f4      	b.n	8010ebc <__assert_func+0x14>
 8010ed2:	bf00      	nop
 8010ed4:	24000048 	.word	0x24000048
 8010ed8:	080113b6 	.word	0x080113b6
 8010edc:	08011388 	.word	0x08011388
 8010ee0:	0801137b 	.word	0x0801137b

08010ee4 <_calloc_r>:
 8010ee4:	b570      	push	{r4, r5, r6, lr}
 8010ee6:	fba1 5402 	umull	r5, r4, r1, r2
 8010eea:	b93c      	cbnz	r4, 8010efc <_calloc_r+0x18>
 8010eec:	4629      	mov	r1, r5
 8010eee:	f7ff f93d 	bl	801016c <_malloc_r>
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	b928      	cbnz	r0, 8010f02 <_calloc_r+0x1e>
 8010ef6:	2600      	movs	r6, #0
 8010ef8:	4630      	mov	r0, r6
 8010efa:	bd70      	pop	{r4, r5, r6, pc}
 8010efc:	220c      	movs	r2, #12
 8010efe:	6002      	str	r2, [r0, #0]
 8010f00:	e7f9      	b.n	8010ef6 <_calloc_r+0x12>
 8010f02:	462a      	mov	r2, r5
 8010f04:	4621      	mov	r1, r4
 8010f06:	f7fe fa5d 	bl	800f3c4 <memset>
 8010f0a:	e7f5      	b.n	8010ef8 <_calloc_r+0x14>

08010f0c <__ascii_mbtowc>:
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	b901      	cbnz	r1, 8010f12 <__ascii_mbtowc+0x6>
 8010f10:	a901      	add	r1, sp, #4
 8010f12:	b142      	cbz	r2, 8010f26 <__ascii_mbtowc+0x1a>
 8010f14:	b14b      	cbz	r3, 8010f2a <__ascii_mbtowc+0x1e>
 8010f16:	7813      	ldrb	r3, [r2, #0]
 8010f18:	600b      	str	r3, [r1, #0]
 8010f1a:	7812      	ldrb	r2, [r2, #0]
 8010f1c:	1e10      	subs	r0, r2, #0
 8010f1e:	bf18      	it	ne
 8010f20:	2001      	movne	r0, #1
 8010f22:	b002      	add	sp, #8
 8010f24:	4770      	bx	lr
 8010f26:	4610      	mov	r0, r2
 8010f28:	e7fb      	b.n	8010f22 <__ascii_mbtowc+0x16>
 8010f2a:	f06f 0001 	mvn.w	r0, #1
 8010f2e:	e7f8      	b.n	8010f22 <__ascii_mbtowc+0x16>

08010f30 <__ascii_wctomb>:
 8010f30:	4603      	mov	r3, r0
 8010f32:	4608      	mov	r0, r1
 8010f34:	b141      	cbz	r1, 8010f48 <__ascii_wctomb+0x18>
 8010f36:	2aff      	cmp	r2, #255	@ 0xff
 8010f38:	d904      	bls.n	8010f44 <__ascii_wctomb+0x14>
 8010f3a:	228a      	movs	r2, #138	@ 0x8a
 8010f3c:	601a      	str	r2, [r3, #0]
 8010f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f42:	4770      	bx	lr
 8010f44:	700a      	strb	r2, [r1, #0]
 8010f46:	2001      	movs	r0, #1
 8010f48:	4770      	bx	lr
	...

08010f4c <fiprintf>:
 8010f4c:	b40e      	push	{r1, r2, r3}
 8010f4e:	b503      	push	{r0, r1, lr}
 8010f50:	4601      	mov	r1, r0
 8010f52:	ab03      	add	r3, sp, #12
 8010f54:	4805      	ldr	r0, [pc, #20]	@ (8010f6c <fiprintf+0x20>)
 8010f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f5a:	6800      	ldr	r0, [r0, #0]
 8010f5c:	9301      	str	r3, [sp, #4]
 8010f5e:	f7ff fd3d 	bl	80109dc <_vfiprintf_r>
 8010f62:	b002      	add	sp, #8
 8010f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f68:	b003      	add	sp, #12
 8010f6a:	4770      	bx	lr
 8010f6c:	24000048 	.word	0x24000048

08010f70 <abort>:
 8010f70:	b508      	push	{r3, lr}
 8010f72:	2006      	movs	r0, #6
 8010f74:	f000 f82c 	bl	8010fd0 <raise>
 8010f78:	2001      	movs	r0, #1
 8010f7a:	f7f0 fe47 	bl	8001c0c <_exit>

08010f7e <_raise_r>:
 8010f7e:	291f      	cmp	r1, #31
 8010f80:	b538      	push	{r3, r4, r5, lr}
 8010f82:	4605      	mov	r5, r0
 8010f84:	460c      	mov	r4, r1
 8010f86:	d904      	bls.n	8010f92 <_raise_r+0x14>
 8010f88:	2316      	movs	r3, #22
 8010f8a:	6003      	str	r3, [r0, #0]
 8010f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f90:	bd38      	pop	{r3, r4, r5, pc}
 8010f92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010f94:	b112      	cbz	r2, 8010f9c <_raise_r+0x1e>
 8010f96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f9a:	b94b      	cbnz	r3, 8010fb0 <_raise_r+0x32>
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f000 f831 	bl	8011004 <_getpid_r>
 8010fa2:	4622      	mov	r2, r4
 8010fa4:	4601      	mov	r1, r0
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fac:	f000 b818 	b.w	8010fe0 <_kill_r>
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d00a      	beq.n	8010fca <_raise_r+0x4c>
 8010fb4:	1c59      	adds	r1, r3, #1
 8010fb6:	d103      	bne.n	8010fc0 <_raise_r+0x42>
 8010fb8:	2316      	movs	r3, #22
 8010fba:	6003      	str	r3, [r0, #0]
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	e7e7      	b.n	8010f90 <_raise_r+0x12>
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	4798      	blx	r3
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e7e0      	b.n	8010f90 <_raise_r+0x12>
	...

08010fd0 <raise>:
 8010fd0:	4b02      	ldr	r3, [pc, #8]	@ (8010fdc <raise+0xc>)
 8010fd2:	4601      	mov	r1, r0
 8010fd4:	6818      	ldr	r0, [r3, #0]
 8010fd6:	f7ff bfd2 	b.w	8010f7e <_raise_r>
 8010fda:	bf00      	nop
 8010fdc:	24000048 	.word	0x24000048

08010fe0 <_kill_r>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4d07      	ldr	r5, [pc, #28]	@ (8011000 <_kill_r+0x20>)
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	4608      	mov	r0, r1
 8010fea:	4611      	mov	r1, r2
 8010fec:	602b      	str	r3, [r5, #0]
 8010fee:	f7f0 fdfd 	bl	8001bec <_kill>
 8010ff2:	1c43      	adds	r3, r0, #1
 8010ff4:	d102      	bne.n	8010ffc <_kill_r+0x1c>
 8010ff6:	682b      	ldr	r3, [r5, #0]
 8010ff8:	b103      	cbz	r3, 8010ffc <_kill_r+0x1c>
 8010ffa:	6023      	str	r3, [r4, #0]
 8010ffc:	bd38      	pop	{r3, r4, r5, pc}
 8010ffe:	bf00      	nop
 8011000:	24000cec 	.word	0x24000cec

08011004 <_getpid_r>:
 8011004:	f7f0 bdea 	b.w	8001bdc <_getpid>

08011008 <_init>:
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	bf00      	nop
 801100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801100e:	bc08      	pop	{r3}
 8011010:	469e      	mov	lr, r3
 8011012:	4770      	bx	lr

08011014 <_fini>:
 8011014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011016:	bf00      	nop
 8011018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101a:	bc08      	pop	{r3}
 801101c:	469e      	mov	lr, r3
 801101e:	4770      	bx	lr
